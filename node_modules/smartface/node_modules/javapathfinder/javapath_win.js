//This js file is used to trigger commands on Windows and get the file path if the desired version exists
function JavaPathAndVersion(version,callback){
	var called=false;
	var spawnStr=false;
	var spawn = require('child_process').spawn('java', ['-version']);
	var isFoundInPath=false;
	var isPathCalledBack = false;
	spawn.on('error', function(err){
		JavaPathAndVersionWithReg(version,callback);
	});
	spawn.stderr.on('data', function(data) {
		if(!spawnStr){
			spawnStr=true;
			data = data.toString().split('\n')[0];
			var javaVersion = new RegExp('java version').test(data) ? data.split(' ')[2].replace(/"/g, '') : false;
				if (javaVersion != false && data.indexOf(version)>-1) {
					if(called==false){
						called=true;
						var exec = require('child_process').exec,child;
						child = exec("PATH", function (error, stdout, stderr) {
							if(error){
								JavaPathAndVersionWithReg(version,callback);
							}
							else{
								for(var i=0; i< stdout.toString().split(';').length; i++){(function(){
									if(stdout.toString().split(';')[i].toLowerCase().indexOf('java') > -1 && !isPathCalledBack) {
										isPathCalledBack=true;
										var path = stdout.toString().split(';')[i];
										if(path.indexOf('=')>-1){
											path = path.split('=')[1];
										}
										callback(null,path);
										isFoundInPath=true;
									}		
								}) ();}
								if(!isFoundInPath){
									JavaPathAndVersionWithReg(version,callback);
								}
							}
						});
					}
				}
				else{
					if(called==false){
						JavaPathAndVersionWithReg(version,callback);
					}
					else{
						return;
					}	
				}
		}
	});
}

function JavaPathAndVersionWithReg(version,callback){
	var exec = require('child_process').exec,child;
	var currentVersion;
	var isNotCalled=true;
	var finishedCount = 0;
	var JavaPath="";
	var cmdOptions= ' /s /t REG_SZ /f JavaHome';
	var count = 0;
	var Paths = ['REG QUERY "HKLM\\SOFTWARE\\JavaSoft\\Java Runtime Environment'+'\\'+version+'"',
				
				 'REG QUERY "HKLM\\SOFTWARE\\Wow6432Node\\JavaSoft\\Java Runtime Environment'+'\\'+version+'"',
				 
				 'REG QUERY "HKLM\\SOFTWARE\\JavaSoft\\Java Development Kit'+'\\'+version+'"',

				 'REG QUERY "HKLM\\SOFTWARE\\Wow6432Node\\JavaSoft\\Java Development Kit'+'\\'+version+'"'
				]
	while(count < 4){
		try {
			child = exec(Paths[count] + cmdOptions, function (error, stdout, stderr) {
				if(error!=null){
					finishedCount++;
					if(finishedCount==4){
						if(isNotCalled==true){
							callback('Java Not Found in System',null);
						}
					}
				}
				else{
					currentVersion = stdout.toString();
					JavaPath = currentVersion.split('\n')[2];
					//JavaPath = JavaPath.replace(/\s/g, '');
					JavaPath = JavaPath.trim();
					JavaPath = JavaPath.substring(JavaPath.indexOf('REG_SZ')+6,JavaPath.length)+'\\bin';
					JavaPath = JavaPath.trim();
					finishedCount++;
					if(isNotCalled==true){
						isNotCalled=false;
						callback(null,JavaPath);
					}
				}
			});
		}
		catch (e) {
			console.log("exception");
		}
		count++;
	}
}

exports.path = JavaPathAndVersion;
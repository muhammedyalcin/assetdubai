const _ = require('underscore');
const utility = require('../utility');
const requireJSON = require('../requireJSON');

const helpJson = requireJSON(__dirname, './help.json');
const UI = require('../interactive/ui');
const crtStr = UI.createStr;
const header = UI.header;
const uiMsg = UI.message;

const color = helpJson.color;
const helpOptions = helpJson.options;
const _PAD = '  ';

const HelpModule = (function() {

	const helper = (function() {
		const repeatStr = utility.repeatStr;

		function Helper() {
			var fitFlagPad = 0;
			var _usage;
			var _description;
			var _options = [];
			var _more = [];

			this.addOption = function(option) {
				_options.push(option);
			}

			this.addUsage = function(usage) {
				_usage = usage;
			}

			this.addDescription = function(desc) {
				_description = desc;
			}

			this.addMore = function(more) {
				_more.push(more);
			}

			this.help = function() {
				this.getFitLength();
				writeWithNewLineBefore('Usage: ' + _usage);
				writeWithNewLineBefore(_description);
				writeWithNewLineBefore('Options:');
				write();
				_.each(_options, function(item) {
					write(_PAD + item.flag + repeatStr(' ', fitFlagPad - item.flag.length) + item.description);
				});
			}

			this.helpOption = function(_option) { // help for options more informations
				writeWithNewLineBefore(writeTitle('Option: ') + writeOptions(_option.long));
				writeWithNewLineBefore(_PAD + _option.description);
				writeWithNewLineBefore(writeTitle('Example: '));
				writeWithNewLineBefore(_PAD + _option.example);
				writeWithNewLineBefore(writeTitle('Description: '));
				writeWithNewLineBefore(_PAD + writeDescription(_option.deepDescription));
			};

			this.helpTask = function(_publish, name) { // help for publish
				writeWithNewLineBefore(writeTitle('Task: ') + writeOptions(name));
				writeWithNewLineBefore(writeDescription(_PAD + _publish.description));
				_publish.required && writeWithNewLineBefore(writeTitle('Required: '));
				_publish.required && writeFlagAndDescription(_publish.required);
				_publish.optional && writeWithNewLineBefore(writeTitle('Optional: '));
				_publish.optional && writeFlagAndDescription(_publish.optional);
				_publish.example && writeWithNewLineBefore(writeTitle('Example: '));
				_publish.example && writeWithNewLineBefore(_PAD + _publish.example);
				_publish.advancedExample && writeWithNewLineBefore(writeTitle('Advanced Example: '));
				_publish.advancedExample && writeWithNewLineBefore(_PAD + _publish.advancedExample);
				_publish.deepDescription && writeWithNewLineBefore(writeTitle('Description: '));
				_publish.deepDescription && writeWithNewLineBefore(_PAD + writeDescription(_publish.deepDescription));
			}

			this.version = function() {
				process.stdout.write(uiMsg.header + ' ' + uiMsg.version + '  ' + UI.version);
			}

			// find maximum length
			this.getFitLength = function() {
				_.each(_options, function(item) { // found fit pad by the flag length
					if (item.flag.length > fitFlagPad) {
						fitFlagPad = item.flag.length + 2;
					}
				});
				return fitFlagPad;
			};


		}
		return new Helper();
	})();

	helper.addUsage(helpJson.usage);
	helper.addDescription(helpJson.description);
	helper.addOption({
		flag: crtStr(color.options, helpJson.help.short) + writeGreen(', ') + writeGreen(helpJson.help.long),
		description: crtStr(color.description, helpJson.help.description)
	});
	helper.addOption({
		flag: crtStr(color.options, helpJson.version.short) + writeGreen(', ') + writeGreen(helpJson.version.long),
		description: crtStr(color.description, helpJson.version.description)
	});
	helper.addOption({
		flag: crtStr(color.options, helpOptions.interactive.short) + writeGreen(', ') + writeGreen(helpOptions.interactive.long),

		description: crtStr(color.description, helpOptions.interactive.description)
	});
	_.each(_.keys(helpOptions), function(item) {
		if (item !== 'interactive') {
			const optMessage = crtStr(color.options, helpOptions[item].long) +
				crtStr(color.assign, '=') +
				crtStr(color.value, helpOptions[item].value);
			helper.addOption({
				flag: optMessage,
				description: crtStr(color.description, helpOptions[item].description)
			});
		}
	});

	function writeFlagAndDescription(optList) {
		var maxLen = helper.getFitLength() - (4 * (writeOptions("a").length));
		write();
		_.each(optList, function(item) {
			write(_PAD + writeOptions(item) +
				" ".repeat(maxLen - item.length) +
				writeDescription(helpOptions[item].description));
		});
	}



	function controlIsHelp(args) {
		const tasks = Object.keys(helpJson["task"]);
		const index = tasks.indexOf(args.help);

		if (args.help && !_.isUndefined(helpOptions[args.help])) { // is general help ?
			header();
			helper.helpOption(helpOptions[args.help]);
			process.exit();
		}
		else if (index !== -1 && !_.isUndefined(helpJson.task[tasks[index]])) { // is task help ?
			header();
			helper.helpTask(helpJson.task[tasks[index]], tasks[index]);
			process.exit();
		}
		else if (((args.v || args.version) && process.argv.length === 3)) { // version -v --version ?
			helper.version();
			write();
			process.exit();
		}
		else if (args.h || args.help || (!args.task && // is interactive ?
				!(args.i && process.argv.length === 3 && process.argv.indexOf('-i') !== -1) && !(args.interactive && process.argv.length === 3))) {
			header();
			helper.help();
			write();
			process.exit();
		}
	}
	return {
		helper: helper,
		controlIsHelp: controlIsHelp
	};
})();

function write(text) {
	if (text) {
		console.log(_PAD + text);
	}
	else {
		console.log(_PAD);
	}
}

function writeWithNewLineBefore(text) {
	write();
	write(text);
}

function writeDescription(text) {
	return crtStr(color.description, text);
}

function writeGreen(text) {
	return crtStr('green', text);
}

function writeOptions(text) {
	return crtStr(color.options, text);
}

function writeTitle(text) {
	return crtStr(color.title, text);
}



// Expose Helper module
module.exports = HelpModule;
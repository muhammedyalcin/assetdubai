const https = require('https');
const os = require('os');

const _ = require('underscore');
const SERVER_CONFIG = require("../configuration").SERVER;

var USER_DATA = null;

const commonRequestOptions = {
	host: SERVER_CONFIG.license,
	headers: {
		'Content-Type': 'application/json',
		'charset': 'UTF-8'
	},
	method: 'POST'
};

function callbackGenerator(lambda) {
	return function(response) {
		var str = '';

		response.on('data', function(chunk) {
			str += chunk;
		});

		response.on('end', function() {
			var err = false;
			var json;
			try {
				 json = JSON.parse(str);
			} catch (e) {
				err = true;
			}
			if (!err) {
				lambda(null, json);
			} else {
				lambda(err, str);
			}
		});
	};
}

function getValueFromKey(key, params) {
	var v = null;
	if (params && params[key]) {
		v = params[key];
	} else if (USER_DATA && USER_DATA[key]) {
		v = USER_DATA[key];
	}
	return v;
}

function getLicenseNames(params, done) {
	getLicenseNamesRequest(params, function(err, json) {
		getLicenseNamesCallback(err, json, function(err, user) {
			done(err, user);
		});
	});

	function getLicenseNamesRequest(params, lambda) {
		const options = _.extend({}, commonRequestOptions, {
			path: '/api/UserManagement/GetLicenseNames'
		});

		var token = null;
		if (params && params.Token) {
			token = params.Token;
		} else if (USER_DATA && USER_DATA.Token) {
			token = USER_DATA.Token;
		}
		if (!token) {
			return lambda({
				err: 'User Token is not valid'
			});
		}

		const req = https.request(options, callbackGenerator(lambda));
		req.write(JSON.stringify({
			Token: token
		}));
		req.end();
	}

	function getLicenseNamesCallback(err, json, done) {
		done(err, json);
	}
}

function getLicenseXML(params, done) {
	getLicenseXMLRequest(params, function(err, json) {
		getLicenseXMLCallback(err, json, function(err, xml) {
			if(xml){
				done(null, xml);
			}
			else{
				done(err, null);
			}
		});
	});

	function getLicenseXMLRequest(params, lambda) {
		const options = _.extend({}, commonRequestOptions, {
			path: '/api/UserManagement/GetLicenseXml'
		});

		const token = getValueFromKey('Token', params);
		const licenseId = getValueFromKey('LicenseId', params);
		if (!token) {
			return lambda({
				err: 'User Token is not valid'
			});
		}
		if (!licenseId) {
			return lambda({
				err: 'LicenseId is not valid'
			});
		}

		const req = https.request(options, callbackGenerator(lambda));
		req.write(JSON.stringify({
			"Token": token,
			"LicenseId": licenseId
		}));
		req.end();
	}

	function getLicenseXMLCallback(err, json, done) {
		done(err, json);
	}
}

function login(params, done) {
	loginRequest(params, function(err, json) {
		loginCallback(err, json, function(err, user) {
			done(err, user);
		});
	});

	function loginRequest(params, lambda) {
		const options = _.extend({}, commonRequestOptions, {
			path: '/api/UserManagement/Authentication'
		});

		if (!params || !params.UserName || !params.Password) {
			return lambda({
				err: "Username and Password must be supplied"
			});
		}

		params.Version = params.Version || '4.4.0';
		params.Device = params.Device || os.hostname();

		const req = https.request(options, callbackGenerator(lambda));
		req.write(JSON.stringify(params));
		req.end();
	}

	function loginCallback(err, json, done) {
		if (err) {
			done(err, null);
		} else {
			const user = {
				FullName: json.FullName,
				Token: json.Token
			};
			USER_DATA = user;
			done(null, user);
		}
	}
}

module.exports = {
	login: login,
	getLicenseNames: getLicenseNames,
	getLicenseXML: getLicenseXML
};
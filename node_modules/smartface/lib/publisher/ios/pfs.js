const globalData = require('../../globalData');

function readFileGenerator(smartfacePlayerFolder) {
	return function(filename, options, flag) {
		var type = "string";
		var res = smartfacePlayerFolder.file(filename);
		return new Promise(function(resolve, reject) {
			if (res === null) {
				return reject(new Error('ERROR:ENOENT'));
			}
			if (options) {
				var encoding = options;
				if (options.encoding) {
					encoding = options.encoding;
				}
				if (encoding === 'binary') {
					type = "nodebuffer";
				}
			}
			resolve(res);
		});
	};

}

function writeFileSyncGenerator(smartfacePlayerFolder, contentZip, isCloudBuild) {
	return function(filename, data, options, mode, flag) {
		var _mode = null;
		var _encoding = 'utf8';
		if (options) {
			if (options.encoding) {
				_encoding = options.encoding;
			}
			else {
				_encoding = options;
			}
		}
		var _data = new Buffer(data, _encoding);
		if (mode) {
			_mode = mode;
		}
		smartfacePlayerFolder.file(filename, _data, {
			unixPermissions: _mode
		});
		if (isCloudBuild) {
			contentZip.file(filename, _data);
		}
	};
}

/**
	A singleton `data.pfs_smartfacePlayer` object is created.
	Same object needs to be accessed from multiple places, and its initialization point might change in the future.
	Hence it is better to encapsulate the access so that a future bug would not arise. 
*/
function rwFileSyncSingleton(smartfacePlayerFolder, contentZip, isCloudBuild) {
	var pfs_smartfacePlayerFolder = globalData.get('pfs_smartfacePlayerFolder');
	if (!pfs_smartfacePlayerFolder) {
		var fs_readFile = readFileGenerator(smartfacePlayerFolder);
		var fs_writeFileSync = writeFileSyncGenerator(smartfacePlayerFolder, contentZip, isCloudBuild);
		pfs_smartfacePlayerFolder = {
			readFile: fs_readFile,
			writeFileSync: fs_writeFileSync
		};
		globalData.set('pfs_smartfacePlayerFolder', pfs_smartfacePlayerFolder);
	}
	return pfs_smartfacePlayerFolder;
}

module.exports = {
	rwFileSyncSingleton: rwFileSyncSingleton,
	readFileGenerator: readFileGenerator,
	writeFileSyncGenerator: writeFileSyncGenerator
};

const fs = require("fs");
const path = require('path');
const xcode = require('smf-xcode');
const deepDiff = require('smf-deep-diff');
const appDelegateParser = require('./appDelegateParser');
const pbxMerger = require('./pbxMerger');
const globalData = require('../../globalData');

module.exports = {
	handlePluginDiffs: handlePluginDiffs,
	handleAllPluginsDone: handleAllPluginsDone
};

function handlePluginDiffs(pluginContext, pfs) {
	var plugins = globalData.get('iosConfig.plugins');

	return new Promise(function(resolve, reject) {
		if (!plugins) {
			initializePluginDiffSetup(pfs).then(function(res) {

				plugins = globalData.get('iosConfig.plugins');
				finalize();
				resolve(null);

			}, function(err) {

				reject(err);

			});
		}
		else {
			finalize();
			resolve(null);
		}

	});

	function finalize() {

		var pluginProject = readAndParseProject(path.join(pluginContext.path, 'project.pbxproj'));
		pbxMerger.mergeProjects(pluginProject.hash.project, plugins.playerProject.hash.project);
		// var differences = takeDiffBetweenProjects(plugins.immutablePluginBaseProject, pluginProject);
		// applyDifferencesToProject(plugins.playerProject, differences);
		handleAppDelegateDiffs(path.join(pluginContext.path, 'SmartfaceAppDelegate.mm'));

	}

}

function initializePluginDiffSetup(pfs) {

	return new Promise(function(resolve, reject) {
		var promises = [null, null];

		const outputTempFolder = globalData.get('processedArgs.outputTempFolder');
		promises[0] = copyFromPfsToFs(pfs, outputTempFolder, 'Smartface.xcodeproj/project.pbxproj', 'project.pbxproj');
		promises[1] = copyFromPfsToFs(pfs, outputTempFolder, 'Smartface/SmartfaceAppDelegate.mm', 'SmartfaceAppDelegate.mm');

		Promise
			.all(promises)
			.then(function(res) {

				const immutablePluginBaseProject = readAndParseProject(path.join(__dirname, 'plugin_files', 'project.pbxproj'));
				globalData.set('iosConfig.plugins', {
					appDelegatePluginBase: fs.readFileSync(path.join(__dirname, 'plugin_files', 'SmartfaceAppDelegate.Original.mm'), 'utf8'),
					appDelegatePlayer: fs.readFileSync(path.join(outputTempFolder, 'SmartfaceAppDelegate.mm'), 'utf8'),
					appDelegateDiffs: {
						imports: [],
						funcs: []
					},
					playerProject: readAndParseProject(path.join(outputTempFolder, 'project.pbxproj')),
					immutablePluginBaseProject: immutablePluginBaseProject
				});
				resolve(null);

			}, function(err) {

				reject(err);

			});

	});
}

function copyFromPfsToFs(pfs, outputTempFolder, filePath, targetPath) {
	return new Promise(function(resolve, reject) {
		pfs
			.readFile(filePath, 'utf8')
			.then(function(data) {

				fs.writeFileSync(path.join(outputTempFolder, targetPath), data, 'utf8');
				resolve(null);

			}, function(err) {

				reject(err);

			});
	});

}

function copyFromFsToPfs(pfs, outputTempFolder, filePath, targetPath) {
	const content = fs.readFileSync(path.join(outputTempFolder, filePath), 'utf8');
	pfs.writeFileSync(targetPath, content, 'utf8');
}

function readAndParseProject(filePath) {
	return xcode.project(filePath).parseSync();
}

function handleAllPluginsDone(pfs) {
	const playerProject = globalData.get('iosConfig.plugins.playerProject');
	const outputTempFolder = globalData.get('processedArgs.outputTempFolder');
	writeProject(playerProject, path.join(outputTempFolder, 'project.pbxproj'));
	appDelegateParser.writeAllAppDelegateDiffs(path.join(outputTempFolder, 'SmartfaceAppDelegate.mm'));
	copyFromFsToPfs(pfs, outputTempFolder, 'project.pbxproj', 'Smartface.xcodeproj/project.pbxproj');
	copyFromFsToPfs(pfs, outputTempFolder, 'SmartfaceAppDelegate.mm', 'Smartface/SmartfaceAppDelegate.mm');
}

function applyDifferencesToProject(project, differences, condition) {
	differences.forEach(function(ch) {
		//ignore deleted lines, this should not happen
		if (ch.kind === 'D') {
			return;
		}
		if (ch.kind === 'A') {
			if (ch.item && ch.item.kind === 'D') {
				return;
			}
		}
		if (typeof condition === 'function') {
			if (condition(ch) === false) {
				return;
			}
		}
		deepDiff.applyChange(project.hash.project.objects, true, ch);
	});
}

function takeDiffBetweenProjects(original, other) {
	return deepDiff.diff(original.hash.project.objects, other.hash.project.objects);
}

function writeProject(project, filepath) {
	fs.writeFileSync(filepath, project.writeSync(), 'utf8');
}

function handleAppDelegateDiffs(appDelegatePluginFilePath) {
	var diffs = appDelegateParser.handleAppDelegateFile(appDelegatePluginFilePath);
	var appDelegateDiffs = globalData.get('iosConfig.plugins.appDelegateDiffs');
	globalData.set('iosConfig.plugins.appDelegateDiffs.imports', appDelegateDiffs.imports.concat(diffs.imports));
	globalData.set('iosConfig.plugins.appDelegateDiffs.funcs', appDelegateDiffs.funcs.concat(diffs.funcs));
}
var os = require('os');
var child_process = require('child_process');
var path = require('path');
var fs = require('fs');

function handleAutoPlay(downloadFilePath){
	errCallback = console.log;
	checkIfXcodeBuildExists(function(err){
		if(!err){
			console.log('Starting the application...');
			var dirname = path.dirname(downloadFilePath);
			var basename = path.basename(downloadFilePath, '.zip');
			child_process.exec('unzip "' + basename + '.zip"', {cwd: dirname}, function (error, stdout, stderr) {
				if(stderr) {
					console.log('stderr', stderr);
				} else {
					buildAndRunProject(dirname, basename, console.log);
				}
			});
			/*
			var zip_in_progress = fs.createReadStream(downloadFilePath).pipe(unzip.Extract({ path: dirname }));
			var error = false;
			zip_in_progress.on('error', function(){
				error = true;
				console.log('error is true');
				process.exit();
			});
			zip_in_progress.on('close', function(){
				console.log('closing zip progress');
				if(!error){
					child_process.exec('which xcodebuild', function (error, stdout, stderr) {
						if(stderr) {
							errCallback('Sorry, there was an error.');
						} else if(stdout === '') {
							errCallback('xcodebuild was not found on your system.');
						} else {
							buildAndRunProject(dirname, basename, console.log);
						}
					});
				}
			});
			*/
		}
	});
}

function buildAndRunProject(projectDir, projectName, errCallback){
	//var xcode_cmd = 'xcodebuild -xcconfig "' + projectName +  '.xcconfig"';
	//var xcode_cmd = 'xcodebuild -scheme="SmartfaceDemo"';
	var xcode_cmd = 'xcodebuild -project Smartface.xcodeproj -configuration Debug -xcconfig SmartfaceDemo-Debug.xcconfig';
	child_process.exec(xcode_cmd, {cwd: projectDir, timeout: 20000}, function (error, stdout, stderr) {
		if(stderr) {
			return errCallback('Sorry, there was an error.', stderr);
		}
		var regx = new RegExp('\\*\\* BUILD SUCCEEDED \\*\\*', 'gm');
		if(stdout.match(regx).length === 0) {
			return errCallback('Project failed to build');
		}
		child_process.exec('ios-sim --devicetypeid="iPhone-6s, 9.0" launch "./build/Release-iphoneos/' + projectName + '.app"', {cwd: projectDir, timeout: 20000}, function (error, stdout, stderr) {
			console.log('Starting the simulator');
		});
	});
}

function checkIfXcodeBuildExists(callback){
	if(os.platform() !== 'darwin') {
		return false;
	}
	child_process.exec('which xcodebuild', function (error, stdout, stderr) {
		if(stderr) {
			callback('Sorry, there was an error.');
		} else if(stdout === '') {
			callback('xcodebuild was not found on your system.');
		} else {
			callback(null)
		}
	});
}

module.exports = {
	handleAutoPlay: handleAutoPlay
};
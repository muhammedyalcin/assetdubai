const fs = require('fs');
const path = require('path');
const globalData = require('../../globalData');
const killProcess = require("../../utility.js").killProcess;
const error = require("../../error");

var CurRentappdElegAtefilePath = null;

const findFuncCalls = (function() {
	return {
		findEnd: findEnd,
		findStart: findStart,
		run: run
	};

	function run(lines, begins) {
		const pos_begin = findStart(lines, begins);
		if (pos_begin === -1) {
			killDueToError('"- (void)willSetCustomPluginsOnContext:(JSContext*)context" was not found');
		}
		const pos_end_object = findEnd(lines, pos_begin);
		if (pos_end_object.pos_end === -1) {
			killDueToError('"- (void)dealloc" was not found, at least not after "- (void)willSetCustomPluginsOnContext"');
		}

		var arr = [];
		for (var i = pos_begin; i < pos_end_object.pos_end + 1; i++) {
			var line = lines[i];
			if (pos_end_object.pos_end === i && pos_end_object.bracket_found_with_string) {
				arr.push(line.replace('}', ''));
			}
			else {
				arr.push(line);
			}
		}

		return arr;
	}

	function findStart(lines, begins) {
		const length = lines.length;
		var pos_begin = -1;
		var func_found = false;
		const rgx_openBracket = /\{/;
		for (var i = begins; i < length; i++) {
			var line = lines[i];
			if (func_found) {
				if (line.match(rgx_openBracket)) {
					pos_begin = i + 1;
					break;
				}
			}
			else if (line.match(/^[\s]{0,}\-\ \(void\)willSetCustomPluginsOnContext\:\(JSContext\*\)context/)) {
				func_found = true;
				if (line.match(rgx_openBracket)) {
					pos_begin = i + 1;
					break;
				}
			}
		}
		return pos_begin;
	}

	function findEnd(lines, pos_begin) {
		const length = lines.length;
		var pos_end = -1;
		var pos_dealloc = -1;
		var bracket_found_with_string = false;
		const rgx_closeBracket = /\}/;
		const rgx_dealloc = /^[\s]{0,}\-[\s]{0,}\(void\)dealloc/;
		for (var i = pos_begin; i < length; i++) {
			var line = lines[i];
			if (line.match(rgx_dealloc)) {
				pos_dealloc = i;
				break;
			}
		}

		if (pos_dealloc === -1) {
			return false;
		}

		for (var i = pos_dealloc; i > pos_begin; i--) {
			var line = lines[i];
			if (line.match(rgx_closeBracket)) {
				pos_end = i;
				if (line.replace('}', '').match(/[\S]/)) {
					bracket_found_with_string = true;
				}
				else {
					--pos_end;
				}
				break;
			}
		}

		return {
			pos_end: pos_end,
			bracket_found_with_string: bracket_found_with_string
		};
	}
})();

function handleAppDelegateFile(filePath) {
	CurRentappdElegAtefilePath = filePath;
	const content = stripComments(fs.readFileSync(filePath, 'utf8'));
	const lines = content.split(/\r?\n/);
	const pos_implementationBegins = findLineImplementation(lines);
	if (pos_implementationBegins === -1) {
		killDueToError('"@implementation SmartfaceAppDelegate" was not found');
	}
	return {
		imports: findImports(lines, pos_implementationBegins),
		funcs: findFuncCalls.run(lines, pos_implementationBegins)
	};
}

function findImports(lines, end) {
	var arr = [];
	for (var i = 0; i < end; i++) {
		var line = lines[i];
		if (line.match(/^\#import/)) {
			if (line.match(/^\#import[\s]{1,}\"SmartfaceAppDelegate\.h\"/)) {
				continue;
			}
			else if (line.match(/^\#import[\s]{1,}\<iOSPlayer\/inc\/ESpratIOSPlayer\.h\>/)) {
				continue;
			}
			arr.push(line);
		}
		else if (line.match(/^\#include/)) {
			arr.push(line);
		}
	}
	return arr;
}

function findLineImplementation(lines) {
	const length = lines.length;
	var pos = -1;
	const rgx_implementation = /^[\s]{0,}\@implementation[\s]{0,}SmartfaceAppDelegate/;
	for (var i = 0; i < length; i++) {
		var line = lines[i];
		if (line.match(rgx_implementation)) {
			pos = i;
			break;
		}
	}
	return pos;
}

function killDueToError(err) {
	//console.log("ERRRR");
	killProcess(error.getObject("plugin.parser", {
		err: {
			os: "iOS"
		},
		msg: {
			msg: err + " in " + CurRentappdElegAtefilePath
		}
	}));
}

function stripComments(content) {
	const rgxSingleLineComment = /(\/\*[\w\'\s\r\n\*]*\*\/)|(\/\/[\w\s\']*)|(\<![\-\-\s\w\>\/]*\>)/gm;
	const rgxMultiLineComment = /(\/\*([\s\S]*?)\*\/)|(\/\/(.*)$)/gm;
	return content.replace(rgxMultiLineComment, '').replace(rgxSingleLineComment, '');
}

function writeAllAppDelegateDiffs(appDelegateFilePath) {
	const plugins = globalData.get('iosConfig.plugins');
	const content = plugins.appDelegatePlayer;
	var lines = content.split(/\r?\n/);
	const pos_implementationBegins = findLineImplementation(lines);
	if (pos_implementationBegins === -1) {
		killDueToError('"@implementation SmartfaceAppDelegate" was not found');
	}
	lines[pos_implementationBegins] = plugins.appDelegateDiffs.imports.join('\n') + '\n' + lines[pos_implementationBegins];

	var pos_to_insert = findFuncCalls.findStart(lines, pos_implementationBegins) + 1;
	lines[pos_to_insert] = plugins.appDelegateDiffs.funcs.join('\n') + '\n' + lines[pos_to_insert];
	fs.writeFileSync(appDelegateFilePath, lines.join('\n'), 'utf8');
}

module.exports = {
	findFuncCalls: findFuncCalls,
	findLineImplementation: findLineImplementation,
	handleAppDelegateFile: handleAppDelegateFile,
	writeAllAppDelegateDiffs: writeAllAppDelegateDiffs
};
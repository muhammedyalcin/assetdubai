const uuidRegexp = /([A-Z|0-9]{24})/gm;

var FOURTH_TAB_INDENTATION = '\r\n\t\t\t\t';
var THIRD_TAB_INDENTATION = '\r\n\t\t\t';

const XCBuildConfigurationBegin = "/* Begin XCBuildConfiguration section */";
const XCBuildConfigurationEnd = "/* End XCBuildConfiguration section */";
const XCConfigurationListBegin = "/* Begin XCConfigurationList section */";

function configureBuildSettings(buildSettings, pbxprojStr) {
    var keys = Object.keys(buildSettings);
    if (keys.length === 0)
        return pbxprojStr;
    var uuidList = findConfigurationIDs(pbxprojStr);
    var beginIndex = pbxprojStr.indexOf(XCBuildConfigurationBegin) + XCBuildConfigurationBegin.length;
    var endIndex = pbxprojStr.indexOf(XCBuildConfigurationEnd);
    var XCBuildConfigurationStr = pbxprojStr.substring(beginIndex, endIndex);
    uuidList.forEach(uuid => {
        XCBuildConfigurationStr = setOldOrNewKeys(buildSettings, uuid, XCBuildConfigurationStr);
    });
    return spliceSlice(pbxprojStr,
        beginIndex,
        endIndex - beginIndex,
        XCBuildConfigurationStr
    );
}

function setOldOrNewKeys(buildSettings, uuid, XCBuildConfigurationStr) {
    var buildStr = "buildSettings = {";
    var beginIndex = XCBuildConfigurationStr.indexOf(uuid);
    beginIndex = XCBuildConfigurationStr.indexOf(buildStr, beginIndex) + buildStr.length;
    var endIndex = XCBuildConfigurationStr.indexOf("};", beginIndex);
    var keyStr = XCBuildConfigurationStr.substring(beginIndex, endIndex);
    var keyValueLines = keyStr.split("\n");
    var newSettingsObject = {},
        lastKey, temp, orderedKeys = [];
    keyValueLines.forEach(line => {
        temp = line.split(" = ");
        if (temp.length !== 2) {
            lastKey && line && (newSettingsObject[lastKey] += "\r\n" + line);
            return;
        }
        lastKey = temp[0].trim();
        orderedKeys.push(lastKey);
        newSettingsObject[lastKey] = temp[1];
    });
    var keys = Object.keys(buildSettings);
    keys.forEach(key => {
        (typeof newSettingsObject[key] === "undefined")  && (orderedKeys.push(key));
        newSettingsObject[key] = buildSettings[key] + ";";
    });
    return spliceSlice(XCBuildConfigurationStr,
        beginIndex,
        endIndex - beginIndex,
        FOURTH_TAB_INDENTATION +
        orderedKeys
        .map(key => key + " = " + newSettingsObject[key].trim())
        .join(FOURTH_TAB_INDENTATION) + THIRD_TAB_INDENTATION);
}

function findConfigurationIDs(pbxprojStr) {
    var uuidList = [];
    var pos = pbxprojStr.indexOf(XCConfigurationListBegin);
    pos = pbxprojStr.indexOf("/* Build configuration list for PBXProject", pos);
    var bracketPos = pbxprojStr.indexOf(");", pos);
    var PBXProjectsubstr = pbxprojStr.substring(pos, bracketPos);
    uuidList = findOneBuildConfigırationID(PBXProjectsubstr);
    pos = pbxprojStr.indexOf("/* Build configuration list for PBXNativeTarget", pos);
    bracketPos = pbxprojStr.indexOf(");", pos);
    PBXProjectsubstr = pbxprojStr.substring(pos, bracketPos);
    uuidList = uuidList.concat(findOneBuildConfigırationID(PBXProjectsubstr));
    return uuidList;
}

function findOneBuildConfigırationID(str) {
    uuidRegexp.lastIndex = 0;
    var res = [],
        tempRes = uuidRegexp.exec(str);
    while (tempRes && tempRes.length === 2) {
        res.push(tempRes[1]);
        tempRes = uuidRegexp.exec(str);
    }
    return res;
}

function spliceSlice(str, index, count, add) {
    return str.slice(0, index) + (add || "") + str.slice(index + count);
}

module.exports = configureBuildSettings;
/*
const fs = require("fs");

var pbxProj = fs.readFileSync("/home/ubuntu/workspace/pbx.proj", "utf8");

var pbxres = setBuildSettings({
    "TARGETED_DEVICE_FAMILY": "1",
    "IPHONEOS_DEPLOYMENT_TARGET": "9.0",
    "DOGAN_KEY": "\"ekici\""
}, pbxProj);

fs.writeFileSync("/home/ubuntu/workspace/pbxres.proj", pbxres, "utf8");
*/
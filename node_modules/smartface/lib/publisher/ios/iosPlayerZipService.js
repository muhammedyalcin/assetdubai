const pfs = require('./pfs');
const globalData = require('../../globalData');

const pbxProj = "Smartface.xcodeproj/project.pbxproj";
const appDelegate = "Smartface/SmartfaceAppDelegate.mm";

/**
 * handle read write file operations
 * @class PlayerZipService
 */
function PlayerZipService(iosPlayerZip, _contentZip, isCloudBuild) {

  const smartfacePlayerFolder = iosPlayerZip;
  const contentZip = _contentZip;
  const _readFile = pfs.readFileGenerator(smartfacePlayerFolder);
  const _writeFileSync = pfs.writeFileSyncGenerator(smartfacePlayerFolder,contentZip,isCloudBuild);

  /**
   * handle read write file operations
   * @method readFile
   * @memeberof PlayerZipService
   * @param {string} filepath
   * @param {string} encoding 
   * @return {Promise} proimes of the content.
   */

  this.readFile = function(filePath, encoding) {

      return _readFile(filePath, encoding);

    };
    /**
     * 
     * handle write sync file operations
     * @method writeFileSync
     * @memeberof PlayerZipService
     * @param {string} filename
     * @param {string|buffer} data 
     * @param {object} options
     * @param {number} mode
     * @return {string} content of the file.
     */

  this.writeFileSync = function(filename, data, options, mode) {

    return _writeFileSync(filename, data, options, mode);

  };

  /**
   * handle write file async operations
   * @method writeFile
   * @param {string} filename
   * @param {string|buffer} data 
   * @param {object} options
   * @param {number} mode
   * @memeberof PlayerZipService
   * @return {Promise} proimes of the result.
   */

  this.writeFile = function(filename, data, options, mode) {

    return new Promise(function(resolve, reject) {
      _writeFileSync(filename, data, options, mode);
      resolve(null);
    });

  };
  
  this.getPbxProject = function(){
    return _readFile(pbxProj,"utf8");
  };
  
   this.getAppDelegatemm = function(){
    return _readFile(appDelegate,"utf8");
  };

}

module.exports = PlayerZipService;
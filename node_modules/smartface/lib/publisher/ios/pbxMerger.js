function mergeProjects(pluginProject, playerProject) {
    // clear plugin project's conflicting items
    diffAndClearPBXAggregateTarget(pluginProject, playerProject);
    diffAndClearPBXBuildFile(pluginProject, playerProject);
    diffAndClearPBXContainerItemProxy(pluginProject, playerProject);
    diffAndClearPBXFileReference(pluginProject, playerProject);
    diffAndClearPBXFrameworksBuildPhase(pluginProject, playerProject);
    diffAndClearPBXGroup(pluginProject, playerProject);
    diffAndClearPBXNativeTarget(pluginProject, playerProject);
    diffAndClearPBXProject(pluginProject, playerProject);
    diffAndClearPBXResourcesBuildPhase(pluginProject, playerProject);
    diffAndClearPBXShellScriptBuildPhase(pluginProject, playerProject);
    diffAndClearPBXSourcesBuildPhase(pluginProject, playerProject);
    diffAndClearPBXTargetDependency(pluginProject, playerProject);
    diffAndClearPBXVariantGroup(pluginProject, playerProject);
    diffAndClearXCBuildConfiguration(pluginProject, playerProject);
    diffAndClearXCConfigurationList(pluginProject, playerProject);

    // merge remaining items to player project
    mergePBXAggregateTarget(pluginProject, playerProject);
    mergePBXBuildFile(pluginProject, playerProject);
    mergePBXContainerItemProxy(pluginProject, playerProject);
    mergePBXFileReference(pluginProject, playerProject);
    mergePBXFrameworksBuildPhase(pluginProject, playerProject);
    mergePBXGroup(pluginProject, playerProject);
    mergePBXNativeTarget(pluginProject, playerProject);
    mergePBXProject(pluginProject, playerProject);
    mergePBXResourcesBuildPhase(pluginProject, playerProject);
    mergePBXShellScriptBuildPhase(pluginProject, playerProject);
    mergePBXSourcesBuildPhase(pluginProject, playerProject);
    mergePBXTargetDependency(pluginProject, playerProject);
    mergePBXVariantGroup(pluginProject, playerProject);
    mergeXCBuildConfiguration(pluginProject, playerProject);
    mergeXCConfigurationList(pluginProject, playerProject);
}

function diffAndClearPBXAggregateTarget(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXAggregateTarget) {
        if (playerProject.objects.PBXAggregateTarget[key]) {
            delete pluginProject.objects.PBXAggregateTarget[key];
            continue;
        }
    }
}

function mergePBXAggregateTarget(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXAggregateTarget) {
        playerProject.objects.PBXAggregateTarget[key] = pluginProject.objects.PBXAggregateTarget[key];
    }
}

function diffAndClearPBXBuildFile(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXBuildFile) {
        if (playerProject.objects.PBXBuildFile[key]) {
            delete pluginProject.objects.PBXBuildFile[key];
            continue;
        }
    }
}

function mergePBXBuildFile(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXBuildFile) {
        playerProject.objects.PBXBuildFile[key] = pluginProject.objects.PBXBuildFile[key];
    }
}

function diffAndClearPBXContainerItemProxy(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXContainerItemProxy) {
        if (playerProject.objects.PBXContainerItemProxy[key]) {
            delete pluginProject.objects.PBXContainerItemProxy[key];
            continue;
        }
    }
}

function mergePBXContainerItemProxy(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXContainerItemProxy) {
        playerProject.objects.PBXContainerItemProxy[key] = pluginProject.objects.PBXContainerItemProxy[key];
    }    
}

function diffAndClearPBXFileReference(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXFileReference) {
        if (playerProject.objects.PBXFileReference[key]) {
            delete pluginProject.objects.PBXFileReference[key];
            continue;
        }
    }
}

function mergePBXFileReference(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXFileReference)  {
        playerProject.objects.PBXFileReference[key] = pluginProject.objects.PBXFileReference[key];
    }
}

function diffAndClearPBXFrameworksBuildPhase(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXFrameworksBuildPhase) {
        if(playerProject.objects.PBXFrameworksBuildPhase[key] && playerProject.objects.PBXFrameworksBuildPhase[key].files) {
            for (var i = 0; i < pluginProject.objects.PBXFrameworksBuildPhase[key].files.length; i++) {
                for (var j = 0; j < playerProject.objects.PBXFrameworksBuildPhase[key].files.length; j++) {
                    var playerValue = playerProject.objects.PBXFrameworksBuildPhase[key].files[j].value;
                    var pluginValue = pluginProject.objects.PBXFrameworksBuildPhase[key].files[i].value;
                    if (pluginValue === playerValue) {
                        pluginProject.objects.PBXFrameworksBuildPhase[key].files.splice(i--, 1);
                        break;
                    } // end if (pluginValue === playerValue)
                } // end for (var j = 0; j < playerProject.objects.PBXFrameworksBuildPhase[key].files.length; j++)
            } // end for (var i = 0; i < pluginProject.objects.PBXFrameworksBuildPhase[key].files.length; i++)  
        } // end if(playerProject.objects.PBXFrameworksBuildPhase[key])
    }// end for (var key in pluginProject.objects.PBXFrameworksBuildPhase)
}

function mergePBXFrameworksBuildPhase(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXFrameworksBuildPhase) {
        if(playerProject.objects.PBXFrameworksBuildPhase[key] && playerProject.objects.PBXFrameworksBuildPhase[key].files) {
            for (var i = 0; i < pluginProject.objects.PBXFrameworksBuildPhase[key].files.length; i++) {
                playerProject.objects.PBXFrameworksBuildPhase[key].files.push(pluginProject.objects.PBXFrameworksBuildPhase[key].files[i]); 
            }   
        } else {
            playerProject.objects.PBXFrameworksBuildPhase[key] = pluginProject.objects.PBXFrameworksBuildPhase[key];
        }
    }
}

function diffAndClearPBXGroup(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXGroup) {
        if (playerProject.objects.PBXGroup[key] && playerProject.objects.PBXGroup[key].children) {
            for (var i = 0; i < pluginProject.objects.PBXGroup[key].children.length; i++) {
                for (var j = 0; j < playerProject.objects.PBXGroup[key].children.length; j++) {
                    var pluginValue = pluginProject.objects.PBXGroup[key].children[i].value;
                    var playerValue = playerProject.objects.PBXGroup[key].children[j].value;
                    if (pluginValue === playerValue) {
                        pluginProject.objects.PBXGroup[key].children.splice(i--, 1);
                        break;
                    }
                }
            }
        }
    }
}

function mergePBXGroup(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXGroup) {
        if (playerProject.objects.PBXGroup[key] && playerProject.objects.PBXGroup[key].children) {
            for (var i = 0; i < pluginProject.objects.PBXGroup[key].children.length; i++) {
                playerProject.objects.PBXGroup[key].children.push(pluginProject.objects.PBXGroup[key].children[i]);
            }
        } else {
            playerProject.objects.PBXGroup[key] = pluginProject.objects.PBXGroup[key];   
        }
    }    
}

function diffAndClearPBXNativeTarget(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXNativeTarget) {
        if (playerProject.objects.PBXNativeTarget[key] && playerProject.objects.PBXNativeTarget[key].buildPhases) {
            for (var i = 0; i < pluginProject.objects.PBXNativeTarget[key].buildPhases.length; i++) {
                for (var j = 0; j < playerProject.objects.PBXNativeTarget[key].buildPhases.length; j++) {
                    var pluginValue = pluginProject.objects.PBXNativeTarget[key].buildPhases[i].value;
                    var playerValue = playerProject.objects.PBXNativeTarget[key].buildPhases[j].value;
                    if (pluginValue === playerValue) {
                        pluginProject.objects.PBXNativeTarget[key].buildPhases.splice(i--, 1);
                        break;
                    }
                }
            }
        }

        if (playerProject.objects.PBXNativeTarget[key] && playerProject.objects.PBXNativeTarget[key].buildRules) {
            for (var i = 0; i < pluginProject.objects.PBXNativeTarget[key].buildRules.length; i++) {
                for (var j = 0; j < playerProject.objects.PBXNativeTarget[key].buildRules.length; j++) {
                    var pluginValue = pluginProject.objects.PBXNativeTarget[key].buildRules[i].value;
                    var playerValue = playerProject.objects.PBXNativeTarget[key].buildRules[j].value;
                    if (pluginValue === playerValue) {
                        pluginProject.objects.PBXNativeTarget[key].buildRules.splice(i--, 1);
                        break;
                    }
                }
            }
        }

        if (playerProject.objects.PBXNativeTarget[key] && playerProject.objects.PBXNativeTarget[key].dependencies) {
            for (var i = 0; i < pluginProject.objects.PBXNativeTarget[key].dependencies.length; i++) {
                for (var j = 0; j < playerProject.objects.PBXNativeTarget[key].dependencies.length; j++) {
                    var pluginValue = pluginProject.objects.PBXNativeTarget[key].dependencies[i].value;
                    var playerValue = playerProject.objects.PBXNativeTarget[key].dependencies[j].value;
                    if (pluginValue === playerValue) {
                        pluginProject.objects.PBXNativeTarget[key].dependencies.splice(i--, 1);
                        break;
                    }
                }
            }
        }
    }
}

function mergePBXNativeTarget(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXNativeTarget) {
        if (!playerProject.objects.PBXNativeTarget[key]) {
            playerProject.objects.PBXNativeTarget[key] = pluginProject.objects.PBXNativeTarget[key]; 
            continue;  
        }

        if (playerProject.objects.PBXNativeTarget[key].buildPhases) {
            for (var i = 0; i < pluginProject.objects.PBXNativeTarget[key].buildPhases.length; i++) {
                playerProject.objects.PBXNativeTarget[key].buildPhases.push(pluginProject.objects.PBXNativeTarget[key].buildPhases[i]);
            }
        }

        if (playerProject.objects.PBXNativeTarget[key].buildRules) {
            for (var i = 0; i < pluginProject.objects.PBXNativeTarget[key].buildRules.length; i++) {
                playerProject.objects.PBXNativeTarget[key].buildRules.push(pluginProject.objects.PBXNativeTarget[key].buildRules[i]);
            }
        }

        if (playerProject.objects.PBXNativeTarget[key].dependencies) {
            for (var i = 0; i < pluginProject.objects.PBXNativeTarget[key].dependencies.length; i++) {
                playerProject.objects.PBXNativeTarget[key].dependencies.push(pluginProject.objects.PBXNativeTarget[key].dependencies[i]);
            }
        }
    } 
}

function diffAndClearPBXProject(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXProject) {
        if (playerProject.objects.PBXProject[key]) {
            delete pluginProject.objects.PBXProject[key];
            continue;
        }
    }
}

function mergePBXProject(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXProject) {
        playerProject.objects.PBXProject[key] = pluginProject.objects.PBXProject[key];
    }
}

function diffAndClearPBXResourcesBuildPhase(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXResourcesBuildPhase) {
        if(playerProject.objects.PBXResourcesBuildPhase[key] && playerProject.objects.PBXResourcesBuildPhase[key].files) {
            for (var i = 0; i < pluginProject.objects.PBXResourcesBuildPhase[key].files.length; i++) {
                for (var j = 0; j < playerProject.objects.PBXResourcesBuildPhase[key].files.length; j++) {
                    var playerValue = playerProject.objects.PBXResourcesBuildPhase[key].files[j].value;
                    var pluginValue = pluginProject.objects.PBXResourcesBuildPhase[key].files[i].value;
                    if (pluginValue === playerValue) {
                        pluginProject.objects.PBXResourcesBuildPhase[key].files.splice(i--, 1);
                        break;
                    } // end if (pluginValue === playerValue)
                } // end for (var j = 0; j < playerProject.objects.PBXResourcesBuildPhase[key].files.length; j++)
            } // end for (var i = 0; i < pluginProject.objects.PBXResourcesBuildPhase[key].files.length; i++)  
        } // end if(playerProject.objects.PBXResourcesBuildPhase[key])
    }// end for (var key in pluginProject.objects.PBXResourcesBuildPhase)
}

function mergePBXResourcesBuildPhase(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXResourcesBuildPhase) {
        if(playerProject.objects.PBXResourcesBuildPhase[key] && playerProject.objects.PBXResourcesBuildPhase[key].files) {
            for (var i = 0; i < pluginProject.objects.PBXResourcesBuildPhase[key].files.length; i++) {
                playerProject.objects.PBXResourcesBuildPhase[key].files.push(pluginProject.objects.PBXResourcesBuildPhase[key].files[i]);
            }
        } else {
            playerProject.objects.PBXResourcesBuildPhase[key] = pluginProject.objects.PBXResourcesBuildPhase[key];    
        }
    }
}

function diffAndClearPBXShellScriptBuildPhase(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXShellScriptBuildPhase) {
        if (playerProject.objects.PBXShellScriptBuildPhase[key]) {
            delete pluginProject.objects.PBXShellScriptBuildPhase[key];
            continue;
        }
    }
}

function mergePBXShellScriptBuildPhase(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXShellScriptBuildPhase) {
        playerProject.objects.PBXShellScriptBuildPhase[key] = pluginProject.objects.PBXShellScriptBuildPhase[key];
    }
}

function diffAndClearPBXSourcesBuildPhase(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXSourcesBuildPhase) {
        if (playerProject.objects.PBXSourcesBuildPhase[key] && playerProject.objects.PBXSourcesBuildPhase[key].files) {
            for (var i = 0; i < pluginProject.objects.PBXSourcesBuildPhase[key].files.length; i++) {
                for (var j = 0; j < playerProject.objects.PBXSourcesBuildPhase[key].files.length; j++) {
                    var playerValue = playerProject.objects.PBXSourcesBuildPhase[key].files[j].value;
                    var pluginValue = pluginProject.objects.PBXSourcesBuildPhase[key].files[i].value;
                    if (pluginValue === playerValue) {
                        pluginProject.objects.PBXSourcesBuildPhase[key].files.splice(i--, 1);
                        break;
                    } // end if (pluginValue === playerValue)
                } // end for (var j = 0; j < playerProject.objects.PBXSourcesBuildPhase[key].files.length; j++)
            } // end for (var i = 0; i < pluginProject.objects.PBXSourcesBuildPhase[key].files.length; i++)  
        } // end if(playerProject.objects.PBXSourcesBuildPhase[key])
    }// end for (var key in pluginProject.objects.PBXSourcesBuildPhase)
}

function mergePBXSourcesBuildPhase(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXSourcesBuildPhase) {
        if (playerProject.objects.PBXSourcesBuildPhase[key] && playerProject.objects.PBXSourcesBuildPhase[key].files) {
            for (var i = 0; i < pluginProject.objects.PBXSourcesBuildPhase[key].files.length; i++) {
                playerProject.objects.PBXSourcesBuildPhase[key].files.push(pluginProject.objects.PBXSourcesBuildPhase[key].files[i]);
            }
        } else {
            playerProject.objects.PBXSourcesBuildPhase[key] = pluginProject.objects.PBXSourcesBuildPhase[key];
        }
    }
}

function diffAndClearPBXTargetDependency(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXTargetDependency) {
        if (playerProject.objects.PBXTargetDependency[key]) {
            delete pluginProject.objects.PBXTargetDependency[key];
            continue;
        }
    }
}

function mergePBXTargetDependency(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXTargetDependency) {
        playerProject.objects.PBXTargetDependency[key] = pluginProject.objects.PBXTargetDependency[key];
    }
}

function diffAndClearPBXVariantGroup(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXVariantGroup) {
        if(playerProject.objects.PBXVariantGroup[key] && playerProject.objects.PBXVariantGroup[key].children) {
            for (var i = 0; i < pluginProject.objects.PBXVariantGroup[key].children.length; i++) {
                for (var j = 0; j < playerProject.objects.PBXVariantGroup[key].children.length; j++) {
                    var playerValue = playerProject.objects.PBXVariantGroup[key].children[j].value;
                    var pluginValue = pluginProject.objects.PBXVariantGroup[key].children[i].value;
                    if (pluginValue === playerValue) {
                        pluginProject.objects.PBXVariantGroup[key].children.splice(i--, 1);
                        break;
                    } // end if (pluginValue === playerValue)
                } // end for (var j = 0; j < playerProject.objects.PBXVariantGroup[key].children.length; j++)
            } // end for (var i = 0; i < pluginProject.objects.PBXVariantGroup[key].children.length; i++)  
        } // end if(playerProject.objects.PBXVariantGroup[key])
    }// end for (var key in pluginProject.objects.PBXVariantGroup)
}

function mergePBXVariantGroup(pluginProject, playerProject) {
    for (var key in pluginProject.objects.PBXVariantGroup) {
        if (playerProject.objects.PBXVariantGroup[key] && playerProject.objects.PBXVariantGroup[key].children) {
            for (var i = 0; i < pluginProject.objects.PBXVariantGroup[key].children.length; i++) {
                playerProject.objects.PBXVariantGroup[key].children.push(pluginProject.objects.PBXVariantGroup[key].children[i]);
            }
        } else {
            playerProject.objects.PBXVariantGroup[key] = pluginProject.objects.PBXVariantGroup[key]; 
        }
    }
}

function diffAndClearXCBuildConfiguration(pluginProject, playerProject) {
    for (var key in pluginProject.objects.XCBuildConfiguration) {
        if (playerProject.objects.XCBuildConfiguration[key]) {
            delete pluginProject.objects.XCBuildConfiguration[key];
            continue;
        }
    }
}

function mergeXCBuildConfiguration(pluginProject, playerProject) {
    for (var key in pluginProject.objects.XCBuildConfiguration) {
        playerProject.objects.XCBuildConfiguration[key] = pluginProject.objects.XCBuildConfiguration[key];
    }
}

function diffAndClearXCConfigurationList(pluginProject, playerProject) {
    for (var key in pluginProject.objects.XCConfigurationList) {
        if (playerProject.objects.XCConfigurationList[key]) {
            delete pluginProject.objects.XCConfigurationList[key];
            continue;
        }
    }
}

function mergeXCConfigurationList(pluginProject, playerProject) {
    for (var key in pluginProject.objects.XCConfigurationList) {
        playerProject.objects.XCConfigurationList[key] = pluginProject.objects.XCConfigurationList[key];
    }
}


module.exports = {
    mergeProjects: mergeProjects
};
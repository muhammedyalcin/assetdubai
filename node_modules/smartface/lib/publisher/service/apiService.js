const https = require("https");
const http = require("http");

const utility = require('../../utility');
const createDummyPromise = utility.createDummyPromise;
const error = require("../../error");
const globalData = require('../../globalData');
const SERVER_CONFIG = require("../../configuration").SERVER;

const OK = 200;
const pathRevision = "/api/v1/rau/keys/{key}/versions/{version}/revisions";

// detecting errors for response status code
function getErrObjectIfCodeIsNotOK(res, errDotObj, msg) {
  var err;
  var code = res.statusCode;
  if (code !== OK) {
    if (code >= 500) {
      err = Object.assign(error.getObject("unexpectedServer", {
        msg: {
          "statusCode": res.statusCode,
          "statusMessage": res.statusMessage
        }
      }), {
        detail: parseJSONForMessage(msg)
      });
    }
    else {
      err = error.getObject(errDotObj, {
        msg: {
          "statusCode": res.statusCode,
          "statusMessage": res.statusMessage
        },
        helpForUser: {
          msg: parseJSONForMessage(msg)
        }
      });
    }
  }
  return err;
}

function parseJSONForMessage(msg) {
  var res;
  try {
    var parsedObj = JSON.parse(msg);
    res = parsedObj.Message || parsedObj.message;
  }
  catch (e) {}!res && (res = msg);
  return res;
}
//private
// helper get.
function httpsReq(options) {
  var result = {};
  return new Promise((resolve, reject) => {
    https.get(options, (res) => {
      // consume response body
      res.resume();
      var str = '';
      var json;
      res.on('data', function(chunk) {
        str += chunk;
      });
      res.on('end', function() {
        try {
          json = JSON.parse(str);
        }
        catch (e) {}
        json && (json.Message || json.message) && (str = json.Message || json.message);
        result.msg = str;
        result.json = json;
        result.res = res;
        result.statusCode = res.statusCode;
        result.statusMessage = res.statusMessage;
        resolve(result);
      });
    }).on('error', (e) => {
      reject(error.getObject("connection", {
        msg: {
          "msg": e.message
        }
      })); // connection error.
    });
  });
}

function isAuthTestDist(publishConfig) {
  if (!publishConfig.sendToTest) {
    return createDummyPromise();
  }
  var options = {
    hostname: SERVER_CONFIG.enterpriseapi,
    path: '/api/v2/testdistributions/check/' + publishConfig.outputNumToTestDist,
    method: 'GET',
    headers: {
      Authorization: publishConfig.IDE_TOKEN
    }
  };
  utility.writeJsonMsgToStdout('Authenticating...');
  return httpsReq(options).then(res => {
    if (res.statusCode !== OK) {
      throw getErrObjectIfCodeIsNotOK(res, "test.check", res.msg);
    }
    return res.statusCode;
  }, err => {
    throw err;
  });
}
// request to IDe for token.
function receiveTokenFromIDE(publishConfig) {
  if (!checkIfNeedToken()) {
    return createDummyPromise();
  }
  return new Promise((resolve, reject) => {
    http.get("http://localhost:8081/token/" + publishConfig.clisecret, function(response) {
      response.resume();
      var strRes = '';
      response.on('data', function(chunk) {
        strRes += chunk;
      });
      response.on('end', function(e) {
        var err = getErrObjectIfCodeIsNotOK(response, "rau.ideToken", strRes);
        if (err) {
          return reject(err);
        }
        publishConfig.IDE_TOKEN = strRes;
        resolve(strRes);
      });
    }).on('error', (e) => {
      reject(error.getObject("connection", {
        msg: {
          "msg": e.message + " -> Token Error !"
        }
      }));
    });
  });

  function checkIfNeedToken() {
    return (!publishConfig.IDE_TOKEN && (publishConfig.sendToTest || publishConfig.sendToStore ||
      !publishConfig.justPublish || publishConfig.isCloudBuildiOS ||
      publishConfig.isCloudBuildAndroid));
  }
}
// get revision number from server.
function receiveRevisionNum(publishConfig) {
  if (publishConfig.justPublish) { // if need revision num ?
    return createDummyPromise();
  }
  var configRAU = publishConfig.configRAU;
  const changerObj = {
    "{key}": configRAU.profileKey,
    "{version}": globalData.get("processedArgs.config_json.info.version")
  };

  var pathRev = pathRevision.replace(/{key}|{version}/gm, function(match) {
    return changerObj[match];
  });
  var options = {
    hostname: SERVER_CONFIG.portalapi,
    path: pathRev,
    method: 'GET',
    port: 443,
    headers: {
      Authorization: publishConfig.IDE_TOKEN
    }
  };
  return httpsReq(options).then(res => {
    if (res.statusCode !== OK) {
      throw getErrObjectIfCodeIsNotOK(res, "rau.server.revision", res.msg);
    }
    configRAU.revision = Number(res.json);
    utility.writeJsonMsgToStdout('Retrieved revision number : ' + res.json);
    return configRAU.revision;
  }, err => {
    throw err;
  });
}

function checkEnterpriseAppStore(publishConfig) {
  if (!publishConfig.sendToStore) { // if need revision num ?
    return createDummyPromise();
  }
  var options = {
    hostname: SERVER_CONFIG.enterpriseapi,
    path: "/api/v2/appstore/rights",
    method: 'GET',
    port: 443,
    headers: {
      Authorization: publishConfig.IDE_TOKEN
    }
  };
  utility.writeJsonMsgToStdout('Authenticating...');
  return httpsReq(options).then(res => {
    if (res.statusCode !== OK) {
      throw getErrObjectIfCodeIsNotOK(res, "enterprise.check", res.msg);
    }
    return null;
  }, err => {
    throw err;
  });
}

function checkRauUploadResult(publishConfig, jobID) {
  var options = {
    hostname: SERVER_CONFIG.portalapi,
    path: '/queued?JobId=' + jobID,
    method: 'GET',
    headers: {
      Authorization: publishConfig.IDE_TOKEN,
    }
  };
  return httpsReq(options).then(res => {
    return res;
  }, err => {
    throw err;
  });
}

module.exports = {
  isAuthTestDist: isAuthTestDist,
  receiveTokenFromIDE: receiveTokenFromIDE,
  receiveRevisionNum: receiveRevisionNum,
  checkEnterpriseAppStore: checkEnterpriseAppStore,
  checkRauUploadResult:checkRauUploadResult
};

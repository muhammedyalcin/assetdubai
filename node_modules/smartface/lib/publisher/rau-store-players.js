const path = require("path");

const fs = require("fs-extra");

const utility = require("../utility");
const globalData = require("../globalData");

//get specified player in the project.json
function getSpecifiedPlayerPath(projectJSON, os) {
    var res = projectJSON.build.input[os.toLowerCase()].playerPath;
    return res;
}

function getPlayerFolder(os) {
    var playerFolder;
    if (os === "Android") {
        playerFolder = globalData.get("androidConfig.user.project.root");
    }
    else {
        playerFolder = globalData.get("iosConfig.user.project.root");
    }
    playerFolder = path.join(playerFolder, "output", "players", os);
    return playerFolder;
}

function getOsOutputFolder(os) {
    var outputFolder;
    if (os === "Android") {
        outputFolder = globalData.get("androidConfig.androidConfig.output.outputApk");
    }
    else {
        outputFolder = globalData.get("iosConfig.iosConfig.output.outputZip");
    }
    return path.dirname(outputFolder);
}

function getSourcePlayerPath(os) {
    var sourcePlayer;
    if (os === "Android") {
        sourcePlayer = globalData.get("androidConfig.androidConfig.input.inputApk");
    }
    else {
        sourcePlayer = globalData.get("iosConfig.iosConfig.input.playerZip");
    }
    return sourcePlayer;
}

function createRAU_NotesMD(os, version, revision, playerPath) {
    var str = "Your Remote App Update publish " + version + "#" + revision +
        " has been successfully generated. Runtime files (Smartface players) used to " +
        "generate this package has been archived under ~/" + path.relative("/home/ubuntu/", playerPath) +
        "\n\nPlease retain these files to ensure binary compatibility with your future Remote App Update publishes." +
        "\n\nPlease note that the current runtime files (players) will not be necessarily compatible with the updated versions of IDE, CLI and emulators, if there are\nsignificant changes in the framework. In such cases, it is recommended use the most recent versions of all framework components and provide a binary\nupdate to the users.";
    var filePath = path.join(getOsOutputFolder(os), "rau-notes.md");
    return new Promise((resolve, reject) => {
        fs.writeFile(filePath, str, "utf8", (err) => {
            if (err) {
                return reject(err);
            }
            resolve(null);
        });
    });
}

function storePlayer(os, projectJSON) {
    var specPlayerPath = getSpecifiedPlayerPath(projectJSON, os);
    return new Promise((resolve, reject) => {
        if (specPlayerPath && (typeof specPlayerPath === "string")) {
            return resolve(null);
        }
        var playerPath = getPlayerFolder(os);
        var sourcePlayerPath = getSourcePlayerPath(os);
        playerPath = path.join(playerPath, path.basename(sourcePlayerPath));
        fs.stat(playerPath, (err, stats) => {
            if (err) {
                if (err.code !== "ENOENT") {
                    return reject(err);
                }
                utility.mkdirpSync(path.dirname(playerPath));
                fs.copy(sourcePlayerPath, playerPath, (err) => {
                    if (err) {
                        return reject(err);
                    }
                    resolve(playerPath);
                });
            }
            else {
                resolve(playerPath);
            }
        });
    });
}

module.exports = {
    storePlayer: storePlayer,
    createRAU_NotesMD: createRAU_NotesMD
};

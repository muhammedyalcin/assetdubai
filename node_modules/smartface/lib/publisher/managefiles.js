const path = require("path");
const fs = require("fs");

const _ = require("lodash");
const forge = require("node-forge");
const fse = require("fs-extra");


//md5 file content as buffer
function md5File(_filePath, callback) {
    var md = forge.md.md5.create();
    var resPromise, resolver, rejecter;
    if (!callback) {
        resPromise = new Promise((resolve, reject) => {
            resolver = resolve;
            rejecter = reject;
        });
    }
    var rdStream = fs.createReadStream(_filePath, {
        encoding: "binary"
    });
    rdStream.on("data", (data) => {
        md.update(data);
    });
    rdStream.on("end", (data) => {
        data && md.update(data);
        var res = md.digest().toHex();
        if (resPromise) {
            resolver(res);
        }
        else {
            callback(null, res);
        }
    });
    return resPromise;
}


// md5 file conten as buffer sync version of above function.
function md5FileSync(_filePath) {
    var md = forge.md.md5.create();
    var data = fs.readFileSync(_filePath, "binary");
    md.update(data);
    return md.digest().toHex();
}

// md5 str or buffer.
function md5Str(str) {
    var md = forge.md.md5.create();
    md.update(str);
    return md.digest().toHex();
}

// basic file object.
function File(_path) {

    var obj = {
        name: "", // file path 
        dirname: "", // parent dir path
        hash: "", // file md5
        schema: null, // schema example image, script, asset
        modified: false
    };

    this.set = function(_key, val) {

        if (obj.hasOwnProperty(_key)) {
            obj[_key] = val;
        }
        else {
            console.log("WARN: invalid property for file object --> " + _key);
        }
    };

    this.get = function(_key) {
        return obj[_key];
    };

    this.getPath = function() {
        return path.join(obj.dirname, obj.name);
    };

    if (_path) {
        obj.name = path.basename(_path);
        obj.dirname = path.dirname(_path);
    }

    this.toString = function() {
        var str = "File:name: " + obj.name + "\n";
        str += "    :dir : " + obj.dirname + "\n";
        str += "    :hash: " + obj.hash + "\n";
        str += "    :modi: " + obj.modified;
        return str;
    };
}
//Managefile in same projects 
function ManageFile() {

    var OBJ = {
        files: {}
    };

    // add file in data.files and copy source to filepath.
    function addFile(_filepath, sourcepath, callback) {
        var file = new File(_filepath);
        fse.copy(sourcepath, _filepath, function(err) {
            if (err) {
                callback(err);
            }
            else {
                md5File(_filepath, function(err, data) {
                    if (err) {
                        callback(err);
                    }
                    else {
                        file.set("hash", data);
                        file.set("modified", true);
                        OBJ.files[_filepath] = file;
                        callback(null, file);
                    }
                });
            }
        });
    }

    function addFileSync(_filepath, sourcepath) {
        var file = new File(_filepath);
        //console.log("ADDFILESYNC: " + _filepath + "  " + sourcepath);
        fse.copySync(sourcepath, _filepath);
        file.set("hash", md5FileSync(_filepath));
        file.set("modified", true);
        OBJ.files[_filepath] = file;
        return file;
    }

    // add file n OBJ.files witout copy .
    function addFileWithoutCopy(_filepath, callBack) {
        var file = new File(_filepath);
        md5File(_filepath, function(err, data) {
            if (err) {
                callBack(err);
            }
            else {
                file.set("hash", data);
                file.set("modified", true);
                OBJ.files[_filepath] = file;
                callBack(null, file);
            }
        });
    }

    function addFileWithoutCopySync(_filepath) {
        var file = new File(_filepath);
        file.set("hash", md5FileSync(_filepath));
        file.set("modified", true);
        OBJ.files[_filepath] = file;
        return file;
    }

    function isIn(_filepath) {
        var res = OBJ.files[_filepath];

        return res ? res : null;
    }

    function hasSameHash(_filepath, callback) {
        md5File(_filepath, function(err, data) {
            if (err) {
                callback(err);
            }
            else {
                var res = null;
                var item = OBJ.files[_filepath];
                if (item && (item.get("hash") === data)) {
                    res = item;
                }
                callback(null, res);
            }
        });
    }

    function hasSameHashSync(_filepath) {
        var res = null;
        var data = md5FileSync(_filepath);
        var item = OBJ.files[_filepath];
        if (item && (item.get("hash") === data)) {
            res = item;
        }
        return res;
    }

    // update current file or add file.
    function update(_filepath, sourcepath, callback) {
        var file = isIn(_filepath);
        if (file) {
            md5File(sourcepath, function(err, data) {
                if (err) {
                    callback(err);
                }
                else {
                    file.set("modified", true);
                    if (data !== file.get("hash")) {
                        fse.copy(sourcepath, _filepath, function(err) {
                            if (err) {
                                callback(err);
                            }
                            else {
                                callback(null, null);
                            }
                        });
                    }
                    else {
                        callback(null, null);
                    }
                }
            });
        }
        else {
            addFile(_filepath, sourcepath, callback);
        }
    }

    function updateSync(_filepath, sourcepath) {
        var file = isIn(_filepath);
        if (file) {
            var data = md5FileSync(sourcepath);
            file.set("modified", true);
            if (data !== file.get("hash")) {
                fse.copySync(sourcepath, _filepath);
            }
        }
        else {
            return addFileSync(_filepath, sourcepath);
        }
        return null;
    }

    //update does not compare hash values.
    function updateWithoutHash(_filepath, sourcepath, callback) {
        var file = isIn(_filepath);
        if (file === null) {
            return addFile(_filepath, sourcepath, callback);
        }
        file.set("modified", true);
        return callback(null);
    }

    function updateWithoutHashSync(_filepath, sourcepath) {
        var file = isIn(_filepath);
        if (file === null) {
            return addFileSync(_filepath, sourcepath);
        }
        file.set("modified", true);
        return null;
    }
    // delete file in data.files and remove filepath.
    function remove(_filepath, callback) {

        var removal = OBJ.files[_filepath];
        removal && ( delete OBJ.files[_filepath]);
        fse.remove(_filepath, function(err) {
            if (err) {
                callback(err);
            }
            else {
                callback(null, removal);
            }
        });
    }

    function removeSync(_filepath) {
        var removal = OBJ.files[_filepath];
        removal && ( delete OBJ.files[_filepath]);
        fse.removeSync(_filepath);
        return removal;
    }

    function getFiles() {
        return OBJ.files;
    }

    // delete unmodified files  and set modified:false if modified 
    function clear(callback) {
        var len,
            i = 0,
            willBeDeleted = [];
        Object.keys(OBJ.files).forEach(function(key) {
            var item = OBJ.files[key];
            if (item.get("modified")) {
                item.set("modified", false);
            }
            else {
                willBeDeleted.push(item);
            }
        });

        len = willBeDeleted.length;
        willBeDeleted.forEach(function(item) {
            remove(item.getPath(), function(err) {
                detectCB(err);
            });
        });
        detectCB();

        function detectCB(err) {

            if (err) {
                return callback(err);
            }
            if (len == i++) {
                callback(null);
            }
        }
    }

    function clearSync() {
        var willBeDeleted = [];
        Object.keys(OBJ.files).forEach(function(key) {
            var item = OBJ.files[key];
            if (item.get("modified")) {
                item.set("modified", false);
            }
            else {
                willBeDeleted.push(item);
            }
        });
        _.each(willBeDeleted, function(item) {
            //console.log("REMOVE: " + item.getPath());
            removeSync(item.getPath());
        });
    }


    this.addFile = addFile;
    this.addFileSync = addFileSync;
    this.addFileWithoutCopy = addFileWithoutCopy;
    this.addFileWithoutCopySync = addFileWithoutCopySync;

    this.isIn = isIn;
    this.hasSameHash = hasSameHash;
    this.hasSameHashSync = hasSameHashSync;

    this.update = update;
    this.updateSync = updateSync;
    this.updateWithoutHash = updateWithoutHash;
    this.updateWithoutHashSync = updateWithoutHashSync;

    this.remove = remove;
    this.removeSync = removeSync;

    this.clear = clear;
    this.clearSync = clearSync;

    this.getFiles = getFiles;
}

exports.FileManager = ManageFile;
exports.File = File;
exports.md5 = {
    file: md5File,
    fileSync: md5FileSync,
    bufOrStr: md5Str
};

/*
// Developer test
var mf = new ManageFile();
var source = "/home/ubuntu/workspace/smfc/test-files/input/data2.sfd";
var file = "/home/ubuntu/workspace/TEST/a.sfd";
mf.addFile(file, source, function(err, data) {
    if (err) {
        console.log(err + ":");
    }
    console.log("isin: " + mf.isIn(file));
    mf.hasSameHash(file, function(err, res) {
        if (res) {
            console.log("it has Same hash " + res);
            mf.remove(file, function(err, removal) {
                console.dir(err + removal);
            })
        }
    });
});
*/

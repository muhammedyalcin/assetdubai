const os = require('os');
const child_process = require('child_process');
const path = require('path');
const fs = require('fs');
const globalData = require('../../globalData');
var LOG_TO_CONSOLE = false;

function handleAutoPlay(callback){
	const downloadFilePath = globalData.get('androidConfig.androidConfig.output.outputApk');
	LOG_TO_CONSOLE && console.log('Trying to determine if apk file can be installed: ' + downloadFilePath);
	const platform = os.platform();
	const platform_specific = {
		win32: {
			which: 'where',
			adb: 'adb.exe'
		},
		darwin: {
			which: 'which',
			adb: 'adb'
		},
		linux: {
			which: 'which',
			adb: 'adb'
		}
	};

	if(['darwin', 'linux', 'win32'].indexOf(platform) === -1){
		return callback();
	}
	const isWindows = (platform === 'win32') ? true : false;
	const which = platform_specific[platform].which;
	const adb = platform_specific[platform].adb;

	child_process.exec(which + ' ' + adb, function (error, stdout, stderr) {
		if(error || stderr) {
			return callback('Sorry, there was an error.', error, stderr);
		} else {
			var isAdbFound = false;
			if(isWindows) {
				if(stdout.search(adb) > -1) {
					isAdbFound = true;
				}
			} else if(stdout !== '') {
				isAdbFound = true;
			}
			if(!isAdbFound) {
				return callback('adb was not found on your system.');
			}
			child_process.exec('adb devices', function (error, stdout, stderr) {
				LOG_TO_CONSOLE && console.log('Started checking for devices');
				if(error || stderr) {
					return callback('Sorry, there was an error.', error, stderr);
				} else {
					LOG_TO_CONSOLE && console.log('stdout:', stdout);
					var res_str = stdout.replace(/\*/gm, '').trim();
					var search_text = 'daemon started successfully';
					var pos = stdout.search(search_text);
					if(pos > -1) {
						res_str = res_str.substr(pos + search_text.length).trim();
					}
					search_text = 'List of devices attached';
					var pos = res_str.search(search_text);
					if(pos > -1) {
						res_str = res_str.substr(pos + search_text.length).trim();
					}
					LOG_TO_CONSOLE && console.log('res_str is ', res_str);
					if(res_str === ''){
						return callback('No devices are attached and an emulator is not running, apk cannot be installed.');
					}

					LOG_TO_CONSOLE && console.log('Started installing your application');
					const proc = child_process.spawn('adb', ['install', '-r', downloadFilePath]);
					proc.stdout.on('data', function (data) {
					  LOG_TO_CONSOLE && console.log(data);
					});

					proc.stderr.on('data', function (data) {
						//these may not be errors, installation info can be received here
					  LOG_TO_CONSOLE && console.log(data);
					});

					proc.on('close', function (code) {
						const packageName = globalData.get('androidConfig.androidConfig.input.license.bundle');
						child_process.exec('adb shell am start -n ' + packageName + '/.A', function (error, stdout, stderr) {
							callback(null);
						});
					});
				}
			});
		}
	});
}

module.exports = {
	handleAutoPlay: handleAutoPlay
};
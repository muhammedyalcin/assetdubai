const path = require("path");

const _cloneDeep = require("lodash").cloneDeep;
const utility = require('../../utility');
const Zipper = require('../../zipper');
const globalData = require('../../globalData');
const cloudBuild = require("../../cloudBuild");



function doCloudBuildForAndroid(publishConfig, projectjSon) {
  const workspaceZipPath = path.join(globalData.get('moduleGlobals.tmpdir'), "cloudAndroid.zip");
  return prepareWorkspceZip(workspaceZipPath).then(res => {
    var cldCfg = prePareCloudBuildConfig(workspaceZipPath, publishConfig.releaseChannels, publishConfig.saveBinary, projectjSon);
    utility.writeJsonMsgToStdout("Starting Cloud Build...");
    utility.mkdirpSync(path.dirname(cldCfg.outputPath));
    return cloudBuild(publishConfig.IDE_TOKEN, "Android", cldCfg);
  }, err => {
    throw err;
  });
}

function prepareWorkspceZip(workspaceZipPath) {
  var zipper = new Zipper();
  utility.writeJsonMsgToStdout("Preparing Resource Files...");
  const projectRoot = globalData.get('args').projectRoot,
    licenseFile = globalData.get('args').licenseFile,
    andInConf = globalData.get("androidConfig.androidConfig.input");
  var configJson = _cloneDeep(globalData.get("processedArgs.config_json"));
  
  zipper.addFolderToFolder("config", path.join(projectRoot, "config"));
  zipper.addFolderToFolder(getRelPath(andInConf.scripts), andInConf.scripts);
  zipper.addFolderToFolder(getRelPath(andInConf.assets), andInConf.assets);
  zipper.addFolderToFolder(getRelPath(andInConf.images), andInConf.images);
  zipper.addFileToFolder(getRelPath(andInConf.packageProfileFile), andInConf.packageProfileFile, ".");
  zipper.addFileToFolder(configJson.build.input.android.manifest, path.join(projectRoot, configJson.build.input.android.manifest), ".");
  configJson.build.input.android.playerPath = null;
  zipper.file("config/project.json", JSON.stringify(configJson));
  zipper.addFileToFolder(getRelPath(andInConf.sign.keystoreFile), andInConf.sign.keystoreFile, ".");
  
  andInConf.plugins.forEach(plugin => {
    zipper.addFileToFolder(getRelPath(plugin.path), plugin.path, ".");
  });
  
  if (licenseFile) {
    zipper.addFileToFolder("output/.license.xml", globalData.get("processedArgs.LICENSE_FILEPATH"), ".");
  }
  
  return zipper.createZip(workspaceZipPath);
}

function prePareCloudBuildConfig(workspaceZipPath, releaseChannels, saveBinary, projectjSon) {
  var licenseType = globalData.get('androidConfig.androidConfig.input.license.type');
  var cfg = {
    "tripleDesKey": licenseType !== "Demo" ? globalData.get("androidConfig.tripleDes.keyBase") : null,
    "cliVersion": utility.getCliVersion(),
    "channels": releaseChannels,
    "playerPath": globalData.get('androidConfig.androidConfig.input.extractor.inputApk'),
    "profiles": globalData.get("androidConfig.user.profiles"),
    "cliArgs": Object.assign({}, globalData.get('args'), {
      "androidTPID": null,
      "iosTPID": null
    })
  };
  if (saveBinary) {
    var iconPath = path.join(globalData.get('androidConfig.androidConfig.input.images'), 'drawable/icon.png');
    utility.throwsNoSuchFile(iconPath, null, 'icon.png must be there');
    cfg.storeSubmission = {
      name: projectjSon.info.name,
      version: projectjSon.info.version,
      bundleId: projectjSon.build.output.android.packageName,
      imageBase64: utility.convertToBase64(iconPath)
    };
  }
  var cldConfig = {
    workspaceZip: workspaceZipPath,
    config: cfg,
    outputPath: globalData.get("androidConfig.androidConfig.output.outputApk"),
    outputExt: "apk",
    playerPath: globalData.get('androidConfig.androidConfig.input.extractor.inputApk'),
    writer: writerForOutput,
    saveBinary: saveBinary
  };
  return cldConfig;
}

function writerForOutput(apkPath, channel) {
  utility.writeJsonToStdout({
    msg: "Binary (APK) creation complete.",
    responseDone: true,
    finishedTask: {
      os: "Android",
      releaseChannel: channel,
      cpu: null,
      downloadFilePath: apkPath
    },
    allDone: false
  });
}

function getRelPath(otherPath) {
  return path.relative(globalData.get('args').projectRoot, otherPath);
}


module.exports = doCloudBuildForAndroid;

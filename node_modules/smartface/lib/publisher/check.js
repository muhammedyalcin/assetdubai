const fs = require('fs');
const path = require("path");

const _ = require("lodash");
const ProjectJSONValidator = require("project-json-validator").ProjectJSONValidator;
const smartfacePluginValidator = require("smartface-plugin-validator");

const globalData = require('../globalData');
const utility = require('../utility');
const createDummyPromise = utility.createDummyPromise;
const error = require("../error");

//controls rau before publishing.
function controlForRau(publishConfig) {
  // channels control
  var resPromise = createDummyPromise();
  var configRAU = publishConfig.configRAU;
  if (!publishConfig.justPublish &&
    !(configRAU.channels && (configRAU.channels instanceof Array) &&
      (configRAU.channels.length > 0))) {
    resPromise = createDummyPromise(error.getObject("rau.channels"));
  }
  return resPromise;
}

function controlProfile(publishconfig) {
  //android profile counts control
  var resPromise = createDummyPromise();
  if (publishconfig.android) {
    var profiles = globalData.get('androidConfig.user.profiles');
    if (profiles.length === 0) {
      resPromise = createDummyPromise(error.getObject("rau.android.profile", {
        helpForUser: {
          "packageProfiles": globalData.
          get("processedArgs.config_json.build.input.android.packageProfiles")
        }
      }));
    }
  }
  return resPromise;
}

function controlProjectJSON(publishconfig, projectjSon) {
  var resPromise = createDummyPromise();
  var target = publishconfig.justPublish ? ProjectJSONValidator.LOCAL_PUBLISH_TARGET :
    ProjectJSONValidator.RAU_PUBLISH_TARGET;
  const projectJSONValidator = new ProjectJSONValidator(projectjSon,
    target, detecOS());
  projectJSONValidator.fillOptionals();
  const checkingRes = projectJSONValidator.checkRequirements();
  if (checkingRes.warnings.length > 0) {
    utility.writeJsonToStdout({
      warning: "project.json Check Warnings",
      msg: "You should check these.\n\t├─ " +
        checkingRes.warnings.join("\n\t├─ ")
    });
  }
  if (checkingRes.errors.length > 0) {
    resPromise = createDummyPromise(error.getObject("controlProjectJSON", {
      msg: {
        msg: "\n\t├─ " + checkingRes.errors.join("\n\t├─ ")
      },
      helpForUser: {
        file: "config/project{.rau | .testingdistribution}.json"
      }
    }));
  }

  function detecOS() {
    var res = "";

    if (publishconfig.android && publishconfig.iOS)
      res = "all";
    else if (publishconfig.android)
      res = "android";
    else if (publishconfig.iOS)
      res = "iOS";
    return res;
  }

  return resPromise;
}

function validatePlugins() {
  var andPlugins = globalData.get("androidConfig.androidConfig.input.plugins");
  var iosPlugins = globalData.get("iosConfig.iosConfig.input.plugins");
  var allPromises = [];
  var namesPlugins = [];
  var messages = [];
  const cwd = globalData.get("cwd");

  _.each(andPlugins, (item) => {
    allPromises.push(smartfacePluginValidator(item.path, "Android", cwd));
    namesPlugins.push("Android - " + item.name + " - " + path.relative(cwd, item.path));
  });
  _.each(iosPlugins, (item) => {
    allPromises.push(smartfacePluginValidator(item.path, "iOS", cwd));
    namesPlugins.push("iOS - " + item.name + " - " + path.relative(cwd, item.path));
  });
  return Promise.all(allPromises).then(res => {
    var temp;
    _.each(namesPlugins, function(name, index) {
      temp = res[index];
      if (temp.error) {
        messages.push(name + "\n\t  - " + temp.allErrors.join("\n\t  - "));
      }
    });
    if (messages.length > 0) {
      throw error.getObject("plugin.invalid", {
        msg: {
          msg: "\n\t=> " + messages.join("\n\t=> ")
        }
      });
    }
    return res;
  }, err => {
    throw err;
  });
}

module.exports = {
  controlForRau: controlForRau,
  controlProfile: controlProfile,
  controlProjectJSON: controlProjectJSON,
  validatePlugins: validatePlugins
};

const path = require("path");
const xpath = require("xpath");
const xmldom = require("xmldom");
const DOMParser = xmldom.DOMParser;

const utility = require("../utility.js");

module.exports = function checkApplication(options) {
    const readFileSync = options.readFileSync;
    const basePath = options.basePath;
    const manifestPath = path.join(basePath, "AndroidManifest.xml");
    const helpForUserMsg = "You should check AndroidManifest.xml file.";
    const errorHandlerDOMParser = {
        warning: function(w) {
            utility.writeJsonToStdout({
                warning: "DOMParser Warning",
                msg: w.replace(/\n/gm, "\n\t"),
                helpForUser: helpForUserMsg,
                fullPath: manifestPath
            });
        },
        error: function(w) {
            utility.killProcess({
                err: "DOMParser Error",
                msg: w.replace(/\n/gm, "\n\t"),
                helpForUser: helpForUserMsg,
                fullPath: manifestPath
            });
        },
        fatalError: function(w) {
            utility.killProcess({
                err: "DOMParser Fatal Error",
                msg: w.replace(/\n/gm, "\n\t"),
                helpForUser: helpForUserMsg,
                fullPath: manifestPath
            });
        }
    };

    killIfDoesntExists(basePath, "dir");
    killIfDoesntExists(manifestPath, "file");

    const pluginManifest = readFileSync(manifestPath, "utf8");

    const pluginManifestDoc = new DOMParser({
        errorHandler: errorHandlerDOMParser
    }).parseFromString(pluginManifest);

    const select = xpath.useNamespaces({
        "android": "http://schemas.android.com/apk/res/android"
    });
    var applicationName = "";
    const applicationNameNodes = select("/manifest/application/@android:name", pluginManifestDoc);
    if (applicationNameNodes.length === 1)
        applicationName = applicationNameNodes[0].value;
    else {
        return true;
    }
    if (applicationName[0] === ".") {
        const packageName = select("/manifest/@package", pluginManifestDoc)[0].value;
        applicationName = packageName + applicationName;
    }
    if (applicationName === "android.support.multidex.MultiDexApplication")
        return true;
    const sep = path.sep;
    const pathRegex = /\x2E/g;
    const classPath = applicationName.replace(pathRegex, sep) + ".smali";
    var fileContent = "";
    for (var i = 1; i <= 100; i++) {
        var smaliDir = i === 1 ? "smali" : "smali_classes" + i;
        var filePath = path.join(basePath, smaliDir, classPath);
        try {
            fileContent = readFileSync(filePath, "utf8");
            break;
        }
        catch (ex) {
            continue;
        }
    }
    if (!fileContent)
        return false;
    return fileContent.indexOf(".super Landroid/support/multidex/MultiDexApplication;") > -1;
};

module.exports.errorText = "Application Class does not inherit MultiDexApplication";

function killIfDoesntExists(_path, fileOrDir, fext, message) {
    var msg = "You should check project files.";
    if (message) {
        msg = message;
    }
    if (fileOrDir === "file") {
        utility.throwsNoSuchFile(_path, fext, msg);
    }
    else {
        utility.throwsNoSuchDir(_path, msg);
    }
}

const utility = require("../utility");
const error = require("../error");
const Zipper = require("../zipperMemory");

module.exports = function(options, callback) {

    if (process.platform.substr(0, 3) === "win") {
        utility.killProcess(error.getObject("platform.support", {
            msg: {
                platform: process.platform,
                msg: "this task -> 'create_iOSPlugin'"
            }
        }));
    }
    const targetPath = options.path;
    const playerPath = options.playerPath;
    const path = require("path");
    const fs = require("fs");

    function extractPlayer() {
        utility.throwsNoSuchFile(playerPath, "zip", "ensure that 'playerPath' is correct.");
        utility.throwsNoSuchDir(targetPath, "ensure that 'path' is correct.");
        new Zipper().extract(playerPath, targetPath);
        clearSMFResFiles();
    }

    function clearSMFResFiles() {
        const baseDir = path.join(targetPath, "Smartface", "smfres");
        utility.throwsNoSuchDir(baseDir, "Most probably, your player is incorrect -> " + playerPath);
        walk(baseDir, function(err, results) {
            if (err) throw err;
            for (var i = 0; i < results.length; i++) {
                var filePath = path.join(baseDir, results[i]);
                fs.unlinkSync(filePath);
            }
            clearSMFResProject(results);
        });
    }

    function clearSMFResProject(files) {
        const projectPath = path.join(targetPath, "Smartface.xcodeproj", "project.pbxproj");
        utility.throwsNoSuchFile(projectPath, "pbxproj", "Most probably, your player is incorrect -> " + playerPath);
        fs.readFile(projectPath, 'utf8', function(err, data) {
            if (err) {
                utility.killProcess({
                    err: "Reading File Error",
                    msg: err
                });
            }
            const idRegex = /([A-F0-9]{24})/g;
            const idSkipList = ["61F73F081B739F5F003AADE5"];
            var lines = data.split("\n");
            var startOfSMFRes = {
                line: "		0C0B115C19767C4A000DE90B /* smfres */ = {",
                index: -1
            };
            var endOfSMFResChildren = {
                line: "			);",
                index: -1
            };
            var smfResChildren = [];
            var id = "";
            var line;
            for (var i = 0; i < lines.length; i++) {
                line = lines[i];
                if (startOfSMFRes.index === -1) {
                    if (line === startOfSMFRes.line) {
                        i += 2;
                        startOfSMFRes.index = i + 1;
                    }
                }
                else {
                    if (endOfSMFResChildren.index === -1) {
                        if (endOfSMFResChildren.line !== line) {
                            id = line.match(idRegex);
                            if (id) {
                                id = id[0];
                            }
                            if (idSkipList.indexOf(id) === -1) {
                                smfResChildren.push(id);
                            }
                        }
                        else {
                            endOfSMFResChildren.index = i;
                            i = 0;
                        }
                    }
                    else {
                        var hasChildrenOfSmfRes = -1;
                        for (var j = 0; j < smfResChildren.length && hasChildrenOfSmfRes === -1; j++) {
                            hasChildrenOfSmfRes = line.indexOf(smfResChildren[j]);
                        }
                        if (hasChildrenOfSmfRes !== -1) {
                            lines.splice(i, 1);
                            i--;
                        }
                    }
                }
            }
            const pbxprojContent = lines.join("\n");
            fs.writeFileSync(projectPath, pbxprojContent, "utf8");
            fs.writeFileSync(projectPath + ".snapshot", pbxprojContent, "utf8");
            utility.writeJsonToStdout({
                pluginDone: true,
                downloadFilePath: targetPath,
                msg: "plugin template is created. You can see it in following output folder"
            });
            utility.writeJsonMsgToStdout("Output: " + targetPath);
            callback(null, "plugin template is created.\nYou can see it in this folder -> " + targetPath);
        });
    }

    function walk(baseDir, dir, done) {
        if (done === undefined) {
            done = dir;
            dir = baseDir;
        }
        const baseStripLength = baseDir.length + 1;
        var results = [];
        fs.readdir(dir, function(err, list) {
            if (err) {
                return done(err);
            }
            var pending = list.length;
            if (!pending) {
                return done(null, results);
            }
            list.forEach(function(file) {
                file = path.resolve(dir, file);
                fs.stat(file, function(err, stat) {
                    if (err) {
                        throw err;
                    }
                    if (stat && stat.isDirectory()) {
                        walk(baseDir, file, function(err, res) {
                            if (err) {
                                throw err;
                            }
                            results = results.concat(res);
                            if (!--pending) {
                                done(null, results);
                            }
                        });
                    }
                    else {
                        const filePathToAdd = file.substring(baseStripLength);
                        filePathToAdd && results.push(filePathToAdd);
                        if (!--pending) {
                            done(null, results);
                        }
                    }
                });
            });
        });
    }


    extractPlayer(); //start point

};

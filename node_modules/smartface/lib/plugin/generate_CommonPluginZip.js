const fs = require("fs");
const path = require("path");
//const exec = require("child_process").exec;
const archiver = require("archiver");
const archive = archiver("zip");
const mkdirp = require('mkdirp');

module.exports = {
    createFolderStructure: function createFolderStructure(options, callback) {
        const targetPath = options.path;
        const os = options.os;
        var foldersToCreate = ["node_modules"];
        if (os === "Android") {
            foldersToCreate.push("apk");
        }
        else if (os == "iOS") {
            foldersToCreate.push("xcode");
        }

        createFolder();

        function createFolder() {
            var folderPath = foldersToCreate.pop();
            if (!folderPath || folderPath.length === 0) {
                callback(null, "folders created");
                return;
            }
            folderPath = path.join(targetPath, folderPath);
            mkdirp(folderPath, function(err) {
                if (err) {
                    callback(err, null);
                    return;
                }
                else {
                    createFolder();
                }
            });
        }
    },

    checkAndCreatePackageJSON: function checkAndCreatePackageJSON(options, callback) {
        //TODO: will try to add interactivity for npm init
        var packageJSONPath = path.join(options.path, "package.json");
        fs.access(packageJSONPath, fs.R_OK, function(err) {
            if (err) {
                callback('You must have created package.json under your target path.');
                //TODO: bring interactive feature for npm init
                /*
                    exec("npm init", {
                        cwd: options.path
                    }, function(error, stdout, stderr) {
                        if (stderr) {
                            callback(stderr, null);
                            return;
                        } else {
                            callback(null, stdout);
                        }
                    });
                */
            }
            else {
                callback(null);
            }
        });
    },

    createZipFileFromFolder: function createZipFileFromFolder(options, callback) {
        var outputPath = options.outputPath || path.join(((options.os == "Android") ? options.backupPath : options.path), '/', "output.zip");
        const output = fs.createWriteStream(outputPath);
        output.on("close", function() {
            callback(null, outputPath);
        });

        archive.on("error", function(err) {
            callback(err, null);
        });

        archive.pipe(output);
        archive
            .directory(options.path, false)
            .finalize();

    },

    validatePackage: function validatePackage(options, callback) {
        //TODO: validate
        callback(null, "stub validation");
    }
};
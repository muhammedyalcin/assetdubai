const fs = require('fs');
const crypto = require('crypto');

const ALGO = 'des-ede3';
//const ALGO = '3des-ecb';
const PARAM_IV = new Buffer(0);
const KEY = createKey();

function createKey(keyBase) {
	keyBase = keyBase || 'a/s4PvsTWK4q2urqYVv+dibQjwIERscg';
	const key = (new Buffer(keyBase, 'base64')).toString('binary');
	return key;
}

function encrypt(key, data, autoPad) {
	autoPad = (autoPad) ? autoPad : false;
	const cipher = crypto.createCipheriv(ALGO, key, PARAM_IV);
	cipher.setAutoPadding(autoPad);
	const ciph = cipher.update(data, 'utf8', 'hex') + cipher.final('hex');
	return ciph;
}

function decrypt(key, encryptedData, autoPad) {
	autoPad = (autoPad) ? autoPad : false;
	const decipher = crypto.createDecipheriv(ALGO, key, PARAM_IV);
	decipher.setAutoPadding(autoPad)
	const data = decipher.update(encryptedData, 'hex', 'utf8') + decipher.final('utf8');
	return data;
}

function encryptFile(plainFilePath, key, encryptFilePath) {
	const data = fs.readFileSync(plainFilePath, {
		encoding: 'binary',
		mode: 0777
	});
	const encryptedData = encrypt(createKey(key), data, true);
	const resBuf = new Buffer(encryptedData, 'binary');
	fs.writeFileSync(encryptFilePath, resBuf); // write file.
}

function decryptFile(encryptFilePath, key, decryptedFilePath) {
	const data = fs.readFileSync(encryptFilePath, {
		encoding: 'binary',
		mode: 0777
	});
	const decryptedData = decrypt(createKey(key), data, true);
	const resBuf = new Buffer(decryptedData, 'binary');
	fs.writeFileSync(decryptedFilePath, resBuf); // write file.
}

function test_des() {
	//encrypt
	const autoPad = true;
	const key = createKey();
	const data = '99999999';
	const encryptedData = encrypt(key, data, autoPad);
	const decryptedData = decrypt(key, encryptedData, autoPad);
}

function test_files(key) {
	const cryptKey = (key) ? createKey(key) : KEY;
	const toEncryptFilePath = '/Users/serkanserttop/codespace/github.com/smartface/emptysmf/node_modules/smartface-cli/experiment/test-des3/config2.xml';
	const toEncryptEncryptedFilePath = '/Users/serkanserttop/codespace/github.com/smartface/emptysmf/node_modules/smartface-cli/experiment/test-des3/config2-encrypt.xml';
	const toDecryptEncryptedFilePath = toEncryptEncryptedFilePath;
	const toDecryptDecryptedFilePath = '/Users/serkanserttop/codespace/github.com/smartface/emptysmf/node_modules/smartface-cli/experiment/test-des3/config2-encrypt-decrypt.xml';
	//const encrpytedData = encrypt()
	encryptFile(toEncryptFilePath, cryptKey, toEncryptEncryptedFilePath);
	decryptFile(toDecryptEncryptedFilePath, cryptKey, toDecryptDecryptedFilePath);
	// node experiment/test-des3/cli-en-de-crypt-smf.js encrypt /Users/serkanserttop/codespace/github.com/smartface/emptysmf/node_modules/smartface-cli/experiment/test-des3/config2.xml
	// node experiment/test-des3/cli-en-de-crypt-smf.js decrypt /Users/serkanserttop/codespace/github.com/smartface/emptysmf/node_modules/smartface-cli/experiment/test-des3/config2-encrypt.xml
}

module.exports = {
	createKey: createKey,
	decrypt: decrypt,
	encrypt: encrypt,
	decryptFile: decryptFile,
	encryptFile: encryptFile
};
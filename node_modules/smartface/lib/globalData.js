const dotProp = require('dot-prop');
const singleton = function singleton(){
	var data = {};

	function init(obj) {
		data = obj;
	}

	function get(str_key){
		return dotProp.get(data, str_key);
	}

	function getData() {
		return data;
	}

	function reset() {
		data = {};
	}

	function setState(key, obj) {
		// console.trace('globalData.set', key);
		if(typeof key === 'string') {
			dotProp.set(data, key, obj);
		} else {
			obj = key;
			Object.keys(obj).forEach(function(key) {
				dotProp.set(data, key, obj[key]);
			});
		}
	}

	function setStateFromNestedLevel(nested_key, obj) {
		Object.keys(obj).forEach(function(key) {
			dotProp.set(data, nested_key + '.' + key, obj[key]);
		});
	}

	this.init = init;
	this.getData = getData;
	this.get = get;
	this.reset = reset;
	this.setNested = setStateFromNestedLevel;
	this.set = setState;

	if(singleton.caller != singleton.getInstance){
		throw new Error("This object cannot be instantiated");
	}
}

singleton.instance = null;

singleton.getInstance = function(){
	if(this.instance === null){
		this.instance = new singleton();
	}
	return this.instance;
}
 
module.exports = singleton.getInstance();
const fs = require('fs');
const path = require('path');
const copy = require('./copy');
const pfs = require('./publisher/ios/pfs');

const BIN_ENCODING_JSON = {
	encoding: 'binary'
};

function createFontParams(rootPath, deviceType, targetFolder, appStudioProject,iOSopt) {
	const fontRootPath = (appStudioProject) ? rootPath : path.join(rootPath, 'config');
	var params = {
		"deviceType": deviceType,
		"fontsFolder": path.join(fontRootPath, 'Fonts/'),
		"targetFolder": targetFolder,
		"xmlFilePath": path.join(fontRootPath, 'FontConfig.xml')
	};
	if(iOSopt){
		params.pfs  = pfs.rwFileSyncSingleton(iOSopt.smartfacePlayerFolder,iOSopt.contentZip, iOSopt.isCloudBuild);
	}
	return params;
}

function handleFonts(params) {
	const fonts = collectFontNames(params.fontsFolder);
	var all_font_files = [];
	copyFontsToAssets(fonts, params);
	return all_font_files;

	function copyFontsToAssets(fonts, params) {
		fonts.forEach(function(font) {
			const fontFolderPath = params.fontsFolder + font;
			copyFolderToDir(params, fontFolderPath, fileNameReplacerGenerator);
		});
	}

	function copyFolderToDir(params, fontFolderPath, fileNameReplacerGenerator) {
		if (params.deviceType === 'Android') {
			copy.copyDirectory(fontFolderPath, params.targetFolder, fileNameReplacerGenerator(params));
		}
		else {
			copy.copyDirectory(fontFolderPath, params.targetFolder, fileNameReplacerGenerator(params), true);
		}
	}

	function fileNameReplacerGenerator(params) {
		return function fileNameReplacerForAndroid(dirName, fileName, isDirectory) {
			//"return false" means "Do not copy this file"
			if (isDirectory) {
				return false;
			}
			if (params.deviceType === 'Android') {
				pushFileName(fileName);
				return fileName;
			}
			else {
				//Need to handle this manually as this operation is done on the zip file
				const orgFile = path.join(dirName, fileName);
				const assetFile = params.targetFolder + '/' + fileName;
				params.pfs.writeFileSync(assetFile, fs.readFileSync(orgFile, BIN_ENCODING_JSON), BIN_ENCODING_JSON);
				pushFileName(fileName);
				return false;
			}
		};
	}

	function pushFileName(font_file) {
		all_font_files.push(font_file);
	}

}

function collectFontNames(fontsFolderPath) {
	return fs.readdirSync(fontsFolderPath);
}


module.exports = {
	createFontParams: createFontParams,
	handleFonts: handleFonts
};
function update(target, obj2) {
  Object
    .keys(obj2)
    .forEach(key => {
      if (target[key]) {
        upadteNonNested(target, key, obj2[key]);
      }
      else {
        target[key] = obj2[key];
      }
    });
}

function upadteNonNested(target, key, value) {
  var type = typeof target[key],
    isArray = instanceofHelper(target[key], Array) && instanceofHelper(value, Array),
    isRegEXp = instanceofHelper(target[key], RegExp) && instanceofHelper(value, RegExp);
  if (isArray) {
    value.forEach((item, index) => {
      if (typeof item === "object" && !instanceofHelper(item, RegExp))
        return update(target[key][index], item);
      if (target[key].indexOf(item) === -1) {
        target[key].push(item);
      }
    });
  }
  else if (!isRegEXp && type === "object") {
    update(target[key], value);
  }
  else {
    target[key] = value;
  }
}

function instanceofHelper(item, constructor) {
  return item instanceof constructor;
}

module.exports = update;

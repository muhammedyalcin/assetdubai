const _ = require('lodash');
const utility = require('./utility');
const convert = utility.convertAbsolute.convert;
const path = require('path');
const error = require("./error");

function pluginsParse(plugins, platform, root, projectConfig) {
	var projectDefaultPlugins = {};
	if (projectConfig) {
		platform = platform.toLowerCase();
		_.each(projectConfig.build.input[platform].plugins, function(plugin, plugin_name) {
			if (!plugin) {
				return;
			}
			else if (typeof plugin === 'string') {
				plugin = replaceRoot(plugin);
				projectDefaultPlugins[plugin_name] = plugin;
			}
			else if (plugin.active) {
				projectDefaultPlugins[plugin_name] = Object.assign({}, plugin, {
					path: replaceRoot(plugin.path)
				});
			}
		});
	}
	if (!_.isUndefined(plugins)) {
		if (!(plugins instanceof Array)) {
			plugins = [plugins];
		}
		_.each(plugins, function(item) {
			const plugin = item.split('::', 2);
			const plugin_name = plugin[0];
			const plugin_path = plugin[1];
			projectDefaultPlugins[plugin_name] = plugin_path;
		});
	}
	const res = _.map(projectDefaultPlugins, function(_parsedPlugin, plugin_name) {
		return Object.assign({},(_parsedPlugin.path ? _parsedPlugin : {}),{
			name: plugin_name,
			path: convert(_parsedPlugin.path || _parsedPlugin)
		});
	});
	checkPluginsIsExists();
	return res;

	function replaceRoot(plugin_path) {
		if (path.isAbsolute(plugin_path)) {
			return plugin_path;
		}
		else {
			return path.join(root, plugin_path);
		}
	}

	function checkPluginsIsExists() {
		_.each(res, function(item) {
			if(!utility.safeControlFile(item.path,"zip")){
				utility.killProcess(error.getObject("plugin.zip",{
					msg:{
						pluginFile: item.path
					}
				}));
			}
		});
	}
}

module.exports = {
	pluginsParse: pluginsParse
};
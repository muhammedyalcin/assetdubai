/**
 * @file Json object that parsing from xml. includes helper functions.
 * @version 1.0.0
 *
 * @requires module:xml-parser
 * @requires module:fs
 */

/**
 * @private
 */
const fs = require('fs');
const DOMParser = require('xmldom').DOMParser;
const XMLSerializer = require('xmldom').XMLSerializer;
const utility = require('./utility');

/**
 * Xml to json parser and it has find object methods in JSON object.
 * @constructor XmlParser
 * @param {object} jsonObject this object would be  same json.
 */
const XmlParser = function(obJson) {
	/**
	 * @private
	 */
	var document = obJson;

	var parseRes = {
		error: false,
		warning: false,
		locator: {}
	};

	this.parseResult = parseRes;

	const parser = new DOMParser({
		locator: parseRes.locator,
		errorHandler: {
			warning: function(w) {
				parseRes.warning = w;
			},
			error: function(w) {
				parseRes.error = w;
			},
			fatalError: function(w) {
				parseRes.fatalError = w;
			}
		}

	});

	const xmlSerilazer = new XMLSerializer();
	/**
	 * Parser xml to json .
	 * @method parser
	 * @memberof XmlParser
	 * @param {string} filePathorRawXml that will be parsed.
	 * @this XmlParser
	 * @return {object} this XmlParser.
	 */
	this.parse = function(filePathorRawXml) {
		const xml = (utility.safeControlFile(filePathorRawXml)) ? fs.readFileSync(filePathorRawXml, 'utf8') : filePathorRawXml;
		document = parser.parseFromString(xml); // parsing.
		return this;
	};
	/**
	 * is parsed xml to json .
	 * @method isParsed
	 * @memberof XmlParser
	 * @this XmlParser
	 * @return {Boolean} parser operations result.
	 */
	this.isParsed = function() {
		return !parseRes.error;
	};
	/**
	 *  find object from json
	 * @method findObject
	 * @memberof XmlParser
	 * @param {string} tagName objectName that will be searched.
	 * @this XmlParser
	 * @return {object} new XmlParser.
	 */
	this.findObject = function findObject(tag) {
		var res = getObjects(document, tag);
		return new XmlParser(res[0]);
	};

	/**
	 *  find objects from json
	 * @method findObjects
	 * @memberof XmlParser
	 * @param {string} tagName objectsName that will be searched.
	 * @this XmlParser
	 * @return {Array} new XmlParser objects Array.
	 */
	this.findObjects = function(tag) {
		var resArr = [];
		var res = getObjects(document, tag);
		for (var i = 0; i < res.length; ++i) {
			resArr.push(new XmlParser(res[i]));
		}
		return resArr;
	};
	/**
	 *  find object that has  the value from json
	 * @method findObjectHasTargetVal
	 * @memberof XmlParser
	 * @param {string} tagName objectName that will be searched.
	 * @param {string} value value of taht will be searched.
	 * @this XmlParser
	 * @return {object} new XmlParser.
	 */
	this.findObjectHasTargetVal = function findObjectHasTargetVal(tag, value) {
		var objs = getObjects(document, tag);
		var res,
			item;
		for (var i = 0; i < objs.length; ++i) {
			item = objs[i];
			if (getData(item) == value) {
				res = item;
				break;
			}
		}
		return new XmlParser(res);
	};

	/**
	 *  find object that has  the object that has the value, from json
	 * @method findObjectHasTargetObject
	 * @memberof XmlParser
	 * @param {string} searchedTag objectName that will be searched.
	 * @param {string} tagName objectName that will be included in searched.
	 * @param {string} value value of taht will be searched.
	 * @this XmlParser
	 * @return {object} new XmlParser.
	 */
	this.findObjectHasTargetObject = function findObjectHasTargetObject(searchedTag, targetTag, targetValue) {
		var res, temp, item;
		var targetObjs = getObjects(document, searchedTag);
		for (var i = 0; i < targetObjs.length; ++i) {
			temp = getObjects(targetObjs[i], targetTag);
			for (var j = 0; j < temp.length; ++j) {
				item = temp[j];
				if (getData(item) == targetValue) {
					res = targetObjs[i];
					//break loops
					i = targetObjs.length + 2;
					j = temp.length + 2;
				}
			}
		}
		return new XmlParser(res);
	};
	/**
	 * Get attribute from this oobjectJson.
	 * @method getAttribute
	 * @memberof XmlParser
	 * @param {string} tagName attribute that will be searched.
	 * @this XmlParser.
	 * @return {string} value value of attribute.
	 */
	this.getAttribute = function(tag) {
		var res;
		if ((typeof document === 'object') && (typeof document.attributes === "object")) {
			//console.log( document['attributes'][tag]);  // for debug.
			var item;
			for (var i = 0; i < document.attributes.length; ++i) {
				item = document.attributes[i];
				if (item.nodeName === tag) {
					res = item.nodeValue;
					break;
				}
			}
		}
		return res;
	};
	/**
	 * Get content from this oobjectJson.
	 * @method getContent
	 * @memberof XmlParser
	 * @param {string} tagName content of this object.
	 * @this XmlParser
	 * @return {string} content value of the content.
	 */
	this.getContent = function() {
		return getData(document);
	};

	/**
	 * Create xml String  from this objectJson.
	 * @method createXmlString
	 * @memberof XmlParser
	 * @param {string} tagName content of this object.
	 * @this XmlParser
	 * @return {string} content value of the content.
	 */
	this.createXmlString = function() {
		return xmlSerilazer.serializeToString(document);
	};

	/* private Functions */
	function getObjects(node, tag) {
		var res = node.getElementsByTagName(tag);
		return res ? res : [];
	}

	function getData(node) {
		var res;
		typeof node !== "undefined" &&
			typeof node.childNodes[0] === 'object' &&
			(res = node.childNodes[0].data);
		return res;
	}

};

module.exports = XmlParser;

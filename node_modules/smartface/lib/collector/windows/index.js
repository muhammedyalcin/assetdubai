const _ = require('underscore');
const androidConfigurator = require('./android');
const iosConfigurator = require('./ios');
const TAG = require('../tag');
const Parser = require('../../xmltojson');
const ConfigObjects = require('../../config/index');
const error = require('../../error');
const killProcess = require('../../utility').killProcess;
const globalData = require('../../globalData');

var Config = ConfigObjects.Config;
var Config2 = ConfigObjects.Config2;
var AndroidConfig = ConfigObjects.android;
var IOSConfig = ConfigObjects.ios;

const SFPX = TAG.SFPX;
const LICENSE = TAG.LICENSE;

const DEFAULT_SPLASH_IMG = 'default_splash.png';
const ANDROID_FULL_PUBLISH_TASK = 'Android-publish';
const IOS_FULL_PUBLISH_TASK = 'iOS-publish';


// config2 attributes get from sfpx file.
function createConfig2FromSfpx(sfpx) {
	var config2 = new Config2();
	const parser = new Parser().parse(sfpx); // the most commonly used object.
	const orientations = parser.findObject(SFPX.DEVICE_ORIENTATIONS_TAG);
	_.extend(config2, {
		"splash": DEFAULT_SPLASH_IMG,
		"splashBackground": parser.findObject(SFPX.PROJECT_DETAILS_TAG).getAttribute(SFPX.ATTR_SPLASH_BACKGROUND_COLOR_TAG),
		"appVersion": parser.findObject(SFPX.ROOT_TAG).getAttribute(SFPX.ATTR_APP_VERSION_TAG),
		"fileVersion": parser.findObject(SFPX.ROOT_TAG).getAttribute(SFPX.ATTR_XML_VERSION_TAG),
		"appDescription": parser.findObject(SFPX.PROJECT_DETAILS_TAG).getAttribute(SFPX.ATTR_DESCRIPTION_TAG)
	});
	_.extend(config2.orientation, {
		"portrait": Boolean(orientations.getAttribute(SFPX.ATTR_PORTRAIT_TAG) == 1),
		"landScapeLeft": Boolean(orientations.getAttribute(SFPX.ATTR_LANDSCAPE_LEFT_TAG) == 1),
		"landScapeRight": Boolean(orientations.getAttribute(SFPX.ATTR_LANDSCAPE_RIGHT_TAG) == 1),
		"upsideDown": Boolean(orientations.getAttribute(SFPX.ATTR_UPSIDEDOWN_TAG) == 1)
	});
	return config2;
}

// TripleDes key  setter.
function updateTripleDesKeyFromLicense(config, license) {
	const licenseObj = new Parser().parse(license);
	if (!licenseObj.isParsed()) {
		var errObj = _.extend(error.getObject('fileDir', {
			err: {
				fileDir: 'License File'
			},
			msg: {
				fileDir: 'file'
			}
		}), {
			"fullPath": license
		});
		killProcess(errObj);
	}
	const keyBase = licenseObj.findObject(LICENSE.TRIPLE_DES_TAG).getContent();
	const key = (keyBase) ? new Buffer(keyBase, 'base64') : '';
	if (key.length !== 24) {
		var errObj = _.extend(error.getObject('licenseFile'), {
			"fullPath": license
		});
		killProcess(errObj);
	}
	config.tripleDes.key = key.toString('binary');
}

// general config object update.
function updateConfigFromArgs(config, processedArgs) {
	config.user.project.sfpx = processedArgs.PROJECT_SFPX;
	config.user.project.root = processedArgs.projectRoot;
	config.user.profiles = processedArgs.PROFILES;
}

// create config by a task that android full publish.
function getConfigForAndroidFullPublish(processedArgs) {
	var config = new Config();
	config.task = ANDROID_FULL_PUBLISH_TASK;
	config.androidConfig = new AndroidConfig();
	updateConfigFromArgs(config, processedArgs);
	config.config2 = createConfig2FromSfpx(config.user.project.sfpx);
	updateTripleDesKeyFromLicense(config, processedArgs.LICENSE_FILEPATH);
	androidConfigurator.configUpdateFromSfpx(config);
	androidConfigurator.configUpdateFromLicense(config, processedArgs.LICENSE_FILEPATH);
	androidConfigurator.configUpdateFromArgs(config, processedArgs);
	androidConfigurator.configUpdateFoldersAndProfiles(config);
	config.user.profiles = profileCollector(processedArgs.PROFILES, config.androidConfig.input.packageProfiles);
	return config;
}

function getConfigForIOSFullPublish(processedArgs) {
	var config = new Config();
	config.task = IOS_FULL_PUBLISH_TASK;
	config.iosConfig = new IOSConfig();
	updateConfigFromArgs(config, processedArgs);
	config.config2 = createConfig2FromSfpx(config.user.project.sfpx);
	updateTripleDesKeyFromLicense(config, processedArgs.LICENSE_FILEPATH);
	iosConfigurator.configUpdateFromSfpx(config);
	iosConfigurator.configUpdateFromLicense(config, processedArgs.LICENSE_FILEPATH);
	iosConfigurator.configUpdateFromArgs(config, processedArgs);
	return config;
}

// profile colecting ...
function profileCollector(argsProfiles, packageProfiles) {
	var res = [];
	if (argsProfiles === '*') {
		_.each(packageProfiles, function(item) {
			res.push({
				name: item.profile.name,
				x86: true
			}, {
				name: item.profile.name,
				x86: false
			});
		});
	} else {
		const x86AllProfile = (argsProfiles.x86.indexOf('*') !== -1); // all profiles ?
		const armAllProfile = (argsProfiles.arm.indexOf('*') !== -1);
		if (!x86AllProfile) { // x86 profiles not include '*'
			_.each(argsProfiles.x86, function(item) {
				res.push({
					name: item,
					x86: true
				});
			});
		}
		if (!armAllProfile) { // arm profiles not include '*'
			_.each(argsProfiles.arm, function(item) {
				res.push({
					name: item,
					x86: false
				});
			});
		}
		if (armAllProfile || x86AllProfile) {
			_.each(packageProfiles, function(item) { // all profiles in packageProfiles
				if (armAllProfile) {
					res.push({
						name: item.profile.name,
						x86: false
					});
				}
				if (x86AllProfile) {
					res.push({
						name: item.profile.name,
						x86: true
					});
				}
			});
		}
	}
	return res;
}

module.exports = {
	createConfig2FromSfpx: createConfig2FromSfpx,
	updateTripleDesKeyFromLicense: updateTripleDesKeyFromLicense,
	updateConfigFromArgs: updateConfigFromArgs,
	getConfigForAndroidFullPublish: getConfigForAndroidFullPublish,
	getConfigForIOSFullPublish: getConfigForIOSFullPublish
};
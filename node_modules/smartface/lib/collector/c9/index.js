const path = require("path");

const _ = require('lodash');

const androidConfigurator = require('./android');
const iosConfigurator = require('./ios');
const TAG = require('../tag');
const Parser = require('../../xmltojson');
const ConfigObjects = require('../../config/index');
const error = require('../../error');
const utility = require("../../utility.js");
const convertAbsolute = utility.convertAbsolute;
const killProcess = utility.killProcess;

var Config = ConfigObjects.Config;
var Config2 = ConfigObjects.Config2;
var AndroidConfig = ConfigObjects.android;
var IOSConfig = ConfigObjects.ios;

const SFPX = TAG.SFPX;
const LICENSE = TAG.LICENSE;
const ANDROID_FULL_PUBLISH_TASK = 'Android-publish';
const IOS_FULL_PUBLISH_TASK = 'iOS-publish';

// create config by a task that android full publish.
function getConfigForAndroidFullPublish(processedArgs) {
	var config = new Config();
	config.task = ANDROID_FULL_PUBLISH_TASK;
	config.androidConfig = new AndroidConfig();
	updateConfigFromArgs(config, processedArgs);
	config.config2 = createConfig2FromConfigJson(processedArgs);
	updateTripleDesKeyFromLicense(config, processedArgs.LICENSE_FILEPATH);

	androidConfigurator.configUpdateFromConfigJson(config, processedArgs);
	androidConfigurator.configUpdateFromLicense(config, processedArgs.LICENSE_FILEPATH);
	androidConfigurator.configUpdateFromArgs(config, processedArgs);
	androidConfigurator.configUpdateFoldersAndProfiles(config);
	//config.user.profiles = profileCollector(processedArgs.PROFILES, config.androidConfig.input.packageProfiles);
	androidConfigurator.configureProfilesForPublishFromPackageProfilesXML(config);
	return config;
}

function getConfigForIOSFullPublish(processedArgs) {
	var config = new Config();
	config.task = IOS_FULL_PUBLISH_TASK;
	config.iosConfig = new IOSConfig();
	
	iosConfigurator.configUpdateForInfoPlist(config,processedArgs);
	updateConfigFromArgs(config, processedArgs);
	config.config2 = createConfig2FromConfigJson(processedArgs);
	updateTripleDesKeyFromLicense(config, processedArgs.LICENSE_FILEPATH);

	iosConfigurator.configUpdateFromConfigJson(config, processedArgs);
	iosConfigurator.configUpdateFromLicense(config, processedArgs.LICENSE_FILEPATH);
	iosConfigurator.configUpdateFromArgs(config, processedArgs);
	return config;
}

function getConfigForCreateiOSPlugin(processedArgs) {
	var config = {};
	config.task = processedArgs.task;
	config.path = processedArgs.path || ".";
	config.path = convertAbsolute.convert(config.path);
	if (processedArgs.playerPath) {
		config.playerPath = convertAbsolute.convert(processedArgs.playerPath);
	}
	return config;
}

function getConfigForGenerateiOSPluginZip(processedArgs) {
	var config = {};
	config.task = processedArgs.task;
	config.path = processedArgs.path || ".";
	config.path = convertAbsolute.convert(config.path);
	processedArgs.outputPath && (config.outputPath = convertAbsolute.convert(processedArgs.outputPath));
	return config;
}

function getConfigForGenerateAndroidPluginZip(processedArgs) {
	var config = {};
	config.task = processedArgs.task;
	config.path = processedArgs.path || ".";
	config.path = convertAbsolute.convert(config.path);
	config.apkPath = convertAbsolute.convert(processedArgs.apkPath);
	processedArgs.outputPath && (config.outputPath = convertAbsolute.convert(processedArgs.outputPath));
	config.moveLib =  processedArgs.moveLib;
	if( !(config.moveLib instanceof Array) ){
		config.moveLib = config.moveLib ? [config.moveLib] : [];
	}
	return config;
}

// config2 attributes get from config.json file.
function createConfig2FromConfigJson(processedArgs) {
	const DEFAULT_SPLASH_IMG = 'default_splash.png';
	const SplashScreenBackgroundColor = "3947526";
	const config_json = processedArgs.config_json;
	const info = config_json.info;
	var config2 = new Config2();

	if (!(info && info.version)) {
		killProcess(error.getObject("version"));
	}
	_.extend(config2, {
		"splash": DEFAULT_SPLASH_IMG,
		"splashBackground": SplashScreenBackgroundColor,
		"appVersion": info.version,
		"fileVersion": info.runtimeVersion,
		"appDescription": info.description
	});

	_.each(['portrait', 'landScapeLeft', 'landScapeRight', 'upsideDown'], function(item) {
		config2.orientation[item] = config_json.config.orientation[item];
	});
	return config2;
}

// TripleDes key setter.
function updateTripleDesKeyFromLicense(config, license) {
	const licenseObj = new Parser().parse(license);
	var errObj;
	if (!licenseObj.isParsed()) {
		errObj = _.extend(error.getObject('fileDir', {
			err: {
				fileDir: 'License File'
			},
			msg: {
				fileDir: 'file'
			}
		}), {
			"fullPath": license
		});
		killProcess(errObj);
	}
	const keyBase = licenseObj.findObject(LICENSE.TRIPLE_DES_TAG).getContent();
	const key = (keyBase) ? new Buffer(keyBase, 'base64') : '';
	if (key.length !== 24) {
		errObj = _.extend(error.getObject('licenseFile'), {
			"fullPath": license
		});
		killProcess(errObj);
	}
	config.tripleDes.key = key.toString('binary');
	config.tripleDes.keyBase = keyBase;
}

// general config object update.
function updateConfigFromArgs(config, processedArgs) {
	config.user.project.root = processedArgs.projectRoot;
	// already done.
	//config.user.profiles = processedArgs.PROFILES;
}

module.exports = {
	updateTripleDesKeyFromLicense: updateTripleDesKeyFromLicense,
	updateConfigFromArgs: updateConfigFromArgs,
	getConfigForAndroidFullPublish: getConfigForAndroidFullPublish,
	getConfigForIOSFullPublish: getConfigForIOSFullPublish,
	getConfigForCreateiOSPlugin: getConfigForCreateiOSPlugin,
	getConfigForGenerateiOSPluginZip: getConfigForGenerateiOSPluginZip,
	getConfigForGenerateAndroidPluginZip: getConfigForGenerateAndroidPluginZip
};
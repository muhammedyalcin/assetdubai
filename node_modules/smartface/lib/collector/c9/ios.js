const fs = require('fs');
const _ = require('underscore');
const TAG = require('../tag');
const Parser = require('../../xmltojson');
const utility = require('../../utility')
const SFPX = TAG.SFPX;
const LICENSE = TAG.LICENSE;
const globalData = require('../../globalData');

function configUpdateFromArgs(config, processedArgs) {
	const config_json = processedArgs.config_json;
	const cj_input = config_json.build.input.ios;
	var input = config.iosConfig.input;
	var output = config.iosConfig.output;
	const project = config.user.project;
	const root = project.root + '/';
	_.extend(input, {
		'sqlite': root + cj_input.assets + '/database.sqlite',
		"defaultsXml": root + 'defaults.xml',
		"config": root+ "config/iOS",
		"assets": root + cj_input.assets,
		"scripts": root + cj_input.scripts,
		"images": root + cj_input.images,
		"playerZip": processedArgs.PLAYER_ZIP,
		"plugins": processedArgs.iOS_PLUGINS
	});
	if (globalData.get('args').outputZip != processedArgs.OUTPUT_ZIP) {
		output.outputZip = processedArgs.OUTPUT_ZIP.replace(/app.zip/gm, input.license.name + '.zip');
	}
	else {
		output.outputZip = globalData.get('args').outputZip;
	}
}

// application license from license file.
function configUpdateFromLicense(config, licenseFilePath) {
	const licenseObj = new Parser().parse(licenseFilePath);
	const appLicenseObj = licenseObj.findObjectHasTargetObject(LICENSE.APP_PACKAGE_LICENSE_TAG, LICENSE.PACKAGE_TYPE_TAG, 'iOS');
	var input = config.iosConfig.input;
	_.extend(input.license, {
		"data": appLicenseObj.createXmlString(),
		"type": appLicenseObj.findObject(LICENSE.LICENSE_TYPE_TAG).getContent(),
		"name": appLicenseObj.findObject(LICENSE.LICENSE_NAME_TAG).getContent()
	});
	var infoEdit = input.infoPlist.edit;
	_.extend(infoEdit, {
		"appNameShort": infoEdit.appName.substr(0, 16),
		"appVersion": config.config2.appVersion
	});
}

function configUpdateFromConfigJson(config, processedArgs) {
	//var sfpxObj = new Parser().parse(config.user.project.sfpx); // the most commonly used object.
	var input = config.iosConfig.input;
	_.extend(input, {
		"urlIdentifier": processedArgs.config_json.build.input.ios.urlIdentifier,
		"urlSchemes": processedArgs.config_json.build.input.ios.urlSchemes
	});
	var infoEdit = input.infoPlist.edit;
	infoEdit.appName = processedArgs.config_json.info.name;
	if (processedArgs.config_json.build.output.ios.bundleIdentifier && processedArgs.config_json.build.output.ios.bundleIdentifier != "") {
		infoEdit.packageName = processedArgs.config_json.build.output.ios.bundleIdentifier;
	}
	else {
		var jsonObj = {
			err: "output.ios.bundleIdentifier is not defined",
			msg: "bundleIdentifier in package.json file must be defined to publish iOS projects"
		};
		utility.killProcess(jsonObj);
	}
	const packageName = infoEdit.packageName;
	const temp = packageName.split('.');
	const productNameFromTemp = temp[temp.length - 1];
	const productName = (productNameFromTemp === 'SmartfaceDemo') ? 'Smartface-Demo' : productNameFromTemp;
	infoEdit.productName = productName;
}

function configUpdateForInfoPlist(config, processedArgs) {
	var infoPlist = config.iosConfig.input.infoPlist;
	var infoPlistPath = processedArgs.config_json.build.input.ios.infoPlist;
	
	infoPlistPath = utility.convertAbsolute.convert(infoPlistPath);
	if(utility.safeControlFile(infoPlistPath)){
		infoPlist.data = fs.readFileSync(infoPlistPath,"utf8");
	}else{
		infoPlist.data = null;
		utility.writeJsonToStdout({
			warning:"Your Info.plist file does not exist.",
			msg:"You can check 'build.input.ios.infoPlist' property in project.json \n\t Process will continue with default Info.plist in the 'iOS_Player.zip'."
		});
	}
}

module.exports = {
	configUpdateFromConfigJson: configUpdateFromConfigJson,
	configUpdateFromLicense: configUpdateFromLicense,
	configUpdateFromArgs: configUpdateFromArgs,
	configUpdateForInfoPlist: configUpdateForInfoPlist
};

#!/bin/bash
if type complete &>/dev/null; then
#eject : from wordbreakers.
COMP_WORDBREAKS=${COMP_WORDBREAKS//:}
taskAndroid="publish:Android"
taskiOS="publish:iOS"
taskPublishBothofThem="publish:iOS,Android"
taskPublishBothofThemV2="publish:Android,iOS"
taskCreateiOSPlugin="create_iOSPlugin"
taskGenerateiOSPluginZip="generate_iOSPluginZip"
taskGenerateAndroidPluginZip="generate_AndroidPluginZip"
task="--task"

generalParamArr=(--help --task --version -v --interactive -i )
androidPublishParamArr=(--projectRoot --task --platform --channels --config_file --config_file_full_path --outputApk  --outputApk --aliasName --apkTool --autoPlay --androidPlayer  --inputApkPackageSuffix --java --keyPass --keystoreFile --keystorePass --licenseFile --logFile --logLevel --logStdOut --maxJavaMemory --plugin --profile --signer --tempFolder --no-color )
taskArr=(  publish:  create_iOSPlugin  generate_iOSPluginZip generate_AndroidPluginZip)
iOSPublishParamArr=( --platform --projectRoot --task --config_file --channels --config_file_full_path --iosPlayer --licenseFile --outputZip --autoPlay --licenseFile --logFile --logLevel --logStdOut --plugin --tempFolder --no-color )
publishBothofThemParamArr=(--projectRoot --task --platform --config_file --channels --config_file_full_path --outputApk --iosPlayer --outputApk --outputZip --aliasName --apkTool --autoPlay --androidPlayer  --inputApkPackageSuffix --java --keyPass --keystoreFile --keystorePass --licenseFile --logFile --logLevel --logStdOut --maxJavaMemory --plugin --profile --signer --tempFolder --no-color )
iOSCreateiOSPlugin=( --path --playerPath )
iOSGenerateiOSPluginZip=( --path --playerPath )
androidGenerateiOSPluginZip=( --path --playerPath )
platformArr=( win32 darwin c9 linux )
logLevelArr=( all debug info warn error fatal off )
logStdOutArr=( 1 0 true false json ) 

cur=""
prev=""
prev2=""

  #printf "compWord: ${COMP_CWORD} \n"
updateVars(){
	cur="${COMP_WORDS[COMP_CWORD]}" 
	if [[ ${COMP_CWORD} > 0 ]]; then
		prev="${COMP_WORDS[COMP_CWORD-1]}"
	fi  
	if [[ ${COMP_CWORD} > 1 ]]; then
		prev2="${COMP_WORDS[COMP_CWORD-2]}"
	fi 
}
	
detectTaskPhase(){
  
  taskPhase="NULL"
  for i in $(echo ${COMP_LINE} | tr "=" " ")
  do
    if [[ $i == $taskAndroid ]]; then
      taskPhase="${taskAndroid}"
      break
    elif [[ $i == $taskiOS ]]; then
      taskPhase="${taskiOS}"
      break
    elif [[ $i == ${task} ]]; then
      taskPhase="${task}"
    elif [[ $i == $taskCreateiOSPlugin ]]; then
      taskPhase="${taskCreateiOSPlugin}"
      break
    elif [[ $i == $taskGenerateiOSPluginZip ]]; then
      taskPhase="${taskGenerateiOSPluginZip}"
      break
    elif [[ $i == $taskGenerateAndroidPluginZip ]]; then
      taskPhase="${taskGenerateAndroidPluginZip}"
      break
    elif [[ ($i == $taskPublishBothofThem ) || ($i == $taskPublishBothofThemV2) ]]; then
      taskPhase="${taskPublishBothofThem}"
      break
    fi
  done
  echo ""${taskPhase}

}

# check params for tasks.
checkReduceParams(){
  local -a sourceArr=("${!1}")
  for i in $(echo ${COMP_LINE} | tr "=" " ")
  do
    for j in "${!sourceArr[@]}"
    do
      if [[ (${i} == ${sourceArr[$j]}) && (${i} != "--plugin") ]]; then
        unset sourceArr[$j]
        break;
      fi
    done
  done
  globalReplyArr=("${sourceArr[@]}")  
}

# isInArray argument1 source array, argument2 searched element 
isInArray(){
  local element res
  local -a isInArr=("${!1}")
  element="${2}"
  res="0"
  #echo "Elm:"${element}" ARR:"${isInArr[*]}
  for i in "${!isInArr[@]}"
  do
    if [[ ${element} == ${isInArr[$i]} ]]; then
        res="1"
        break;
    fi
  done
  echo ""${res}
}

# COMP_LINE check params at least one elment include  in the source params
isIncludeCommandLineParams(){
  local res="0"
  local -a isIncludeArr=("${!1}")
  for i in $(echo ${COMP_LINE} | tr "=" " ")
  do
    res=$(isInArray isIncludeArr[@] ${i})
    if [[ ${res} == "1" ]]; then
      break
    fi
  done
  echo ""${res}
}

# check valid paramssmfc
getValidParams(){

  local res

  res="invalid"
  #can not work auto complete these cases
  # 1 --platform= d<TAB>
  # 2 --platform darwin d<TAB>
  # 3 --task= iOS-publish --<TAB>
  if [[ ( ( ${COMP_LINE} != *"= "* ) && (${COMP_LINE} != *" ="* ) ) || \
   ( (${COMP_LINE:${COMP_POINT}-1:1} == "=") && (${COMP_LINE} != *" ="*) ) ]]; then
    res="valid"
    if [[ (${prev2} == "-"*) && (${prev} == "=") && (${cur} != "" ) ]]; then
      res="${prev2}"
    elif [[ (${prev} == "-"*)]]; then
      res="${prev}"
    fi
  fi
  echo  ""${res}
}

#check params if task?
isTask(){
  local res

	
  res="0"
  if [[ (${taskPhase} == "${task}") && ( (${prev2} == "${task}") || (${prev} == "${task}" ) ) ]]; then
    res="1"
  fi
  echo ""${res}
}

#handle params
handleParam(){
  local param res
  param="${1}"
  case ${param} in
    --projectRoot | --tempFolder| --path)
      _filedir -d
      return 0
      ;;
    --config_file|--config_file_full_path|--apkTool|--androidPlayer|--inputApkPackageSuffix | \
    --outputApk|--keystoreFile|--licenseFile|--logFile|--signer|--iosPlayer|--outputZip| --playerPath )
      _filedir -f
      return 0
      ;;
    --platform)
      res=$(compgen -W "${platformArr[*]}" -- ${cur})
      if [[ "" != ${res} ]]; then
        COMPREPLY=( ${res})
      else
        COMPREPLY=( ${platformArr[*]} )
      fi
      return 0
      ;;
    --logLevel )
      res=$(compgen -W "${logLevelArr[*]}" -- ${cur})
      if [[ "" != ${res} ]]; then
        COMPREPLY=( ${res})
      else
        COMPREPLY=( ${logLevelArr[*]} )
      fi
      return 0
      ;;
    --logStdOut )
      res=$(compgen -W "${logStdOutArr[*]}" -- ${cur})
      if [[ "" != ${res} ]]; then
        COMPREPLY=( ${res})
      else
        COMPREPLY=( ${logStdOutArr[*]} )
      fi
      return 0
      ;;
  esac

}
_smfc() 
{
  local opts tasks res param

  #update curr, prev, prev2
  updateVars

  COMPREPLY=()
  
  #for debug printf "\n1|"${cur}"|  2|"${prev}"|  3|"${prev2}"|\n ${COMP_WORDBREAKS} \n"
  #set global arrays
  #globalArrs
  #detect task that user entried.
  taskPhase=$(detectTaskPhase)
  if [[ (${cur} == -* ) && ($(isIncludeCommandLineParams generalParamArr[@]) == "0")]] ; then
    checkReduceParams generalParamArr[@] 
    COMPREPLY=($(compgen -W "${globalReplyArr[*]}" -- ${cur}))
    return 0
  fi
  param=$(getValidParams)
  #handle --task param
  if [[ ($(isTask) == "1") && (${param} != "invalid") ]]; then
    if [[ (${cur} == "=") || (${cur} == "")  || (${cur} == "\"")  ]] ; then
      COMPREPLY=(${taskArr[*]})
      return 0
    else
    #if [[ (${prev} == "=") && (${cur} != "" )  ]] ; then
      res=$(compgen -W "${taskArr[*]}" -- ${cur})
      if [[ (${res} =~ "publish:") || (${cur} =~ "publish:") ]]; then
        COMPREPLY=( $(compgen -W "publish:iOS publish:Android publish:iOS,Android publish:Android,iOS" -- ${cur}) )
      elif [[ "" != ${res} ]]; then
        COMPREPLY=( ${res} )
        return 0
      fi
    fi
  elif [[ ( ${taskPhase} == "${taskAndroid}" ) ]]; then
    
    if [[ (${cur} == -* ) && (${param} != "invalid")  ]]; then
      checkReduceParams androidPublishParamArr[@] 
      COMPREPLY=($(compgen -W "${globalReplyArr[*]}" -- ${cur}))
      return 0
    else 
      handleParam ${param}
    fi
  elif [[ ( ${taskPhase} == "${taskiOS}" ) ]]; then
    if [[ (${cur} == -* ) && (${param} != "invalid") ]]; then
      checkReduceParams iOSPublishParamArr[@] 
      COMPREPLY=($(compgen -W "${globalReplyArr[*]}" -- ${cur}))
      return 0
    else 
      handleParam ${param}
    fi
  elif [[ ( ${taskPhase} == "${taskCreateiOSPlugin}" ) ]]; then
    if [[ (${cur} == -* ) && (${param} != "invalid") ]]; then
      checkReduceParams iOSCreateiOSPlugin[@] 
      COMPREPLY=($(compgen -W "${globalReplyArr[*]}" -- ${cur}))
      return 0
    else 
      handleParam ${param}
    fi
  elif [[ ( ${taskPhase} == "${taskGenerateiOSPluginZip}" ) ]]; then
    if [[ (${cur} == -* ) && (${param} != "invalid") ]]; then
      checkReduceParams iOSGenerateiOSPluginZip[@] 
      COMPREPLY=($(compgen -W "${globalReplyArr[*]}" -- ${cur}))
      return 0
    else 
      handleParam ${param}
    fi
  elif [[ ( ${taskPhase} == "${taskGenerateAndroidPluginZip}" ) ]]; then
    if [[ (${cur} == -* ) && (${param} != "invalid") ]]; then
      checkReduceParams androidGenerateiOSPluginZip[@] 
      COMPREPLY=($(compgen -W "${globalReplyArr[*]}" -- ${cur}))
      return 0
    else 
      handleParam ${param}
    fi
  elif [[ ( ${taskPhase} == "${taskPublishBothofThem}" )  ]]; then
    if [[ (${cur} == -* ) && (${param} != "invalid") ]]; then
        checkReduceParams publishBothofThemParamArr[@]
        COMPREPLY=($(compgen -W "${globalReplyArr[*]}" -- ${cur}))
        return 0
    else 
      handleParam ${param}
    fi
  fi
}

complete -F  _smfc smfc
complete -F  _smfc smartface

fi
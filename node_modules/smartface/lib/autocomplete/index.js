"use strict";
const fs = require("fs");
const path = require("path");
const PLATFORM = require("os").platform();

const regexpForSetup = /# begin smartface[\s\S]*# end smartface installation #/gmi;
const SMFC_SH = path.join(__dirname, "smfc.sh");
const SHELL = process.env.SHELL.split('/').slice(-1)[0];
const DEST = SHELL === 'zsh' ? 'zshrc' : SHELL === 'bash' ? 'bashrc' : 'fish';

const SCRIPT_FILE = {
	"bashrc": PLATFORM == "darwin" ? ".bash_profile" : ".bashrc",
	"zshrc": PLATFORM == "darwin" ? ".zsh_profile" : ".zshrc",
	"fish": ".config/fish/config.fish"
};

const destFile = path.join(process.env.HOME, SCRIPT_FILE[DEST]);

// install bash-compeltion. 
module.exports.install = function(callback) {

	function done() {
		callback(null, "smartface bash-completion has been installed.");
	}

	readRCFile((err, res) => {
		if (err) {
			return callback(err);
		}
		updatedRCFile(res, "install", (err, res) => {
			if (err) {
				return callback(err);
			}
			done();
		});
	});

};

// uninstall bash-compeltion. 
module.exports.uninstall = function(callback) {

	function done() {
		callback(null, "smartface bash-completion has been removed.");
	}

	readRCFile((err, res) => {
		if (err) {
			return callback(err);
		}
		updatedRCFile(res, "uninstall", (err, res) => {
			if (err) {
				return callback(err);
			}
			done();
		});
	});

};

/**
 * read .rc file
 * @function readRCFile
 * 
 **/
function readRCFile(callback) {
	fs.readFile(destFile, (err, res) => {
		if (err) {
			return callback(err);
		}
		callback(null, res.toString("utf8"));
	});
}
/**
 * update .rc file for install / uninstall operations
 * @function updatedRCFile
 * 
 **/
function updatedRCFile(data, phaseInstallOrUninstall, callback) {

	regexpForSetup.lastIndex = 0;
	var shellStrForSetup = "";
	phaseInstallOrUninstall === "install" && (shellStrForSetup = createShellStrForSetup());

	var res = data.match(regexpForSetup);
	if (!res && (phaseInstallOrUninstall === "install")) {
		data += shellStrForSetup;
	}
	else {
		data = data.replace(regexpForSetup, shellStrForSetup);
	}

	fs.writeFile(destFile, data, "utf8", (err) => {
		callback(err);
	});
}
/**
 * update .rc file for install / uninstall operations
 * @function updatedRCFile
 * @return {string} install shell command
 **/
function createShellStrForSetup() {
	return "# begin smartface installation #\n" + "[ -f " + SMFC_SH +
		" ] && . " + SMFC_SH + "\n# end smartface installation #";
}

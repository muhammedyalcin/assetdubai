const fs = require('fs');
const mkdirp = require('mkdirp');
const parsers = require('./parse');
const utility = require('../utility');
const killProcess = utility.killProcess;
const generateUUID = utility.generateUUID;
const Des3 = require('../3des');
const globalData = require('../globalData');

function createSmfBinaryFiles(playerSpecific, confObj, saveDir, orientation, callback) {
	const attributes = playerSpecific.json_attr.Application.string[0].attributes;
	const smfObj = playerSpecific.getSmfBinaryStructure();

	var configAffectingBuffers = {
		splash: [],
		data: []
	};
	var uuids = {
		splash: generateUUID(),
		data: generateUUID()
	};
	for (var i = 0; i < attributes.length; i++) {
		var key = attributes[i];
		var buf;
		if (key === 'UUID') {
			buf = parsers.string(uuids.data);
			configAffectingBuffers.data.push(buf);
			buf = parsers.string(uuids.splash);
			configAffectingBuffers.splash.push(buf);
		} else if (key === 'IosGeocodingKey'){
			buf = parsers.string('');
			configAffectingBuffers.data.push(buf);
			configAffectingBuffers.splash.push(buf);
		} else {
			buf = parsers.string(confObj[key]);
			configAffectingBuffers.data.push(buf);
			configAffectingBuffers.splash.push(buf);
		}
	}
	var orientationAsNumber = 4;
	if (orientation.portrait === true) {
		orientationAsNumber = orientationAsNumber | 0x40;
	}
	if (orientation.upsideDown === true) {
		orientationAsNumber = orientationAsNumber | 0x20;
	}
	if (orientation.landScapeLeft === true) {
		orientationAsNumber = orientationAsNumber | 0x10;
	}
	if (orientation.landScapeRight === true) {
		orientationAsNumber = orientationAsNumber | 0x08;
	}
	const orientationText = orientationAsNumber.toString(16);
	const hex_str_buf0_data = new Buffer(smfObj[0].data, 'hex');
	const hex_str_buf0_splash = new Buffer(smfObj[0].splash, 'hex');
	const hex_str_buf1_splash = Buffer.concat(configAffectingBuffers.splash);
	const hex_buf1_splash = new Buffer(hex_str_buf1_splash, 'hex');
	const hex_str_buf1_data = Buffer.concat(configAffectingBuffers.data);
	const hex_buf1_data = new Buffer(hex_str_buf1_data, 'hex');
	const hex_str_buf2_data = new Buffer(smfObj[2].data, 'hex');
	const hex_str_buf2_splash = new Buffer(smfObj[2].splash, 'hex');
	const hex_str_buf_orientation_both = new Buffer(orientationText, 'hex');
	const hex_str_buf3_data = new Buffer(smfObj[3].data, 'hex');
	const hex_str_buf3_splash = new Buffer(smfObj[3].splash, 'hex');
	const hex_str_buf4_both = new Buffer(smfObj[4].both, 'hex');
	const hex_str_buf5_data = new Buffer(smfObj[5].data, 'hex');
	const bufferData = Buffer.concat([hex_str_buf0_data, hex_buf1_data, hex_str_buf2_data, hex_str_buf_orientation_both, hex_str_buf3_data, hex_str_buf4_both, hex_str_buf5_data]);
	const bufferSplash = Buffer.concat([hex_str_buf0_splash, hex_buf1_splash, hex_str_buf2_splash, hex_str_buf_orientation_both, hex_str_buf3_splash, hex_str_buf4_both]);

	const des3 = new Des3();
	const encryptKey = confObj.tripleDesKey;

	fs.writeFile(saveDir + 'data-unencrypted.smf', bufferData, function() {
		fs.writeFile(saveDir + 'splash-unencrypted.smf', bufferSplash, function() {
			des3.encryptFileWith3DES_ECB(saveDir + 'data-unencrypted.smf', encryptKey, saveDir + 'data.smf');
			des3.encryptFileWith3DES_ECB(saveDir + 'splash-unencrypted.smf', encryptKey, saveDir + 'splash.smf');
			callback();
		});
	});
}

function create(callback) {
	const platform = globalData.get('args.platform');
	if (platform === 'win32') {
		// workspace is not valid
		return callback();
	}
	var PLAYER_VERSION = globalData.get('PLAYER_VERSION');
	if (!PLAYER_VERSION) {
		PLAYER_VERSION = '4.4.0';
		globalData.set('PLAYER_VERSION', PLAYER_VERSION);
	}
	const playerSpecific = require('./data/' + PLAYER_VERSION + '/index');
	const iosConfig = globalData.get('iosConfig');
	const androidConfig = globalData.get('androidConfig');
	if (iosConfig) {
		globalData.set('iosConfig.config2.fileVersion', playerSpecific.RUNTIME_VERSION);
		globalData.set('iosConfig.sasVersion', PLAYER_VERSION);
	} else if (androidConfig) {
		globalData.set('androidConfig.config2.fileVersion', playerSpecific.RUNTIME_VERSION);
	}
	var confObj = playerSpecific.createConfObject();
	var saveDir;
	const task = globalData.get('args.task');
	const processedArgs = globalData.get('processedArgs');
	if (task === 'Android-publish') {
		saveDir = globalData.get('androidConfig.androidConfig.input.builder.tmpFolder');
		confObj.tripleDesKey = globalData.get('androidConfig.tripleDes.key');
	} else if (task === 'iOS-publish') {
		saveDir = globalData.get('processedArgs.outputTempFolder');
		confObj.tripleDesKey = globalData.get('iosConfig.tripleDes.key');
	}
	const orientation = globalData.get('processedArgs.config_json.config.orientation');
	mkdirp(saveDir, function(err) {
		if (err) {
			killProcess(err);
		} else {
			createSmfBinaryFiles(playerSpecific, confObj, saveDir, orientation, callback);
		}
	});
}

exports.create = create;

const path = require("path");

const WebSocket = require('ws');

const getLinkCBM = require("./cbcApi").getLinkCloudBuildMachine;
const handleWSCommands = require("./commandHandler");
const uploderForiOSBuild = require("./ios/iOSBuild");
const andBuild = require("./android/androidBuild");
const utility = require("../utility");

function startBuild(host, responseResult, token, cloudBuildConfig) {
  var outputs = cloudBuildConfig.config.profiles ?
    prepareExpectedAndroidOutputs(cloudBuildConfig.config.profiles,
      cloudBuildConfig.config.channels, cloudBuildConfig.outputPath) :
    prepareExpectedOutputs(cloudBuildConfig.config.channels,
      cloudBuildConfig.outputPath, cloudBuildConfig.outputExt);
  var uuid = parseForUUID(responseResult);
  var ws = new WebSocket('ws://' + host + ':8080/' + uuid);
  return handleWSCommands(ws, token, outputs, cloudBuildConfig);
}

function parseForUUID(resStr) {
  var uuid = resStr.substring(resStr.indexOf(":") + 1, resStr.indexOf("\n"));
  return uuid;
}

function prepareExpectedOutputs(channels, outputPath, ext) {
  var res = [];
  var pathObj = path.parse(outputPath);
  channels.forEach(channel => {
    pathObj.base = pathObj.name + (channel ? (" - " + channel) : "") + "." + ext;
    res.push(path.format(pathObj));
  });
  return res;
}

function prepareExpectedAndroidOutputs(profiles, channels, _outputPath) {
  var res = [];
  for (var i = 0; i < profiles.length; ++i) {
    for (var j = 0; j < channels.length; ++j) {
      var outputPath = utility.createOutPathByTheProfile(_outputPath, profiles[i]);
      res.push(utility.outputPathByChannel(outputPath, channels[j]));
    }
  }
  return res;
}


function init(token, os, cloudBuildConfig) {
  if (os === "iOS" || cloudBuildConfig.workspaceZip) {
    cloudBuildConfig.config.env =  process.env.REGION; 
    return getLinkCBM(token, os).then(host => {
      if (os === "iOS") {
        return uploderForiOSBuild(host, token, cloudBuildConfig).then(resStr => {
          return startBuild(host, resStr, token, cloudBuildConfig);
        }, err => {
          throw {
            err: "Cloud Build Request Error",
            msg: err.toString()
          };
        });
      }
      else { // full android cloud build (apk creation)
        return andBuild
          .uploadForCloudBuild(host, token, cloudBuildConfig)
          .then(resStr => {
            return startBuild(host, resStr, token, cloudBuildConfig);
          }, err => {
            throw {
              err: "Cloud Build Request Error",
              msg: err.toString()
            };
          });
      }
    }, err => {
      err.err = "Cloud Build Coordinator Error";
      err.msg = err.toString();
      throw err;
    });
  }
  else { //keystore operations for android.
    cloudBuildConfig.authorization = token;
    return andBuild.configureForSigner(cloudBuildConfig);
  }
}



module.exports = init;

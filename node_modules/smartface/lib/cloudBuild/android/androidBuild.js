const path = require("path");

const jsLint = require("jsonlint");

const cpRunner = require("../../childProcessRunner");
const globalData = require("../../globalData");
const apiService = require("./apiService");
const upload = require("../uploader");
const md5 = require("../fileService").md5;

const NODE_MOD_ROOT = globalData.get('moduleGlobals.root');
const listAliasesExecPath = path.join(NODE_MOD_ROOT, "bin", "listAliases.jar");

/**
 * @function getAlias
 * return aliasname.
 * @param opt {object} options for listAliases.
 * @return aliasname {string}
 */
function getAlias(opt) {
  return new Promise((resolve, reject) => {
    listAliases(opt).then(aliases => {
      var aliassesStr = aliases.output;
      try {
        resolve(jsLint.parse(aliassesStr)[0]);
      }
      catch (e) {
        reject(e);
      }
    }, reject);
  });
}

/**
 * @function configureForSigner
 *  configure signer for cloud build.
 * @param opt {object} options for downloadkeystore.
 * @return aliasname {string}
 */
function configureForSigner(opt) {
  return new Promise((resolve, reject) => {
    //TODO download keystore file with fileService.
    var andSignerCfg = globalData.get("androidConfig.androidConfig.input.sign");
    opt.keystoreFile = path.join(globalData.get("moduleGlobals.tmpdir"), "cloud.keystore");
    apiService
      .downloadKeyStoreFile(opt)
      .then(keystoreOptions => {
        Object.assign(opt, keystoreOptions);
        getAlias(opt).then(alias => {
          andSignerCfg.aliasName = alias;
          andSignerCfg.keyPass = opt.keyPass;
          andSignerCfg.keystoreFile = opt.keystoreFile;
          andSignerCfg.keystorePass = opt.keystorePass;
          resolve("sign configure completed.");
        }, reject);
      }, reject);
  });
}


// @private.
// list aliases of keystore file
function listAliases(opt) {
  var options = {
    cwd: globalData.get("moduleGlobals.tmpdir"),
    cmd: "java",
    opt: {
      cwd: opt.cwd
    },
    args: ["-jar", listAliasesExecPath, opt.keystoreFile, opt.keystorePass]
  };
  return cpRunner(options);
}



function uploadForCloudBuild(_host, token, cloudBuildConfig) {
	var options = {
		host: _host,
		path: "/build",
		headers: {
			Authorization: token
		},
		method: "post",
		port: 8080
	};

	if (process.env.SMF_CBM_LINK) {
		cloudBuildConfig.config.logToConsole = true;
	}
	
	return md5(cloudBuildConfig.playerPath).then(hash => {
		cloudBuildConfig.config.playerHash = hash;
		var sources = [{
			"name": "workspaceZip",
			"path": cloudBuildConfig.workspaceZip
		}, {
			"name": "config",
			"value": JSON.stringify(cloudBuildConfig.config)
		}];

		return upload(sources, options);

	}, err => {
		throw err;
	});

}


module.exports = {
  getAlias: getAlias,
  configureForSigner: configureForSigner,
  uploadForCloudBuild: uploadForCloudBuild
};

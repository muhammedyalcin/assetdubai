const os = require('os');
const fs = require('fs');
const path = require('path');
const tag = require('./tag');

const _ = require('underscore');

const utility = require('../utility');

const Collector = (function collector() { // collector for  intearactive-cli can run on smartface-cli-tool
	var answered = require('./answered');
	var args = {};

	function collect() { //C:\Users\user\Documents\GitHub\smfc-sample
		args = {};
		_.extend(args, {
			//"autoPlay": "1",
			"task": answered.task,
			"projectRoot": answered.projectRoot,
			"logStdOut": "json"
		});
		if (!answered.isDemoLicense()) {
			_.extend(args, {
				"licenseFile": createLicenseFile()
			});
		}
		collectPlugins();
		collectByTask(answered.task);
		return args;
	}

	function collectByTask(task) {
		if (task === 'Android-publish') {
			collectAndroid();
		} else if (task === 'iOS-publish') {
			collectiOS();
		} else if (task === 'Check-Publish-Rules-iOS'){
			collectPublishRulesiOS();
		} else if (task === 'Check-Publish-Rules-Android'){
			collectPublishRulesAndroid();
		} else if (task === tag.def.TASK.GENERATE_IOS_PLUGIN) {
			collectiOSPluginDev();
		} else if (task === tag.def.TASK.GENERATE_ANDROID_PLUGIN) {
			collectAndroidPluginDev();
		} else if (task === tag.def.TASK.CREATE_IOS_PLUGIN) {
			collectCreateiOSPluginDev();
		}
	}

	function createLicenseFile() { // write license in temp.
		const tempFolder = path.join(os.tmpdir(), utility.generateUUID());
		utility.mkdirpSync(tempFolder);
		const licenseFile = path.join(tempFolder, 'data2.sfd');
		fs.writeFileSync(licenseFile, answered.licenseData);
		answered.licenseFolder = tempFolder;
		return licenseFile;
	}

	function collectPublishRulesAndroid() {
		if (answered !== null) {
			args = {
				"task": answered.task,
				"projectRoot": answered.projectRoot,
				"logStdOut": "json",
				"killProcessonError": true
			};
		}
	}

	function collectPublishRulesiOS() {
		if (answered !== null) {
			args = {
				"task": answered.task,
				"projectRoot": answered.projectRoot,
				"logStdOut": "json",
				"killProcessonError": true
			};
		}
	}

	function collectAndroid() {
		if (answered !== null) {
			_.extend(args, {
				"profile": collectProfiles()
			});
		}
	}

	function collectPlugins() {
		_.extend(args, {
			"plugin": answered.plugins
		});
	}

	function collectiOS() {
		if (answered !== null) {
			_.extend(args, {});
		}
	}

	function collectiOSPluginDev() {
		args = {
			"task": "generate_iOSPluginZip",
			"path": answered.iOSPluginDeveloper.path,
			"logStdOut": "json"
		};
	}

	function collectAndroidPluginDev() {
		args = {
			"task": "generate_AndroidPluginZip",
			"path": answered.androidPluginDeveloper.path,
			"apkPath": answered.androidPluginDeveloper.playerAndroid,
			"logStdOut": "json"
		};
	}

	function collectCreateiOSPluginDev() {
		args = {
			task: "create_iOSPlugin",
			"path": answered.iOSPluginDeveloperCreate.path,
			"logStdOut": "json"
		};
	}

	function collectProfiles() { // profiles collector.
		const arm = 'arm:';
		var armList = [];
		const x86 = 'x86:';
		var x86List = [];
		_.each(answered.android.profiles, function(profile) {
			const parts = profile.split(' - ');
			if (parts[0] === 'ARM') {
				armList.push(parts[1]);
			} else {
				x86List.push(parts[1]);
			}
		});
		if (armList.length === 0 && x86List.length !== 0) {
			return x86 + x86List.join(',');
		} else if (x86List.length === 0 && armList.length !== 0) {
			return arm + armList.join(',');
		} else if (x86List.length === 0 && armList.length === 0) {
			return undefined; // there is not profile.
		} else {
			return arm + armList.join(',') + ';' + x86 + x86List.join(',');
		}
		return undefined;
	}
	return {
		collect: collect
	};
})();

module.exports = Collector;
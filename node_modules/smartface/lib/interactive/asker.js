const path = require('path');

const _ = require('underscore');
const inquirer = require("inquirer");

const answered = require('./answered');
const Default = require('./tag'); // get Defaults
const utility = require('../utility');
const requireJSON = require('../requireJSON');
const error = require("../error");

/**
 *  questioner with inquirer.js
 */
function asker(question, callback, opt) { // create question.
	var midObj = null,
		fake = null,
		waitMsg = false;

	if (opt) {
		opt.midObj && (midObj = opt.midObj);
		opt.opt && _.extend(question, opt.opt);
		opt.fake && (fake = opt.fake);
		opt.waitMsg && (waitMsg = opt.waitMsg);
	}

	if (fake) {
		fake(function() {
			_asker();
		});
	}
	else {
		_asker();
	}

	function _asker() {
		if (waitMsg) {
			require('./ui').wait(question.description);
		}
		inquirer.prompt(question).then(function(answer) {
			if (midObj) { // maybe android || auth
				answered[midObj][question.name] = answer[question.name];
			}
			else {
				answered[question.name] = answer[question.name];
			}
			callback(callback);
		}, function(err) {
			utility.killProcess(error.getObject("unexpected"), {
				msg: {
					msg: err.toString()
				}
			});
		});
	}
}

const QUESTIONS = (function() {
	var questionObj = requireJSON(__dirname, './questions.json');
	const fitDescriptionSize = (function() {
		var fitDescriptionSize = 0;
		_.each(_.keys(questionObj), function(item) { // find size for UI arrows.
			const len = (!questionObj[item].description) ? 0 : questionObj[item].description.length;
			if (len > fitDescriptionSize) {
				fitDescriptionSize = len;
			}
		});
		return fitDescriptionSize;
	})();
	_.extend(questionObj, {
		fitDescriptionSize: fitDescriptionSize
	});
	const WORKSPACE = Default.def.WORKSPACE;
	const TASK = Default.def.TASK;
	const LICENSE = Default.def.LICENSE;
	const ANDROID = Default.def.ANDROID;
	const iOS = Default.def.iOS;

	function setDefaults() { // set some defaults value.
		const playerDir = path.resolve(__dirname, '../../bin');
		var questionAndroid = questionObj.android;
		var questioniOS = questionObj.iOS;
		questionObj.chdir.default = 'y';
		questionObj.task.default = TASK.LOGIN;
		questionObj.workspace.default = WORKSPACE.SMFC;
		questionObj.license.default = LICENSE.DEMO;
		questionObj.projectRoot.default = '.';
		questionAndroid.playerArm.default = path.join(playerDir, 'SmartfacePlayer.apk').replace(/\\/gmi, '/');
		questionAndroid.playerx86.default = path.join(playerDir, 'SmartfacePlayer-x86.apk').replace(/\\/gmi, '/');
		questioniOS.playeriOS.default = path.join(playerDir, 'iOS_Player.zip').replace(/\\/gmi, '/');
		questionObj.iOSPluginDeveloper.playeriOS.default = path.join(playerDir, 'iOS_Player.zip').replace(/\\/gmi, '/');
		questionObj.iOSPluginDeveloper.path.default = ".";
		questionObj.iOSPluginDeveloperCreate.playeriOS.default = path.join(playerDir, 'iOS_Player.zip').replace(/\\/gmi, '/');
		questionObj.androidPluginDeveloper.path.default = ".";
	}
	setDefaults();
	return questionObj;
})();

module.exports = {
	asker: asker,
	QUESTIONS: QUESTIONS
}
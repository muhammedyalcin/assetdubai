const fs = require('fs');
const path = require('path');

const inquirer = require("inquirer");
const colors = require('colors');
const _ = require('underscore');

const utility = require('../utility');
const requireJSON = require('../requireJSON');
const checker = require('../check');
const repeatStr = utility.repeatStr;
const convertAbsolute = utility.convertAbsolute.convert;
const QUESTIONS = require('./asker').QUESTIONS;
const ANDROID_QUESTIONS = QUESTIONS.android;
const IOS_QUESTIONS = QUESTIONS.iOS;


const UI = (function _UI() { // modul writer for informations
	const UIJSON = requireJSON(__dirname, './ui.json');
	const color = UIJSON.color;
	const message = UIJSON.message;
	var completeList = [];
	var completedIndex = -1;
	const version = getVersion();
	const answered = require('./answered');
	const OK = '√';
	var USER_INTERFACE = true; // enable GUI.
	var USER_COLOR = true; // enable colors.
	const clearConsole = '\033c';
	const hideCursor = '\x1b[?25l'; // cursor hide.
	const showCursor = '\x1b[?25h'; // cursor show.
	var HINT_ENABLE = false;

	if (process.platform === 'win32' && !process.env.ConEmuANSI && process.env.ConEmuANSI != 'ON') {
		OK = 'OK';
	}

	const Hint = (function() {
		return {
			enable: function() {
				HINT_ENABLE = true;
			},
			disable: function() {
				HINT_ENABLE = false;
			}
		};
	})();

	function createSelfFunction(func) {
		if (USER_INTERFACE) {
			return func;
		} else {
			return function() {};
		}
	}

	function getVersion() {
		return requireJSON(__dirname, '../../package.json').version;
	}

	function header() { // Hedaer.
		write(color.header, '\n  ' + message.header + ', ' + message.version, true);
		write(color.version, ' ' + version, true);
		write('blue', '  ', true);
		write('yellow', '\n', true);
		if (HINT_ENABLE) {
			write(color.hint, '  ( ' + message.hint + ' )\n');
		} else {
			console.log();
		}
	}

	function complete(str) { // update informations
		var tempStr = '';
		process.stdout.write(clearConsole); // clear console.
		process.stdout.write(hideCursor);
		header(version);
		if (str) {
			tempStr += createOK();
			tempStr += createStr('bold', createStr(color.key, str + '  '));
			for (var i = 0; i < QUESTIONS.fitDescriptionSize - str.length; ++i) {
				tempStr += createStr(color.arrow, '-');
			}
			tempStr += createStr(color.arrow, '→  ');
			tempStr += createStr(color.value, getValues(str));
			completeList[++completedIndex] = tempStr;
		}
		console.log(completeList.join('\r\n'));
		process.stdout.write(showCursor);
	}

	function completedError(str) {
		var msg = createStr(color.error, '  X  ');
		if (OK === 'OK') {
			msg += createStr(color.error, ' ');
		}
		msg += createStr(color.key, str + '  ');
		for (var i = 0; i < QUESTIONS.fitDescriptionSize - str.length; ++i) {
			msg += createStr(color.arrow, '-');
		}
		if (QUESTIONS.fitDescriptionSize - str.length > 0) {
			msg += createStr(color.arrow, '→  ');
		}
		msg += createStr('bold', createStr(color.error, getValues(str)));
		console.log(msg);
	}

	function decreaseCompletedIndex() {
		if (completedIndex > -1) {
			completeList.splice(completedIndex--, 1);
		}
	}

	function reset() {
		process.stdout.write('\033c'); // clear console.
		completeList = [];
		completedIndex = -1;
		if (answered.login.response) {
			complete(QUESTIONS.login.username.description);
		}
	}

	function createOK() {
		return createStr(color.ok, '  ' + OK + '  ');
	}

	function pushComplete(str) {
		completeList.push(str);
	}

	function wait(str) { // next question ,write yellow 
		write(color.wait, '\r\n  »  ', true);
		write(color.wait, str + '\n', true);
	}

	function error(str) {
		write(color.error, '  !  ', true);
		write(color.error, str + '\n', true);
	}

	function createStr(color, str) {
		if (USER_COLOR) {
			return colors[color](str);
		} else {
			return str;
		}
	}

	function write(color, str, isRaw) {
		var msg;
		if (USER_COLOR) {
			msg = colors[color](str);
		} else {
			msg = str;
		}
		if (isRaw) {
			process.stdout.write(msg);
		} else {
			console.log(msg);
		}
	}

	function writeEnvDep() { // write environments & dependencies frame.
		const env = checker.EnvDep.getEnvResultsForUI();
		const dep = checker.EnvDep.getDepResultsForUI();
		const fitSize = findMaxLen() + 5;
		const maxSize = 37;
		const pad = '  ';
		const padLen = pad.length;
		complete();
		console.log(createStart());
		console.log(createHeader('Environments', env.stat));
		_.each(env.env, function(item) {
			console.log(createEnvResult(item));
		});
		if (checker.EnvDep.checkNeedDependencies()) { // is machine valid ?
			console.log(createHeader('ia32-libs Dependencies', dep.stat));
			_.each(dep.dep, function(item) {
				console.log(createEnvResult(item));
			});
		}
		console.log(createEnd());

		function createEnvResult(_envOne) { // env | dep frame.
			var okRes = getResLogo(_envOne.stat);
			const version = _envOne.version;
			if (OK.length === 2 && _envOne.stat === 'no') {
				okRes = " " + okRes;
			}
			var str = pad + getFrame('├────') + pad + okRes + pad + getName(_envOne.name) +
				repeatStr(' ', fitSize - (_envOne.name.length)) +
				getVersion(version);
			str += repeatStr(' ', maxSize - (str.length - 40)) + getFrame(' │ ');
			return str;

			function getName(text) { // wrap with color
				return createStr(color.checkKey, text);
			}

			function getVersion(vers) { // wrap with color
				if (!vers) {
					return createStr(color.none, ' ');
				}
				if (vers === 'none') {
					return createStr(color.none, vers);
				}
				return createStr(color.checkVersion, vers);
			}

		}

		function findMaxLen() { // find fit size for UI
			return _.max(env.env, function(item) {
				return item.name.length;
			}).name.length;
		}

		function getFrame(_f) { // wrap color.checkFrame
			return createStr(color.checkFrame, _f);
		}

		function createHeader(headerText, stat) { // hedaer frame
			var resStr = [];
			var okRes = getResLogo(stat, true);
			if (okRes.length === 20) {
				okRes = ' ' + okRes + ' ';
			} else {
				okRes = ' ' + okRes;
			}

			resStr.push(pad + getFrame('├───┐') + repeatStr(' ', maxSize - (padLen + 5)) + getFrame(' │ \r\n'));
			resStr.push(pad + getFrame('│') + okRes + getFrame('├──') + pad + headerText + pad);
			resStr.push(repeatStr(getFrame('─'), maxSize - (resStr[1].length - 40)) + getFrame('┤ \r\n'));
			resStr.push(pad + getFrame('├───┘') + repeatStr(' ', maxSize - (padLen + 5)) + getFrame(' │ '));
			return resStr.join('');
		}
		/*
		function cretateNoNeedDep() { // none dep frame
			return pad + getFrame('├ ') + message.noNeedDep +
				repeatStr(' ', maxSize - (padLen + message.noNeedDep.length + 2)) +
				getFrame(' │');
		}
         */
		function createStart() { // start frame
			return pad + getFrame('┌') +
				repeatStr(getFrame('─'), maxSize - padLen) + 
				getFrame('┐');
		}

		function createEnd() { // end frame
			return pad + getFrame('└') +
				repeatStr(getFrame('─'), maxSize - padLen) + 
				getFrame('┘\r\n');
		}



		function getResLogo(stat, isBold) { // wrap colors &| bold
			var res;
			switch (stat) {
				case 'ok':
					res = createStr(color.ok, OK);
					break;
				case 'no':
					res = createStr(color.error, 'X');
					break;
				case 'warn':
					res = createStr(color.warn, '!');
					break;
			}
			if (isBold) {
				res = createStr('bold', res);
			}
			return res;
		}
	}
	// create file path with colors
	function errorFilePath(_input) {
		return '  ' + createStr('gray', convertAbsolute(_input));
	}

	function getValues(name) {
		var res;
		switch (name) {
			case 'project sfpx':
				res = answered.sfpx;
				break;
			case ANDROID_QUESTIONS.java.description:
				res = answered.android.java;
				break;
			case ANDROID_QUESTIONS.playerArm.description:
				res = answered.android.playerArm;
				break;
			case ANDROID_QUESTIONS.playerx86.description:
				res = answered.android.playerx86;
				break;
			case ANDROID_QUESTIONS.profiles.description:
				res = answered.android.profiles.join(', ');
				break;
			case IOS_QUESTIONS.playeriOS.description:
				res = answered.iOS.playeriOS;
				break;
			case QUESTIONS.license.description:
				res = answered.license;
				break;
			case QUESTIONS.login.username.description:
				res = answered.login.username;
				break;
			case QUESTIONS.logout.description:
				res = answered.login.username;
				break;
			case QUESTIONS.plugin.description:
				if (answered.pluginNames.length !== 0) {
					res = answered.pluginNames[answered.pluginNames.length - 1];
				} else {
					res = (answered.plugin && 'Yes') || 'No';
				}
				break;
			case QUESTIONS.projectRoot.description:
				res = answered.projectRoot;
				break;
			case QUESTIONS.sampleProjects.description:
				res = answered.sampleProjects;
				break;
			case QUESTIONS.task.description:
				res = answered.task;
				break;
			case QUESTIONS.workspace.description:
				res = answered.workSpaceType;
				break;
			case QUESTIONS.iOSPluginDeveloper.path.description:
				res = answered.iOSPluginDeveloper.path;
				break;
			case QUESTIONS.androidPluginDeveloper.path.description:
				res = answered.androidPluginDeveloper.path;
				break;
			case QUESTIONS.iOSPluginDeveloperCreate.path.description:
				res = answered.iOSPluginDeveloperCreate.path;
				break;
			case QUESTIONS.androidPluginDeveloper.playerAndroid.description:
				res = answered.androidPluginDeveloper.playerAndroid;
				break;
			default:
				res = answered[name];
				if (!res) {
					res = '';
				}
		}
		return res;
	}
	const BottomBar = (function() {
		var bar = null;
		const _pad = '    ';

		function update(_color, str) {
			bar = bar || new inquirer.ui.BottomBar();
			var msg;
			if (_color) {
				msg = colors[_color](_pad + str);
			} else {
				msg = str;
			}
			bar.updateBottomBar(msg);
		}
		return {
			update: update
		}
	})();

	return {
		complete: createSelfFunction(complete),
		wait: createSelfFunction(wait),
		write: createSelfFunction(write),
		writeEnvDep: writeEnvDep,
		error: createSelfFunction(error),
		errorFilePath: errorFilePath,
		completedError: completedError,
		decreaseCompletedIndex: decreaseCompletedIndex,
		reset: reset,
		bottomBar: BottomBar,
		version: version,
		header: header,
		createStr: createStr,
		pushComplete: pushComplete,
		createOK: createOK,
		color: color,
		message: message,
		spinner: require('../spinner'),
		hint: Hint
	};
})();

module.exports = UI;
const spawn = require('child_process').spawn;
const path = require('path');

const _ = require('lodash');
const parseEachJSON = require("ws-json-organizer");

const collector = require('./collector');
const getProfileType = require('../utility').getProfileType;
const repeatStr = require('../utility').repeatStr;
const answered = require('./answered');
const spinner = require('../spinner');

function prepareParams() {
	var params = [path.join(__dirname, '../../bin/global-exec')];
	const args = collector.collect();
	_.each(_.keys(args), function(item) {
		if (item === 'plugin') {
			_.each(args[item], function(_item) {
				params.push('--' + item + '=' + _item);
			});
		}
		else {
			if (args[item]) {
				params.push('--' + item + '=' + args[item]);
			}
		}
	});
	return params;
}

function run(callback) {
	const MAX_STEP = 5;
	var enabledFinish = false;
	const UI = require('./ui');
	const crtStr = UI.createStr;
	const ok = UI.createOK;
	const color = UI.color;
	const uiMsg = UI.message;
	var params = prepareParams();

	const child = spawn('node', params);
	if (!child || !child.stdout) {
		throw new Error('Child Error');
	}
	var incomingData = '';
	var updateStr = '';
	var counter = 0;
	const _pad = '  ';
	var countEmptyStep = 0;
	var downloadFilePath = '';
	var currProcesStr = 'checking';
	var responseDone = false;
	var androidStr = 'Android Publish -> Profile: ';
	var fitLength = androidStr.length + answered.getFitLengthProfiles() + 5;
	var jsonObj;
	var jsonObjArr = [];
	params.shift();
	UI.pushComplete('\n  smfc ' + params.join(' '));
	child.stdout.on('data', function(_data) {
		parseEachJSON(_data.toString('utf8'),function(err,_jsonObj){
			if(!err){
				jsonObjArr = jsonObjArr.concat(_jsonObj);
			}
		})
	});
	process.stdout.write('\x1b[?25l'); // cursor hide.
	writeFeedBackToConsoleWithClearLine(uiMsg.waitMessage);
	spinner.start();
	var updater = setInterval(function() { // start updater.
			if (jsonObjArr.length) {
				jsonObj = jsonObjArr.shift();
				counter = 0;
				countEmptyStep = 0;
				if (jsonObj.err) { // receive error object.
					spinner.stop();
					answered[currProcesStr] = jsonObj.err;
					UI.complete();
					UI.completedError(currProcesStr);
					console.log();
					UI.error(jsonObj.msg);
					if (jsonObj.fullPath) {
						console.log(UI.errorFilePath(jsonObj.fullPath));
					}
					if (jsonObj.helpForUser) {
						console.log('  help?: ' + jsonObj.helpForUser);
					}
					// process.exit();
				}
				else if (jsonObj.nextProfile) { // receive start new task.
					spinner.stop();
					UI.complete();
					currProcesStr = androidStr + getProfileType(jsonObj.x86) +
						' - ' + jsonObj.nextProfile + ' ... ';

					UI.wait(currProcesStr);
				}
				else if (jsonObj.nextIOS) { //receive start new task.
					spinner.stop();
					UI.complete();
					currProcesStr = 'iOS Publish ... ';
					UI.wait(currProcesStr);
				}
				else if (jsonObj.downloadFilePath) { // receive output path
					downloadFilePath = path.normalize(jsonObj.downloadFilePath);
				}
				else if (jsonObj.msg) {
					spinner.stop();
					writeFeedBackToConsoleWithClearLine(jsonObj.msg);
					spinner.start();
				}
				else if (jsonObj.pluginTask) {
					spinner.stop();
					UI.complete();
					currProcesStr = 'Plugin task ...';
					UI.wait(currProcesStr);
				}
				if (jsonObj.responseDone) { //receive finish current task.
					spinner.stop();
					responseDone = jsonObj.responseDone;
					UI.pushComplete(' ');
					if (!jsonObj.ios) {
						UI.pushComplete(ok() + crtStr('bold', crtStr(color.key, currProcesStr.replace('...',
							repeatStr(' ', fitLength - currProcesStr.length) + ': '))) + crtStr(color.ready, uiMsg.readyApk));
					}
					else {
						UI.pushComplete(ok() + crtStr('bold', crtStr(color.key, currProcesStr.replace('...',
							': '))) + crtStr(color.ready, uiMsg.readyXcode));
					}
					UI.pushComplete(_pad + crtStr(color.output, 'Output: ') + crtStr(color.filePath, downloadFilePath));
					UI.pushComplete(' ');
					UI.complete();
					writeFeedBackToConsoleWithClearLine(uiMsg.waitMessage);
					spinner.start();
				}
				if (jsonObj.pluginDone) {
					spinner.stop();
					UI.pushComplete(' ');
					UI.pushComplete(ok() + crtStr('bold', crtStr(color.key, currProcesStr.replace('...',
						': '))) + crtStr(color.ready, jsonObj.msg));
					UI.pushComplete(_pad + crtStr(color.output, 'Output: ') + crtStr(color.filePath, jsonObj.downloadFilePath));
					UI.pushComplete(' ');
					UI.complete();
					spinner.start();
				}
			}
			else {
				if (enabledFinish) {
					++countEmptyStep;
				}
			}
			if (countEmptyStep > MAX_STEP) { // updater finish.
				spinner.stop();
				process.stdout.clearLine();
				process.stdout.cursorTo(0);
				UI.pushComplete(' ');
				/*if (responseDone) {
					UI.write(color.ok, '\n  ' + uiMsg.finalMessage);
				} */
				process.stdout.write('\x1b[?25h'); // cursor show.
				clearInterval(updater); // clear updater.
				callback(null, null);
			}
		},
		70);

	child.stdout.on('end', function(code) {
		enabledFinish = true;
	});


	function wrapStrWithPad(text) {
		return _pad + text + _pad;
	}

	function writeFeedBackToConsoleWithClearLine(text) {
		process.stdout.clearLine();
		process.stdout.cursorTo(0);
		UI.write(color.feedBack, wrapStrWithPad(text), true);
	}


}

module.exports = run;
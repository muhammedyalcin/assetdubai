const os = require('os');
const path = require('path');
const fs = require('fs');

const Logger = require('./lib/log/log4j');
const utility = require('./lib/utility');
const error = require('./lib/error');
const cliModule = require('./lib/cli');
const globalData = require('./lib/globalData');

const regexpLogJSON = /json/i;
deleteApkToolConflictFile();

function deleteApkToolConflictFile() {
	const platform = os.platform();
	var apkPath = "";
	if (platform === 'win32') {
		apkPath = path.join(process.env.USERPROFILE, 'apktool', 'framework', '1.apk');
	}
	else {
		apkPath = '$HOME/Library/apktool/framework/1.apk';
	}

	if (fs.existsSync(apkPath)) {
		fs.unlinkSync(apkPath);
	}
}

function cli(args) {
	utility.LogStatus.setOutJson(regexpLogJSON.test(args.logStdOut));
	if (args.logStdOut && ['json', 'true', 'false', "1", "0"].indexOf(args.logStdOut.toString().toLowerCase()) === -1) {
		var errObj = error.getObject('logStdOut');
		errObj.msg += args.logStdOut;
		utility.killProcess(errObj);
	}
	if (args.logLevel && args.logLevel !== 'none') {
		//if not exists , create log dirs.
		Logger.setLevel(args.logLevel);
		utility.updateLogger();
		Logger.configure();
		if (Boolean(args.logStdOut) && args.logStdOut != 'false' &&
			!(regexpLogJSON.test(args.logStdOut))) {
			Logger.addConsoleAppender();
			utility.LogStatus.setLogStatus(args.logStdOut);
		}
	}

	if (process.env.C9_FULLNAME && !args.maxJavaMemory &&
		((args.task === 'Android-publish') || utility.isRAU("rau", args.task, "android") ||
			utility.isRAU("publish", args.task, "android"))) {
		//console.log("RAU JAVAMAXMEM.");
		Object.defineProperty(args, 'maxJavaMemory', {
			value: '400m',
			writable: true,
			enumerable: true,
			configurable: true
		});
	}
	if (args.task === true) {
		args.task = "true";
	}
	var task = utility.isValidTask(args.task);
	if (task === null) {
		//console.log("other task");
		utility.killProcess(error.getObject('task', {
			msg: {
				task: args.task
			}
		}));
	}
	args.task = task;
	if (!args.platform) {
		args.platform = 'c9';
	}
	else if (['c9', 'win32', 'darwin', 'linux'].indexOf(args.platform) === -1) {
		utility.killProcess(error.getObject('platform.unknown', {
			msg: {
				platform: args.platform
			}
		}));
	}
	if (args.tempFolder) {
		args.tempFolder = path.join(args.tempFolder, '.smfctmp');
	}
	var data = {
		cwd: __dirname,
		args: args,
		config: {},
		moduleGlobals: {
			root: __dirname,
			tmpdir: args.tempFolder || __dirname + '/test-files/output/temp' // temp folder.
		}
	};
	utility.cwd(function(err, dir) {
		if (err) {
			utility.killProcess(error.getObject('cwd'));
		}
		else if (dir) {
			data.cwd = dir;
			data.moduleGlobals.tmpdir = args.tempFolder || path.join(dir,".tmp");
			utility.tmpdir.set(data.moduleGlobals.tmpdir);
			utility.convertAbsolute.setCwd(dir);
			
			// if exist file, add file.  if not exist dirs, craete it.
			if (args.logFile) {
				const absolutePath = utility.convertAbsolute.convert(args.logFile);
				utility.mkdirpSync(path.dirname(absolutePath));
				Logger.addFileAppender(absolutePath);
			}
		}

		process.chdir(__dirname);
		globalData.init(data);
		cliModule.handle_arguments();
	});
}

process.on('uncaughtException', (err) => {
	utility.killProcess({
		err: "Uncaught Exception",
		stack: err.stack,
		msg: err.toString(),
		allDone: true
	});
});

process.on('unhandledRejection', (reason, p) => {
	utility.killProcess({
		err: "Unhandled Rejection",
		stack: reason.stack,
		msg: reason.toString(),
		allDone: true
	});
});

module.exports = cli;

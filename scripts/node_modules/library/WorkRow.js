//------------------------------------------------------------------------------
//
//     This code was auto generated.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//------------------------------------------------------------------------------

const extend = require('js-base/core/extend');
const FlexLayout = extend(require('sf-core/ui/flexlayout'));
const Label = extend(require('sf-core/ui/label'));

function addChild(childName, ChildClass, componentInstance) {
  this.children = this.children || {};
  this.children[childName] = new ChildClass(componentInstance);
  if (this.layout)
    this.layout.addChild(this.children[childName]);
  else
    this.addChild(this.children[childName]);
}
//constructor
function WorkRow(_super, props) {
  // initalizes super class for this component scope
  _super(this, Object.assign({
    id: 8
  }, props));
  addChild.call(this, "detailContainer", $WorkRow$$DetailContainer_, this);
}
WorkRow.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: 90,
    backgroundColor: "rgba( 255, 255, 255, 1 )"
  }
};
const WorkRow_ = FlexLayout(WorkRow);

function $WorkRow$$DetailContainer(_super, pageInstance) {
  _super(this, {
    id: 9
  });
  addChild.call(this, "workData", $WorkRow$$DetailContainer$$WorkData_, pageInstance);
  addChild.call(this, "indicator", $WorkRow$$DetailContainer$$Indicator_, pageInstance);
  addChild.call(this, "line", $WorkRow$$DetailContainer$$Line_, pageInstance);
  pageInstance.detailContainer = this;
}
$WorkRow$$DetailContainer.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: null,
    left: -2.564102564102564,
    top: 14.999999755468124,
    right: 0,
    bottom: 0,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      positionType: "ABSOLUTE",
      justifyContent: "FLEX_END"
    }
  }
};
const $WorkRow$$DetailContainer_ = FlexLayout($WorkRow$$DetailContainer);

function $WorkRow$$DetailContainer$$WorkData(_super, pageInstance) {
  _super(this, {
    id: 10
  });
  addChild.call(this, "workLabels", $WorkRow$$DetailContainer$$WorkData$$WorkLabels_, pageInstance);
  pageInstance.workData = this;
}
$WorkRow$$DetailContainer$$WorkData.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    left: 30,
    bottom: 10,
    width: null,
    height: null,
    top: 0,
    right: 0,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      positionType: "ABSOLUTE"
    }
  }
};
const $WorkRow$$DetailContainer$$WorkData_ = FlexLayout($WorkRow$$DetailContainer$$WorkData);

function $WorkRow$$DetailContainer$$WorkData$$WorkLabels(_super, pageInstance) {
  _super(this, {
    id: 100
  });
  addChild.call(this, "workID1", $WorkRow$$DetailContainer$$WorkData$$WorkLabels$$WorkID1_, pageInstance);
  addChild.call(this, "workID2", $WorkRow$$DetailContainer$$WorkData$$WorkLabels$$WorkID2_, pageInstance);
  addChild.call(this, "workID3", $WorkRow$$DetailContainer$$WorkData$$WorkLabels$$WorkID3_, pageInstance);
  pageInstance.workLabels = this;
}
$WorkRow$$DetailContainer$$WorkData$$WorkLabels.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: null,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      positionType: "RELATIVE",
      flexGrow: 1
    }
  }
};
const $WorkRow$$DetailContainer$$WorkData$$WorkLabels_ = FlexLayout($WorkRow$$DetailContainer$$WorkData$$WorkLabels);

function $WorkRow$$DetailContainer$$WorkData$$WorkLabels$$WorkID1(_super, pageInstance) {
  _super(this, {
    text: "WO 40257467",
    id: 103
  });
  pageInstance.workID1 = this;
}
$WorkRow$$DetailContainer$$WorkData$$WorkLabels$$WorkID1.$$styleContext = {
  classNames: ".label",
  userProps: {
    width: null,
    height: null,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    textColor: "rgba( 74, 74, 74, 1 )",
    font: {
      family: "Lato",
      size: 18
    },
    flexProps: {
      flexGrow: 1
    }
  }
};
const $WorkRow$$DetailContainer$$WorkData$$WorkLabels$$WorkID1_ = Label($WorkRow$$DetailContainer$$WorkData$$WorkLabels$$WorkID1);

function $WorkRow$$DetailContainer$$WorkData$$WorkLabels$$WorkID2(_super, pageInstance) {
  _super(this, {
    text: "SDV 6001",
    id: 102
  });
  pageInstance.workID2 = this;
}
$WorkRow$$DetailContainer$$WorkData$$WorkLabels$$WorkID2.$$styleContext = {
  classNames: ".label",
  userProps: {
    width: null,
    height: null,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    textColor: "rgba( 74, 74, 74, 1 )",
    font: {
      family: "Lato",
      size: 14
    },
    flexProps: {
      flexGrow: 1
    }
  }
};
const $WorkRow$$DetailContainer$$WorkData$$WorkLabels$$WorkID2_ = Label($WorkRow$$DetailContainer$$WorkData$$WorkLabels$$WorkID2);

function $WorkRow$$DetailContainer$$WorkData$$WorkLabels$$WorkID3(_super, pageInstance) {
  _super(this, {
    text: "Test Passing",
    id: 101
  });
  pageInstance.workID3 = this;
}
$WorkRow$$DetailContainer$$WorkData$$WorkLabels$$WorkID3.$$styleContext = {
  classNames: ".label",
  userProps: {
    width: null,
    height: null,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    textColor: "rgba( 74, 74, 74, 1 )",
    font: {
      family: "Lato",
      size: 14
    },
    flexProps: {
      flexGrow: 1
    }
  }
};
const $WorkRow$$DetailContainer$$WorkData$$WorkLabels$$WorkID3_ = Label($WorkRow$$DetailContainer$$WorkData$$WorkLabels$$WorkID3);

function $WorkRow$$DetailContainer$$Indicator(_super, pageInstance) {
  _super(this, {
    id: 98
  });
  addChild.call(this, "light", $WorkRow$$DetailContainer$$Indicator$$Light_, pageInstance);
  pageInstance.indicator = this;
}
$WorkRow$$DetailContainer$$Indicator.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: 30,
    height: null,
    left: 0,
    top: 3,
    bottom: 0,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      positionType: "ABSOLUTE"
    }
  }
};
const $WorkRow$$DetailContainer$$Indicator_ = FlexLayout($WorkRow$$DetailContainer$$Indicator);

function $WorkRow$$DetailContainer$$Indicator$$Light(_super, pageInstance) {
  _super(this, {
    text: "",
    id: 97
  });
  pageInstance.light = this;
}
$WorkRow$$DetailContainer$$Indicator$$Light.$$styleContext = {
  classNames: ".label",
  userProps: {
    width: 10,
    height: 10,
    borderRadius: 5,
    backgroundColor: "rgba( 208, 2, 27, 1 )",
    marginRight: 7,
    top: 5,
    flexProps: {
      alignSelf: "FLEX_END"
    }
  }
};
const $WorkRow$$DetailContainer$$Indicator$$Light_ = Label($WorkRow$$DetailContainer$$Indicator$$Light);

function $WorkRow$$DetailContainer$$Line(_super, pageInstance) {
  _super(this, {
    id: 99
  });
  pageInstance.line = this;
}
$WorkRow$$DetailContainer$$Line.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: 1,
    left: 0,
    right: 0,
    bottom: 1,
    backgroundColor: "rgba( 151, 151, 151, 1 )",
    alpha: 0.31,
    flexProps: {
      alignSelf: "AUTO"
    }
  }
};
const $WorkRow$$DetailContainer$$Line_ = FlexLayout($WorkRow$$DetailContainer$$Line);

module && (module.exports = WorkRow_);
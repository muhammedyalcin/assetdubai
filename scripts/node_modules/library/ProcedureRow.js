//------------------------------------------------------------------------------
//
//     This code was auto generated.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//------------------------------------------------------------------------------

const extend = require('js-base/core/extend');
const FlexLayout = extend(require('sf-core/ui/flexlayout'));
const Label = extend(require('sf-core/ui/label'));

function addChild(childName, ChildClass, componentInstance) {
  this.children = this.children || {};
  this.children[childName] = new ChildClass(componentInstance);
  if (this.layout)
    this.layout.addChild(this.children[childName]);
  else
    this.addChild(this.children[childName]);
}
//constructor
function ProcedureRow(_super, props) {
  // initalizes super class for this component scope
  _super(this, props);
  addChild.call(this, "procedureLine", $ProcedureRow$$ProcedureLine_, this);
  addChild.call(this, "visualContainer", $ProcedureRow$$VisualContainer_, this);
  addChild.call(this, "descriptionTitle", $ProcedureRow$$DescriptionTitle_, this);
  addChild.call(this, "descriptionLabel", $ProcedureRow$$DescriptionLabel_, this);
  addChild.call(this, "proPlaceHolder", $ProcedureRow$$ProPlaceHolder_, this);
}
ProcedureRow.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexDirection: "COLUMN_REVERSE"
    },
    height: 230,
    width: null
  }
};
const ProcedureRow_ = FlexLayout(ProcedureRow);

function $ProcedureRow$$ProcedureLine(_super, pageInstance) {
  _super(this);
  pageInstance.procedureLine = this;
}
$ProcedureRow$$ProcedureLine.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    alpha: 0.31,
    backgroundColor: "rgba( 151, 151, 151, 1 )",
    bottom: 30,
    flexProps: {
      positionType: "ABSOLUTE"
    },
    height: 1,
    left: 0,
    right: 0,
    width: null
  }
};
const $ProcedureRow$$ProcedureLine_ = FlexLayout($ProcedureRow$$ProcedureLine);

function $ProcedureRow$$VisualContainer(_super, pageInstance) {
  _super(this);
  pageInstance.visualContainer = this;
}
$ProcedureRow$$VisualContainer.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexGrow: 2,
      justifyContent: "SPACE_BETWEEN",
      positionType: "RELATIVE",
      alignSelf: "AUTO",
      flexDirection: "ROW_REVERSE"
    },
    height: null,
    marginBottom: 40,
    width: null
  }
};
const $ProcedureRow$$VisualContainer_ = FlexLayout($ProcedureRow$$VisualContainer);

function $ProcedureRow$$DescriptionTitle(_super, pageInstance) {
  _super(this);
  addChild.call(this, "descLabel", $ProcedureRow$$DescriptionTitle$$DescLabel_, pageInstance);
  pageInstance.descriptionTitle = this;
}
$ProcedureRow$$DescriptionTitle.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexGrow: 1
    },
    height: null,
    width: null
  }
};
const $ProcedureRow$$DescriptionTitle_ = FlexLayout($ProcedureRow$$DescriptionTitle);

function $ProcedureRow$$DescriptionTitle$$DescLabel(_super, pageInstance) {
  _super(this, {
    text: ""
  });
  pageInstance.descLabel = this;
}
$ProcedureRow$$DescriptionTitle$$DescLabel.$$styleContext = {
  classNames: ".label",
  userProps: {
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexGrow: 1
    },
    font: {
      size: 13,
      family: "Lato"
    },
    height: null,
    multiline: true,
    textAlignment: "TOPLEFT",
    textColor: "rgba( 74, 74, 74, 1 )",
    width: null
  }
};
const $ProcedureRow$$DescriptionTitle$$DescLabel_ = Label($ProcedureRow$$DescriptionTitle$$DescLabel);

function $ProcedureRow$$DescriptionLabel(_super, pageInstance) {
  _super(this);
  addChild.call(this, "testLabel", $ProcedureRow$$DescriptionLabel$$TestLabel_, pageInstance);
  pageInstance.descriptionLabel = this;
}
$ProcedureRow$$DescriptionLabel.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexGrow: 1,
      alignSelf: "AUTO"
    },
    height: null,
    width: null
  }
};
const $ProcedureRow$$DescriptionLabel_ = FlexLayout($ProcedureRow$$DescriptionLabel);

function $ProcedureRow$$DescriptionLabel$$TestLabel(_super, pageInstance) {
  _super(this, {
    text: "Nothing is assigned"
  });
  pageInstance.testLabel = this;
}
$ProcedureRow$$DescriptionLabel$$TestLabel.$$styleContext = {
  classNames: ".label",
  userProps: {
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexGrow: 1
    },
    font: {
      family: "Lato",
      size: 13
    },
    height: null,
    textColor: "rgba( 74, 74, 74, 1 )",
    width: null
  }
};
const $ProcedureRow$$DescriptionLabel$$TestLabel_ = Label($ProcedureRow$$DescriptionLabel$$TestLabel);

function $ProcedureRow$$ProPlaceHolder(_super, pageInstance) {
  _super(this);
}
$ProcedureRow$$ProPlaceHolder.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    bottom: 0,
    flexProps: {
      positionType: "ABSOLUTE"
    },
    height: 30,
    left: 0,
    right: 0,
    width: null
  }
};
const $ProcedureRow$$ProPlaceHolder_ = FlexLayout($ProcedureRow$$ProPlaceHolder);

module && (module.exports = ProcedureRow_);
//------------------------------------------------------------------------------
//
//     This code was auto generated.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//------------------------------------------------------------------------------

const extend = require('js-base/core/extend');
const FlexLayout = extend(require('sf-core/ui/flexlayout'));
const ImageView = extend(require('sf-core/ui/imageview'));
const Label = extend(require('sf-core/ui/label'));

function addChild(childName, ChildClass, componentInstance) {
  this.children = this.children || {};
  this.children[childName] = new ChildClass(componentInstance);
  if (this.layout)
    this.layout.addChild(this.children[childName]);
  else
    this.addChild(this.children[childName]);
}
//constructor
function AssetRow(_super, props) {
  // initalizes super class for this component scope
  _super(this, props);
  addChild.call(this, "assetContainer", $AssetRow$$AssetContainer_, this);
  addChild.call(this, "assetline", $AssetRow$$Assetline_, this);
}
AssetRow.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: 100,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexDirection: "COLUMN"
    }
  }
};
const AssetRow_ = FlexLayout(AssetRow);

function $AssetRow$$AssetContainer(_super, pageInstance) {
  _super(this, {
    id: 300
  });
  addChild.call(this, "assetImagefl", $AssetRow$$AssetContainer$$AssetImagefl_, pageInstance);
  addChild.call(this, "labelfl", $AssetRow$$AssetContainer$$Labelfl_, pageInstance);
  pageInstance.assetContainer = this;
}
$AssetRow$$AssetContainer.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: null,
    left: 0,
    right: 0,
    top: 0,
    bottom: 1,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      positionType: "ABSOLUTE"
    }
  }
};
const $AssetRow$$AssetContainer_ = FlexLayout($AssetRow$$AssetContainer);

function $AssetRow$$AssetContainer$$AssetImagefl(_super, pageInstance) {
  _super(this, {
    id: 998
  });
  addChild.call(this, "okIconImageView", $AssetRow$$AssetContainer$$AssetImagefl$$OkIconImageView_, pageInstance);
  pageInstance.assetImagefl = this;
}
$AssetRow$$AssetContainer$$AssetImagefl.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: 50,
    height: null,
    right: 0,
    bottom: 0,
    top: 0,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      positionType: "ABSOLUTE"
    }
  }
};
const $AssetRow$$AssetContainer$$AssetImagefl_ = FlexLayout($AssetRow$$AssetContainer$$AssetImagefl);

function $AssetRow$$AssetContainer$$AssetImagefl$$OkIconImageView(_super, pageInstance) {
  _super(this, {
    id: 997
  });
}
$AssetRow$$AssetContainer$$AssetImagefl$$OkIconImageView.$$styleContext = {
  classNames: ".imageView",
  userProps: {
    width: null,
    height: null,
    image: "righticon.png",
    imageFillType: "NORMAL",
    flexProps: {
      flexGrow: 1
    }
  }
};
const $AssetRow$$AssetContainer$$AssetImagefl$$OkIconImageView_ = ImageView($AssetRow$$AssetContainer$$AssetImagefl$$OkIconImageView);

function $AssetRow$$AssetContainer$$Labelfl(_super, pageInstance) {
  _super(this, {
    id: 301
  });
  addChild.call(this, "topLabel", $AssetRow$$AssetContainer$$Labelfl$$TopLabel_, pageInstance);
  addChild.call(this, "bottomLabel", $AssetRow$$AssetContainer$$Labelfl$$BottomLabel_, pageInstance);
  pageInstance.labelfl = this;
}
$AssetRow$$AssetContainer$$Labelfl.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: null,
    left: 0,
    right: 50,
    bottom: 0,
    top: 0,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      positionType: "ABSOLUTE"
    }
  }
};
const $AssetRow$$AssetContainer$$Labelfl_ = FlexLayout($AssetRow$$AssetContainer$$Labelfl);

function $AssetRow$$AssetContainer$$Labelfl$$TopLabel(_super, pageInstance) {
  _super(this, {
    text: "Nothing is assign",
    id: 303
  });
  pageInstance.topLabel = this;
}
$AssetRow$$AssetContainer$$Labelfl$$TopLabel.$$styleContext = {
  classNames: ".label",
  userProps: {
    width: null,
    height: null,
    textAlignment: "MIDLEFT",
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    textColor: "rgba( 74, 74, 74, 1 )",
    font: {
      family: "Lato"
    },
    flexProps: {
      flexGrow: 1
    }
  }
};
const $AssetRow$$AssetContainer$$Labelfl$$TopLabel_ = Label($AssetRow$$AssetContainer$$Labelfl$$TopLabel);

function $AssetRow$$AssetContainer$$Labelfl$$BottomLabel(_super, pageInstance) {
  _super(this, {
    text: "Nothing is assign",
    id: 302
  });
  pageInstance.bottomLabel = this;
}
$AssetRow$$AssetContainer$$Labelfl$$BottomLabel.$$styleContext = {
  classNames: ".label",
  userProps: {
    width: null,
    height: null,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    textAlignment: "TOPLEFT",
    textColor: "rgba( 74, 74, 74, 1 )",
    font: {
      family: "Lato",
      size: 14
    },
    flexProps: {
      flexGrow: 1
    }
  }
};
const $AssetRow$$AssetContainer$$Labelfl$$BottomLabel_ = Label($AssetRow$$AssetContainer$$Labelfl$$BottomLabel);

function $AssetRow$$Assetline(_super, pageInstance) {
  _super(this, {
    id: 999
  });
}
$AssetRow$$Assetline.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: 1,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: "rgba( 151, 151, 151, 1 )",
    alpha: 0.31,
    flexProps: {
      positionType: "ABSOLUTE"
    }
  }
};
const $AssetRow$$Assetline_ = FlexLayout($AssetRow$$Assetline);

module && (module.exports = AssetRow_);
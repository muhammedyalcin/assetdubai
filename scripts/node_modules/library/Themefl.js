//------------------------------------------------------------------------------
//
//     This code was auto generated.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//------------------------------------------------------------------------------

const extend = require('js-base/core/extend');
const FlexLayout = extend(require('sf-core/ui/flexlayout'));
const Label = extend(require('sf-core/ui/label'));

function addChild(childName, ChildClass, componentInstance) {
  this.children = this.children || {};
  this.children[childName] = new ChildClass(componentInstance);
  if (this.layout)
    this.layout.addChild(this.children[childName]);
  else
    this.addChild(this.children[childName]);
}
//constructor
function Themefl(_super, props) {
  // initalizes super class for this component scope
  _super(this, props);
  addChild.call(this, "line", $Themefl$$Line_, this);
  addChild.call(this, "themeContainer", $Themefl$$ThemeContainer_, this);
}
Themefl.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    height: 70,
    width: null
  }
};
const Themefl_ = FlexLayout(Themefl);

function $Themefl$$Line(_super, pageInstance) {
  _super(this);
}
$Themefl$$Line.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    alpha: 0.31,
    backgroundColor: "rgba( 61, 59, 58, 1 )",
    bottom: 0,
    flexProps: {
      positionType: "ABSOLUTE"
    },
    height: 1,
    left: 0,
    right: 0,
    width: null
  }
};
const $Themefl$$Line_ = FlexLayout($Themefl$$Line);

function $Themefl$$ThemeContainer(_super, pageInstance) {
  _super(this);
  addChild.call(this, "themeLabel", $Themefl$$ThemeContainer$$ThemeLabel_, pageInstance);
  addChild.call(this, "stylesfl", $Themefl$$ThemeContainer$$Stylesfl_, pageInstance);
  pageInstance.themeContainer = this;
}
$Themefl$$ThemeContainer.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    bottom: 1,
    flexProps: {
      positionType: "ABSOLUTE"
    },
    height: null,
    left: 0,
    right: 0,
    top: 1,
    width: null
  }
};
const $Themefl$$ThemeContainer_ = FlexLayout($Themefl$$ThemeContainer);

function $Themefl$$ThemeContainer$$ThemeLabel(_super, pageInstance) {
  _super(this, {
    text: "Theme"
  });
  pageInstance.themeLabel = this;
}
$Themefl$$ThemeContainer$$ThemeLabel.$$styleContext = {
  classNames: ".label",
  userProps: {
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    bottom: 0,
    flexProps: {
      positionType: "ABSOLUTE"
    },
    font: {
      family: "Lato"
    },
    height: null,
    left: 1,
    right: 90,
    top: 1,
    width: null
  }
};
const $Themefl$$ThemeContainer$$ThemeLabel_ = Label($Themefl$$ThemeContainer$$ThemeLabel);

function $Themefl$$ThemeContainer$$Stylesfl(_super, pageInstance) {
  _super(this);
  addChild.call(this, "style2fl", $Themefl$$ThemeContainer$$Stylesfl$$Style2fl_, pageInstance);
  addChild.call(this, "style1fl", $Themefl$$ThemeContainer$$Stylesfl$$Style1fl_, pageInstance);
  pageInstance.stylesfl = this;
}
$Themefl$$ThemeContainer$$Stylesfl.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    bottom: 0,
    flexProps: {
      positionType: "ABSOLUTE",
      flexDirection: "ROW",
      justifyContent: "SPACE_BETWEEN",
      alignItems: "CENTER"
    },
    height: null,
    right: 0,
    top: 0,
    width: 90
  }
};
const $Themefl$$ThemeContainer$$Stylesfl_ = FlexLayout($Themefl$$ThemeContainer$$Stylesfl);

function $Themefl$$ThemeContainer$$Stylesfl$$Style2fl(_super, pageInstance) {
  _super(this);
  addChild.call(this, "style2Color", $Themefl$$ThemeContainer$$Stylesfl$$Style2fl$$Style2Color_, pageInstance);
  pageInstance.style2fl = this;
}
$Themefl$$ThemeContainer$$Stylesfl$$Style2fl.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    borderColor: "rgba( 195, 195, 195, 1 )",
    borderRadius: 6,
    borderWidth: 0,
    height: 40,
    width: 40
  }
};
const $Themefl$$ThemeContainer$$Stylesfl$$Style2fl_ = FlexLayout($Themefl$$ThemeContainer$$Stylesfl$$Style2fl);

function $Themefl$$ThemeContainer$$Stylesfl$$Style2fl$$Style2Color(_super, pageInstance) {
  _super(this);
  pageInstance.style2Color = this;
}
$Themefl$$ThemeContainer$$Stylesfl$$Style2fl$$Style2Color.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    backgroundColor: "rgba( 208, 2, 27, 1 )",
    borderRadius: 6,
    bottom: 5,
    flexProps: {
      positionType: "ABSOLUTE"
    },
    height: null,
    left: 5,
    right: 5,
    top: 5,
    width: null
  }
};
const $Themefl$$ThemeContainer$$Stylesfl$$Style2fl$$Style2Color_ = FlexLayout($Themefl$$ThemeContainer$$Stylesfl$$Style2fl$$Style2Color);

function $Themefl$$ThemeContainer$$Stylesfl$$Style1fl(_super, pageInstance) {
  _super(this);
  addChild.call(this, "style1Color", $Themefl$$ThemeContainer$$Stylesfl$$Style1fl$$Style1Color_, pageInstance);
  pageInstance.style1fl = this;
}
$Themefl$$ThemeContainer$$Stylesfl$$Style1fl.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    borderColor: "rgba( 195, 195, 195, 1 )",
    borderRadius: 6,
    borderWidth: 1,
    height: 40,
    width: 40
  }
};
const $Themefl$$ThemeContainer$$Stylesfl$$Style1fl_ = FlexLayout($Themefl$$ThemeContainer$$Stylesfl$$Style1fl);

function $Themefl$$ThemeContainer$$Stylesfl$$Style1fl$$Style1Color(_super, pageInstance) {
  _super(this);
  pageInstance.style1Color = this;
}
$Themefl$$ThemeContainer$$Stylesfl$$Style1fl$$Style1Color.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    backgroundColor: "rgba( 61, 59, 58, 1 )",
    borderRadius: 6,
    bottom: 5,
    flexProps: {
      positionType: "ABSOLUTE"
    },
    height: null,
    left: 5,
    right: 5,
    top: 5,
    width: null
  }
};
const $Themefl$$ThemeContainer$$Stylesfl$$Style1fl$$Style1Color_ = FlexLayout($Themefl$$ThemeContainer$$Stylesfl$$Style1fl$$Style1Color);

module && (module.exports = Themefl_);
//------------------------------------------------------------------------------
//
//     This code was auto generated.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//------------------------------------------------------------------------------

const extend = require('js-base/core/extend');
const FlexLayout = extend(require('sf-core/ui/flexlayout'));
const Label = extend(require('sf-core/ui/label'));
const ImageView = extend(require('sf-core/ui/imageview'));
const TextArea = extend(require('sf-core/ui/textarea'));

function addChild(childName, ChildClass, componentInstance) {
  this.children = this.children || {};
  this.children[childName] = new ChildClass(componentInstance);
  if (this.layout)
    this.layout.addChild(this.children[childName]);
  else
    this.addChild(this.children[childName]);
}
//constructor
function NoteContainer(_super, props) {
  // initalizes super class for this component scope
  _super(this, props);
  addChild.call(this, "upgradefl", $NoteContainer$$Upgradefl_, this);
  addChild.call(this, "noteFl", $NoteContainer$$NoteFl_, this);
}
NoteContainer.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: null,
    borderColor: "rgba( 255, 255, 255, 0 )",
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      justifyContent: "SPACE_BETWEEN"
    }
  }
};
const NoteContainer_ = FlexLayout(NoteContainer);

function $NoteContainer$$Upgradefl(_super, pageInstance) {
  _super(this);
  addChild.call(this, "actionfl", $NoteContainer$$Upgradefl$$Actionfl_, pageInstance);
  addChild.call(this, "emptyfl", $NoteContainer$$Upgradefl$$Emptyfl_, pageInstance);
}
$NoteContainer$$Upgradefl.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: null,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexGrow: 1,
      flexDirection: "COLUMN"
    }
  }
};
const $NoteContainer$$Upgradefl_ = FlexLayout($NoteContainer$$Upgradefl);

function $NoteContainer$$Upgradefl$$Actionfl(_super, pageInstance) {
  _super(this);
  pageInstance.actionfl = this;
}
$NoteContainer$$Upgradefl$$Actionfl.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    height: null,
    flexProps: {
      flexGrow: 1
    }
  }
};
const $NoteContainer$$Upgradefl$$Actionfl_ = FlexLayout($NoteContainer$$Upgradefl$$Actionfl);

function $NoteContainer$$Upgradefl$$Emptyfl(_super, pageInstance) {
  _super(this);
  pageInstance.emptyfl = this;
}
$NoteContainer$$Upgradefl$$Emptyfl.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: null,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexGrow: 2,
      flexDirection: "ROW",
      alignItems: "FLEX_END"
    }
  }
};
const $NoteContainer$$Upgradefl$$Emptyfl_ = FlexLayout($NoteContainer$$Upgradefl$$Emptyfl);

function $NoteContainer$$NoteFl(_super, pageInstance) {
  _super(this);
  addChild.call(this, "noteandspeakfl", $NoteContainer$$NoteFl$$Noteandspeakfl_, pageInstance);
  addChild.call(this, "notefl", $NoteContainer$$NoteFl$$Notefl_, pageInstance);
}
$NoteContainer$$NoteFl.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: null,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexGrow: 2
    }
  }
};
const $NoteContainer$$NoteFl_ = FlexLayout($NoteContainer$$NoteFl);

function $NoteContainer$$NoteFl$$Noteandspeakfl(_super, pageInstance) {
  _super(this);
  addChild.call(this, "labelfl", $NoteContainer$$NoteFl$$Noteandspeakfl$$Labelfl_, pageInstance);
  addChild.call(this, "speakfl", $NoteContainer$$NoteFl$$Noteandspeakfl$$Speakfl_, pageInstance);
}
$NoteContainer$$NoteFl$$Noteandspeakfl.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: null,
    alpha: 1,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexGrow: 1,
      flexDirection: "ROW"
    }
  }
};
const $NoteContainer$$NoteFl$$Noteandspeakfl_ = FlexLayout($NoteContainer$$NoteFl$$Noteandspeakfl);

function $NoteContainer$$NoteFl$$Noteandspeakfl$$Labelfl(_super, pageInstance) {
  _super(this);
  addChild.call(this, "label1", $NoteContainer$$NoteFl$$Noteandspeakfl$$Labelfl$$Label1_, pageInstance);
}
$NoteContainer$$NoteFl$$Noteandspeakfl$$Labelfl.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: null,
    borderColor: "rgba( 74, 74, 74, 1 )",
    borderWidth: null,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexGrow: 1,
      alignItems: "CENTER",
      justifyContent: "FLEX_START"
    }
  }
};
const $NoteContainer$$NoteFl$$Noteandspeakfl$$Labelfl_ = FlexLayout($NoteContainer$$NoteFl$$Noteandspeakfl$$Labelfl);

function $NoteContainer$$NoteFl$$Noteandspeakfl$$Labelfl$$Label1(_super, pageInstance) {
  _super(this, {
    text: "Note"
  });
  pageInstance.label1 = this;
}
$NoteContainer$$NoteFl$$Noteandspeakfl$$Labelfl$$Label1.$$styleContext = {
  classNames: ".label",
  userProps: {
    width: 81.33333333333333,
    height: 89.92510986328125,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    textColor: "rgba( 74, 74, 74, 1 )",
    font: {
      family: "Lato",
      size: 14
    },
    flexProps: {
      flexGrow: 1,
      positionType: "RELATIVE",
      alignSelf: "FLEX_START"
    }
  }
};
const $NoteContainer$$NoteFl$$Noteandspeakfl$$Labelfl$$Label1_ = Label($NoteContainer$$NoteFl$$Noteandspeakfl$$Labelfl$$Label1);

function $NoteContainer$$NoteFl$$Noteandspeakfl$$Speakfl(_super, pageInstance) {
  _super(this);
  addChild.call(this, "micicon", $NoteContainer$$NoteFl$$Noteandspeakfl$$Speakfl$$Micicon_, pageInstance);
}
$NoteContainer$$NoteFl$$Noteandspeakfl$$Speakfl.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: null,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexGrow: 1,
      justifyContent: "FLEX_START",
      alignItems: "FLEX_END"
    }
  }
};
const $NoteContainer$$NoteFl$$Noteandspeakfl$$Speakfl_ = FlexLayout($NoteContainer$$NoteFl$$Noteandspeakfl$$Speakfl);

function $NoteContainer$$NoteFl$$Noteandspeakfl$$Speakfl$$Micicon(_super, pageInstance) {
  _super(this);
}
$NoteContainer$$NoteFl$$Noteandspeakfl$$Speakfl$$Micicon.$$styleContext = {
  classNames: ".imageView",
  userProps: {
    width: null,
    height: null,
    image: "micicon.png",
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    left: 130,
    right: 0,
    bottom: 0,
    top: 20,
    flexProps: {
      positionType: "ABSOLUTE"
    }
  }
};
const $NoteContainer$$NoteFl$$Noteandspeakfl$$Speakfl$$Micicon_ = ImageView($NoteContainer$$NoteFl$$Noteandspeakfl$$Speakfl$$Micicon);

function $NoteContainer$$NoteFl$$Notefl(_super, pageInstance) {
  _super(this);
  addChild.call(this, "descriptionTextArea", $NoteContainer$$NoteFl$$Notefl$$DescriptionTextArea_, pageInstance);
}
$NoteContainer$$NoteFl$$Notefl.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: null,
    borderColor: "rgba( 203, 204, 208, 1 )",
    borderWidth: 1,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexGrow: 4,
      alignSelf: "AUTO"
    }
  }
};
const $NoteContainer$$NoteFl$$Notefl_ = FlexLayout($NoteContainer$$NoteFl$$Notefl);

function $NoteContainer$$NoteFl$$Notefl$$DescriptionTextArea(_super, pageInstance) {
  _super(this, {
    text: ""
  });
  pageInstance.descriptionTextArea = this;
}
$NoteContainer$$NoteFl$$Notefl$$DescriptionTextArea.$$styleContext = {
  classNames: ".textArea",
  userProps: {
    width: null,
    height: null,
    borderColor: "rgba( 155, 155, 155, 1 )",
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    borderWidth: null,
    textColor: "rgba( 29, 29, 38, 1 )",
    textAlignment: "TOPLEFT",
    font: {
      bold: false,
      family: "Lato",
      size: 14
    },
    flexProps: {
      flexGrow: 1,
      alignSelf: "STRETCH"
    }
  }
};
const $NoteContainer$$NoteFl$$Notefl$$DescriptionTextArea_ = TextArea($NoteContainer$$NoteFl$$Notefl$$DescriptionTextArea);

module && (module.exports = NoteContainer_);
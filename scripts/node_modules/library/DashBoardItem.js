//------------------------------------------------------------------------------
//
//     This code was auto generated.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//------------------------------------------------------------------------------

const extend = require('js-base/core/extend');
const FlexLayout = extend(require('sf-core/ui/flexlayout'));
const Label = extend(require('sf-core/ui/label'));

function addChild(childName, ChildClass, componentInstance) {
  this.children = this.children || {};
  this.children[childName] = new ChildClass(componentInstance);
  if (this.layout)
    this.layout.addChild(this.children[childName]);
  else
    this.addChild(this.children[childName]);
}
//constructor
function DashBoardItem(_super, props) {
  // initalizes super class for this component scope
  _super(this, Object.assign({
    id: 15
  }, props));
  addChild.call(this, "labelContainer", $DashBoardItem$$LabelContainer_, this);
  addChild.call(this, "dashboardLine", $DashBoardItem$$DashboardLine_, this);
}
DashBoardItem.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: 100,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexDirection: "COLUMN",
      justifyContent: "SPACE_BETWEEN",
      positionType: "RELATIVE",
      alignSelf: "AUTO"
    }
  }
};
const DashBoardItem_ = FlexLayout(DashBoardItem);

function $DashBoardItem$$LabelContainer(_super, pageInstance) {
  _super(this, {
    id: 160
  });
  addChild.call(this, "dashboardLabel2", $DashBoardItem$$LabelContainer$$DashboardLabel2_, pageInstance);
  addChild.call(this, "dashboardLabel1", $DashBoardItem$$LabelContainer$$DashboardLabel1_, pageInstance);
  pageInstance.labelContainer = this;
}
$DashBoardItem$$LabelContainer.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: null,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexGrow: 1,
      flexDirection: "ROW",
      justifyContent: "SPACE_BETWEEN"
    }
  }
};
const $DashBoardItem$$LabelContainer_ = FlexLayout($DashBoardItem$$LabelContainer);

function $DashBoardItem$$LabelContainer$$DashboardLabel2(_super, pageInstance) {
  _super(this, {
    text: "All",
    id: 162
  });
  pageInstance.dashboardLabel2 = this;
}
$DashBoardItem$$LabelContainer$$DashboardLabel2.$$styleContext = {
  classNames: ".label",
  userProps: {
    width: null,
    height: 66,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    textAlignment: "MIDLEFT",
    textColor: "rgba( 216, 215, 215, 1 )",
    top: 0,
    right: 60,
    left: 20,
    font: {
      family: "Lato",
      size: 18
    },
    flexProps: {
      alignSelf: "AUTO",
      positionType: "ABSOLUTE"
    }
  }
};
const $DashBoardItem$$LabelContainer$$DashboardLabel2_ = Label($DashBoardItem$$LabelContainer$$DashboardLabel2);

function $DashBoardItem$$LabelContainer$$DashboardLabel1(_super, pageInstance) {
  _super(this, {
    text: "0",
    id: 161
  });
  pageInstance.dashboardLabel1 = this;
}
$DashBoardItem$$LabelContainer$$DashboardLabel1.$$styleContext = {
  classNames: ".label",
  userProps: {
    width: 60,
    height: 66,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    textColor: "rgba( 216, 215, 215, 1 )",
    right: 0,
    top: 0,
    font: {
      family: "Lato",
      size: 16,
      bold: false
    },
    flexProps: {
      positionType: "ABSOLUTE"
    }
  }
};
const $DashBoardItem$$LabelContainer$$DashboardLabel1_ = Label($DashBoardItem$$LabelContainer$$DashboardLabel1);

function $DashBoardItem$$DashboardLine(_super, pageInstance) {
  _super(this, {
    id: 16
  });
}
$DashBoardItem$$DashboardLine.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: 1,
    backgroundColor: "rgba( 155, 155, 155, 0.41 )",
    left: 0,
    right: 0,
    bottom: 0,
    alpha: 0.31,
    flexProps: {
      flexGrow: 0.08,
      positionType: "ABSOLUTE"
    }
  }
};
const $DashBoardItem$$DashboardLine_ = FlexLayout($DashBoardItem$$DashboardLine);

module && (module.exports = DashBoardItem_);
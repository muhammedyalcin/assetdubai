//------------------------------------------------------------------------------
//
//     This code was auto generated.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//------------------------------------------------------------------------------

const extend = require('js-base/core/extend');
const FlexLayout = extend(require('sf-core/ui/flexlayout'));
const Button = extend(require('sf-core/ui/button'));

function addChild(childName, ChildClass, componentInstance) {
  this.children = this.children || {};
  this.children[childName] = new ChildClass(componentInstance);
  if (this.layout)
    this.layout.addChild(this.children[childName]);
  else
    this.addChild(this.children[childName]);
}
//constructor
function Completefl(_super, props) {
  // initalizes super class for this component scope
  _super(this, props);
  addChild.call(this, "completeButton", $Completefl$$CompleteButton_, this);
}
Completefl.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: 70,
    flexProps: {
      alignSelf: "AUTO"
    }
  }
};
const Completefl_ = FlexLayout(Completefl);

function $Completefl$$CompleteButton(_super, pageInstance) {
  _super(this, {
    text: "Complete Setup"
  });
  pageInstance.completeButton = this;
}
$Completefl$$CompleteButton.$$styleContext = {
  classNames: ".button",
  userProps: {
    backgroundColor: "rgba( 208, 2, 27, 1 )",
    width: null,
    height: null,
    font: {
      family: "Lato"
    },
    flexProps: {
      flexGrow: 1
    }
  }
};
const $Completefl$$CompleteButton_ = Button($Completefl$$CompleteButton);

module && (module.exports = Completefl_);
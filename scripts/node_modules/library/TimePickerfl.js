//------------------------------------------------------------------------------
//
//     This code was auto generated.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
//
//------------------------------------------------------------------------------

const extend = require('js-base/core/extend');
const FlexLayout = extend(require('sf-core/ui/flexlayout'));
const Label = extend(require('sf-core/ui/label'));
const ImageView = extend(require('sf-core/ui/imageview'));

function addChild(childName, ChildClass, componentInstance) {
  this.children = this.children || {};
  this.children[childName] = new ChildClass(componentInstance);
  if (this.layout)
    this.layout.addChild(this.children[childName]);
  else
    this.addChild(this.children[childName]);
}
//constructor
function TimePickerfl(_super, props) {
  // initalizes super class for this component scope
  _super(this, props);
  addChild.call(this, "timeContainer", $TimePickerfl$$TimeContainer_, this);
  addChild.call(this, "line", $TimePickerfl$$Line_, this);
}
TimePickerfl.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: 150,
    height: 60,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexDirection: "ROW"
    }
  }
};
const TimePickerfl_ = FlexLayout(TimePickerfl);

function $TimePickerfl$$TimeContainer(_super, pageInstance) {
  _super(this);
  addChild.call(this, "label1", $TimePickerfl$$TimeContainer$$Label1_, pageInstance);
  addChild.call(this, "okImageView", $TimePickerfl$$TimeContainer$$OkImageView_, pageInstance);
}
$TimePickerfl$$TimeContainer.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: null,
    marginBottom: 1,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexGrow: 1,
      flexDirection: "ROW"
    }
  }
};
const $TimePickerfl$$TimeContainer_ = FlexLayout($TimePickerfl$$TimeContainer);

function $TimePickerfl$$TimeContainer$$Label1(_super, pageInstance) {
  _super(this, {
    text: "Start Time"
  });
}
$TimePickerfl$$TimeContainer$$Label1.$$styleContext = {
  classNames: ".label",
  userProps: {
    width: null,
    height: null,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    textColor: "rgba( 74, 74, 74, 1 )",
    font: {
      family: "Lato",
      size: 14
    },
    flexProps: {
      flexGrow: 1
    }
  }
};
const $TimePickerfl$$TimeContainer$$Label1_ = Label($TimePickerfl$$TimeContainer$$Label1);

function $TimePickerfl$$TimeContainer$$OkImageView(_super, pageInstance) {
  _super(this);
  addChild.call(this, "okImg", $TimePickerfl$$TimeContainer$$OkImageView$$OkImg_, pageInstance);
}
$TimePickerfl$$TimeContainer$$OkImageView.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: null,
    backgroundColor: "rgba( 255, 255, 255, 0 )",
    flexProps: {
      flexGrow: 0.3,
      justifyContent: "CENTER",
      alignItems: "CENTER"
    }
  }
};
const $TimePickerfl$$TimeContainer$$OkImageView_ = FlexLayout($TimePickerfl$$TimeContainer$$OkImageView);

function $TimePickerfl$$TimeContainer$$OkImageView$$OkImg(_super, pageInstance) {
  _super(this);
}
$TimePickerfl$$TimeContainer$$OkImageView$$OkImg.$$styleContext = {
  classNames: ".imageView",
  userProps: {
    width: 20,
    height: 10,
    image: "downokicon.png",
    imageFillType: "STRETCH"
  }
};
const $TimePickerfl$$TimeContainer$$OkImageView$$OkImg_ = ImageView($TimePickerfl$$TimeContainer$$OkImageView$$OkImg);

function $TimePickerfl$$Line(_super, pageInstance) {
  _super(this);
}
$TimePickerfl$$Line.$$styleContext = {
  classNames: ".flexLayout",
  userProps: {
    width: null,
    height: 1,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: "rgba( 151, 151, 151, 1 )",
    alpha: 0.31,
    flexProps: {
      positionType: "ABSOLUTE"
    }
  }
};
const $TimePickerfl$$Line_ = FlexLayout($TimePickerfl$$Line);

module && (module.exports = TimePickerfl_);
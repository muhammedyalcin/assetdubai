{
  "name": "js-base",
  "version": "1.0.4",
  "description": "Smartface Core",
  "repository": "",
  "license": "MIT",
  "scripts": {
    "test": "node ./test.js",
    "jasmine": "jasmine",
    "prepublish": "mkdir -p core && cp ./src/core/extend.js ./core",
    "postpublish": "rm -r ./core"
  },
  "devDependencies": {
    "eslint": "^3.9.1",
    "jasmine": "^2.5.2",
    "jasmine-reporters": "^2.2.0",
    "jasmine-spec-reporter": "^2.7.0",
    "mocha": "^3.1.2",
    "babel-polyfill": "^6.16.0",
    "rx": "^4.1.0"
  },
  "dependencies": {},
  "readme": "\n     ____                       _    __                      _       \n    / ___| _ __ ___   __ _ _ __| |_ / _| __ _  ___ ___      (_) ___  \n    \\___ \\| '_ ` _ \\ / _` | '__| __| |_ / _` |/ __/ _ \\     | |/ _ \\ \n     ___) | | | | | | (_| | |  | |_|  _| (_| | (_|  __/  _  | | (_) |\n    |____/|_| |_| |_|\\__,_|_|   \\__|_|  \\__,_|\\___\\___| (_) |_|\\___/ \n    -----------------------------------------------------------------\n\n# Smartface Javascript SDK Core\nFor development on smartface cloud ide, please use instructions of [https://github.com/smartface/smartface-core-workspace](https://github.com/smartface/smartface-core-workspace)\n\n### What is the SDK Core\nOur core sdk for Component Oriented Application development.\n\n![Class Diagram](/diagram.png \"Class Diagram\")\n\n### Core Api\n#### Creating UIComponents\n\n**/js-base/core/extend** inheritance container is to use creating components, pages or custom.\n\n#### Usage\nPass **/js-base/component/uicomponent** as super class parameter for the first call then \"extend\" returns inherintance container for the new components. So that you can create an instance of new components which are inherited from UIComponent. UIComponent creates instance of [SMF.UI.Container](http://docs.smartface.io/?topic=html/AllMembers_T_SMF_UI_NavigationBar.htm#!/api/SMF.UI.Container) and adds child component to.\n\n```js\nconst extend = require(\"/js-base/core/extend\");\nconst UIComponent = require(\"/js-base/component/uicomponent\");\n\n// First call\nconst newCompContainer = extend(\n  UIComponent\n);\n```\n\n\nThen you can create new component instance via component container. First parameter is the constructor of the new component. Super class constructor is injected to component constructor by extend. \n\nYou must pass component scope to super class constructor first and Second parameter public methods is the [SMF.UI.Container](http://docs.smartface.io/?topic=html/AllMembers_T_SMF_UI_NavigationBar.htm#!/api/SMF.UI.Container) properties. Third is the unique name of component is not required. And last parameter is the initialState of concrete component. State is to save behaviours of components and when state is changed then component must be changed.\n\n```js \nconst concreteComp = newComponentContainer(\n/**\n * concreteComp constructor\n * \n * @param _superConstructor Super class constructor\n * @param customParam Custom param of the component\n */\nfunction(_superConstructor, customParam){\n\t_superConstructor(\n\t\t/// pass component scope to super\n\t\tthis,\n\t\t// pass SMF.UI.Container properties\n\t\t{\n\t\t\twidth: 150,\n\t\t\theight: 30,\n\t\t\tborderWidth: 1\n\t\t},\n\t\t// pass name of component\n\t\t\"name-of-compnent\",\n\t\t// pass initial state of component\n\t\t{\n\t\t\tisClosed: false,\n\t\t\tcount: 0\n\t\t}\n\t), \n\t// Second parameter public methods\n\t...\n\t\n)\n```\n\nSecond parameter public methods of call is to define public methods to concrete component.\n\n```js\n\t...\n\t), \n\t// Second parameter public methods\n\tfunction(_public){\n\t\t_public.addtoCount = function(num){\n\t\t\tthis._changeState({\n\t\t\t\tcount: (this.state.count+num)\n\t\t\t})\n\t\t}\n\t}\n\n\n```\n\nAs conventionally, component's state cannot be changed externally and uses props to modify externally components instead of states. Prop(ertie)s are exposed attributes of components. Props may be an event listener callback or color of a button component. But state is the snapshot of the component behaviour like isClicked, clickCount etc. \n\n```js\n\t\n/**\n * concreteComp Component constructor would be CheckBox or an another concrete component.\n * and you can creare instace of concreteComp like below\n * \n * var comp = new concreteComp(\"this is the custom param's value\");\n */\nconst concreteComp = ComponentContainer(\n\t/**\n\t * concreteComp constructor\n\t * \n\t * @param _superConstructor Super class constructor\n\t * @param customParam Custom param of the component\n\t */\n\tfunction(_superConstructor, customParam){\n\t\t_superConstructor(\n\t\t\t// pass component scope to super\n\t\t\tthis,\n\t\t\t// pass SMF.UI.Container properties\n\t\t\t{\n\t\t\t\twidth: 150,\n\t\t\t\theight: 30,\n\t\t\t\tborderWidth: 1\n\t\t\t},\n\t\t\t// pass name of component\n\t\t\t\"name-of-compnent\",\n\t\t\t// pass initial state of component\n\t\t\t{\n\t\t\t\tisClosed: false,\n\t\t\t\tcount: 0\n\t\t\t}\n\t\t)\n\t}, \n\t// Second parameter public methods\n\tfunction(_public){\n\t\t_public.addtoCount = function(num){\n\t\t\t// inherited from UIComponent\n\t\t\tthis._changeState({\n\t\t\t\tcount: (this.state.count+num)\n\t\t\t})\n\t\t}\t\n\t)\n```\n\nState can only be changed via this._changeState() which is inherited method of UIComponent.\n\n```js\n\t...\n\t\tthis._changeState({\n\t\t\tcount: (this.state.count+num)\n\t\t})\n\t...\n\n```\n\nAnd when state is changed by any interaction then triggered **stateChangedHandler** lifecycle event callback.\n\n```js\n\t...\n\t/**\n\t * concreteComp constructor\n\t * \n\t * @param _superConstructor Super class constructor\n\t * @param customParam Custom param of the component\n\t */\n\tfunction(_superConstructor, customParam){\n\t\t...\n\t\t\n\t\tthis.label = new SMF.UI.Label({\n\t\t\ttext: text,\n\t\t\ttop: 0,\n\t\t\tleft: 40,\n\t\t\theight: 30\n\t\t});\n\t\tthis.label.font.size = 26;\n\t\tthis.add(this.label);\n\t},\n\t// Second parameter public methods\n\tfunction(_public){\n\t\t_public.addtoCount = function(num){\n\t\t\t// inherited from UIComponent\n\t\t\tthis._changeState({\n\t\t\t\tcount: (this.state.count+num)\n\t\t\t})\n\t\t}\n\t\t// overrides lifecycle event callback\n\t\t_public.stateChangedHandler = function(state){\n\t\t\t// state is changed then update label\n\t\t\tthis.label.text = \"Count is \"+this.state.count;\n\t\t}\n\t}\n\t\n\t...\n\n```\n\nAnd you can subscribe any event of SMF.UI.Container of the component, internal or externally. Injects event object to subscription callback and pass event object that contains event's type and current component state.\n##### SMF.UI.Container event callbacks\nCallbacks are different from component's events. Callbacks are always start with \"on\" prefix. Callbacks are only used with SMF View Components like SMF.UI.Label, SMF.UI.Container and others. \"on\" prefix reserved usage of callbacks and you musn't use for component events.\n- onControlAdd\nFired when a child control (for each control) is added (Fired after added) ...\n- onControlRemoved\nFired when a child control (for each control) is removed (Fired after remove) ...\n- onHide\n- onShow\n- onTouch\n- onTouchEnded\n\n```js\n\t...\n\t/**\n\t * concreteComp constructor\n\t * \n\t * @param _superConstructor Super class constructor\n\t * @param customParam Custom param of the component\n\t */\n\tfunction(_superConstructor, customParam){\n\t\t...\n\t\t\n\t\t// Subscription to onTouch callback of SMF.UI.Container of the component\n\t\t// \n\t\tthis.getEventStream(\"onTouch\")\n\t\t\t.subscribe(function(e){\n\t\t\t\tthis._changeState(({checked: !e.state.checked}));\n\t\t\t}.bind(this))\n\t},\n\t...\n\t\n\t// or externally\n\t\n\tvar comp = new concreteComp(\"custom param\");\n\tcomp.getEventStream(\"onTouch\")\n\t\t.subscribe(function(e){\n\t\t\t// do something\n\t\t});\n\t\t\n\tcomp.getEventStream(\"onTouchEnded\")\n\t\t.subscribe(function(e){\n\t\t\t// do something\n\t\t})\t\t\n\t\t\n\t// or\n\tconst listener = function(e){\n\t\tif(e.type == \"onTouch\"){\n\t\t\t// do something\n\t\t} else if(e.type == \"onTouchEnded\"){\n\t\t\t// do another\n\t\t}\n\t}\n\t\n\tcomp.getEventStream(\"onTouch\")\n\t\t.subscribe(listener);\n\t\t\n\tcomp.getEventStream(\"onTouchEnded\")\n\t\t.subscribe(listener);\n\t\t\n\n```\n\nYou can also dispatch custom events. Conventionally events are ending with \"Event\" keyword and initially assigns empty function.\n```js\n\t...\n\t// Second parameter public methods\n\tfunction(_public){\n\t\t_public.countChangedEvent = function(){}\n\t\t_public.addtoCount = function(num){\n\t\t\t...\n\t\t\t// dispatches event stream\n\t\t\tthis.countChangedEvent();\n\t\t\t...\n\t\t}\n\t}\n\t...\n```\n\n#### Another example : \n```js\nconst extend = require(\"js-base/core/extend\");\nconst UIComponent = require(\"js-base/component/ui-component\");\n\nconst CheckBoxButton = extend(UIComponent)(\n    // Component constructor\n\tfunction(_super, text){\n\t\t// Initializes UIComponent constructor\n\t\t_super(this, \n\t\t\t{\n\t\t\t\twidth: 150,\n\t\t\t\theight: 30,\n\t\t\t\tborderWidth: 1\n\t\t\t},\n\t\t\t\"checkbox\",\n\t\t\t{\n\t\t\t\tchecked: false\n\t\t\t}\n\t\t);\n\t\t\n\t\tthis.checkedRect = new SMF.UI.Rectangle({\n\t\t\tfillColor: \"#000000\",\n\t\t\twidth: 15,\n\t\t\theight: 15,\n\t\t\tleft: 7.5,\n\t\t\ttop: 7.5,\n\t\t\talpha: 0\n\t\t});\n\t\t\n\t\tthis.checkedAreaRect = new SMF.UI.Rectangle({\n\t\t\tfillColor: \"#ffffff\",\n\t\t\twidth: 30,\n\t\t\ttop: 0,\n\t\t\tleft: 0,\n\t\t  \tborderWidth: \"1px\",\n\t\t        borderColor: \"#305E75\",\n\t\t\theight: 30\n\t\t});\n\t\t\n\t\tthis.label = new SMF.UI.Label({\n\t\t\ttext: text,\n\t\t\ttop: 0,\n\t\t\tleft: 40,\n\t\t\theight: 30\n\t\t});\n\t\t\n\t\tthis.label.font.size = 26;\n\t\t\n\t\tthis.add(this.label);\n\t\tthis.add(this.checkedAreaRect);\n\t\tthis.add(this.checkedRect);\n\t\t\n\t\tvar changeState = this._changeState.bind(this);\n\t\t\n\t\tthis.getEventStream(\"onTouch\")\n\t\t\t.subscribe(function(e){\n\t\t\t\tchangeState(({checked: !e.state.checked}));\n\t\t\t})\n\t},\n\t// Component public methods\n\tfunction(_proto){\n   \t _proto.stateChangedHandler = function(state){\n\t\t\tthis.checkedRect.alpha = state.checked? 1:0;\n\t\t};\n\t\t_proto.changeButton = function(){\n\t\t};\n\t}\n);\n\t\nmodule.exports = CheckBoxButton;\n\n```\n\n### Component StyleSheet\nUIComponents are styleable components. \n\n### js-base/core/styler\n**styler(style)(className)(updateCallBack(className, key, value))**\nCreates styling container.\n```js\nvar style = {\n\t...\n}\nvar styling = styler(style);\n\n...\n```\n### Creating Style Object\nYou can create objects using '.' for className and '&' for component instances.\n```js\nvar warnColor = \"#0c77ff\";\n\nvar style = {\n  \".checkbox\": {\n    width : \"150dp\",\n    height: \"30dp\",\n    \".warn\": {\n      \"&container\":{\n        borderColor: normalColor,\n      },\n      \"&label\": {\n        font:{\n          size: \"28dp\"\n        }\n      },\n      \"&checkedRect\":{\n        fillColor: normalColor\n      },\n      \"&checkedAreaRect\":{\n        borderColor:  normalColor\n      }\n    }\n  }\n};\n\nvar styling = styler(style);\n\n```\n***Usage of Styler***\n```js\nconst CheckBoxButton = extend(UIComponent)(\n\tfunction(_super, text){\n\t\t_super(\n\t\t\t// for initializing super component as this scope\n\t\t\tthis, \n\t\t\t// Component container properties\n\t\t\t{\n\t\t\t\t...\n\t\t\t},\n\t\t\t// component style id\n\t\t\t\"&container\",\n\t\t\t// initial state of component\n\t\t\t{\n\t\t\t\t...\n\t\t\t}\n\t\t);\n\t\t\n\t...\t\n\t\n\t\tthis.checkedRect = new SMF.UI.Rectangle({\n\t\t\tfillColor: \"#000000\",\n\t\t\twidth: \"15dp\",\n\t\t\theight: \"15dp\",\n\t\t\tleft: \"7.5dp\",\n\t\t\ttop: \"7.5dp\",\n\t\t\talpha: 0,\n\t\t\tname: \"checkedRect\"\n\t\t});\n\t\t\n\t\tthis.checkedAreaRect = new SMF.UI.Rectangle({\n\t\t\tfillColor: \"#ffffff\",\n\t\t\twidth: \"30dp\",\n\t\t\ttop: 0,\n\t\t\tleft: 0,\n\t\t\tborderWidth: \"1dp\",\n     \t\t\tborderColor: \"#305E75\",\n\t\t\theight: \"30dp\",\n\t\t\tname: \"checkedAreaRect\"\n\t\t});\n\t\t\n\t\tthis.label = new SMF.UI.Label({\n\t\t\ttext: text,\n\t\t\ttop: 0,\n\t\t\tleft: \"40dp\",\n\t\t\theight: \"30dp\",\n\t\t\tname: \"label\",\n\t\t\t// if this propery is true then onTouch event of parent Container of this Label cannot be captured.\n\t\t\ttouchEnabled: false\n\t\t});\n\t\t\n\t\tthis.label.font.size = \"26dp\";\n\t\t\n\t\tthis.add(this.label, \"&label\");\n\t\tthis.add(this.checkedAreaRect, \"&checkedAreaRect\");\n\t\tthis.add(this.checkedRect, \"&checkedRect\");\n\t...\n);\n\n/** {UIComponent} */\nvar btn = new CheckBoxButton(\"Touch me!\");\nbtn.setClassName(\".checkbox.warn\");\nbtn.setStyler(styling);\n\n```\n\n### js-base/core/styler\n**styler(style)(className)(updateCallBack(className, key, value))**\n\n### js-base/component/UIComponent Style Api\n- **setStyler(styler)**\nAssigns js-base/core/styler container to UIComponent instance.\n- **setClassNames(className)**\nAssigns styling classNames to UIComponent\n\n### Working with Pages\nPages are root view containers.\n\n#### Creating a Page\nCreating a page using (SMF.UI.Page)[http://docs.smartface.io/#!/api/SMF.UI.Page] Control like below\n ```js\n var homePage = new SMF.UI.Page({\n \t// page properties\n });\n \n ```\n After that you can call page to show on screen \n ```js\n homePage.show();\n ```\n\nCreating a page using js-base/extend below\n```js\n//home-page.js\nconst Page = require('js-base/compnent/page');\nconst extend = require('js-base/core/extend');\n\nconst HomePageClass = extend(Page)(\n\t// homePage Constructor\n\tfunction(superPageConstructor, customPageParam){\n\t\tsuperPageConstructor(\n\t\t\t// initalizes super class for this page scope\n\t\t\tthis,\n\t\t\t// Page properties\n\t\t\t{},\n\t\t\t// name of the page\n\t\t\t\"name-of-page\",\n\t\t\t// initial state of the page\n\t\t\t{\n\t\t\t\tloading: false\n\t\t\t}\n\t\t)\n\t},\n\t// public methods of the page\n\tfunction(publicMethods){\n\t\t// overrides abstract method of the abstract page\n\t\t// This method is used by Router to inject routing data like userId, productId etc.\n\t\tpublicMethods.setRouteParams = function(param){\n\t\t}\n\t}\n\t);\n\t\nconst homePage = new HomePageClass(\n\t// this is the customPageParam\n\t{\n\t\ttitle: \"User Home Page\"\n\t});\n\t\n\t// then call to show page object on screen\n\thomePage.show();\n```\n\n#### Using Page Router\nRouter manages application routes like other frameworks for example angularjs, react-router etc.\n\nFirst, we register pages of application.\n```js\n\nRouter.add(\n\t// Routing name\n\t\"product-home\", \n\t// Page Class\n\tHomePageClass\n);\n\n// to call page anywhere of application, we can call like below\nRouter.go(\n\t\"product-home\",\n\tproductId\n);\n\n```\n\n\n\n## Support & Documentation & Useful Links\nGuides: https://www.smartface.io/guides\nAPI Docs: https://docs.smartface.io\nSmartface Cloud Dashboard: https://cloud.smartface.io \nSmartface On-Device Emulator Download: https://smf.to/app\n",
  "readmeFilename": "README.md",
  "gitHead": "9e83273ea3e5e27d8037de4da93f40e6f6eb3b15",
  "_id": "js-base@1.0.4",
  "_shasum": "208ea91c9f26e7c616d9fabc36058bbc3bcc8158",
  "_from": "js-base@1.0.4",
  "_npmVersion": "2.15.9",
  "_nodeVersion": "4.6.1",
  "_npmUser": {
    "name": "deployer",
    "email": "info@smartface.io"
  },
  "maintainers": [
    {
      "name": "deployer",
      "email": "info@smartface.io"
    }
  ],
  "dist": {
    "shasum": "208ea91c9f26e7c616d9fabc36058bbc3bcc8158",
    "tarball": "http://cd.smartface.io/nexus/content/groups/npm-all-public/js-base/-/js-base-1.0.4.tgz"
  },
  "_resolved": "http://cd.smartface.io/nexus/content/groups/npm-all-public/js-base/-/js-base-1.0.4.tgz"
}

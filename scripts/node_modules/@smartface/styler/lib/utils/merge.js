(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["module", "exports"], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports);
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports);
    global.merge = mod.exports;
  }
})(this, function (module, exports) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = deepMerge;
  function isObj(val) {
    return val !== null && val instanceof Object;
  }

  function hasProp(target, prop) {
    return Object.prototype.hasOwnProperty.call(target, prop);
  }

  function recurse(acc, obj) {
    for (var p in obj) {
      acc[p] = isObj(obj[p]) && isObj(acc[p]) || isObj(obj[p]) && !acc[p] ? recurse(hasProp(acc, p) ? acc[p] : {}, obj[p]) : obj[p];
    }

    return acc;
  }

  /**
   * Creates a deeply merged copy of the specified objects
   * 
   * @returns {Object}
   */
  function deepMerge() {
    var acc = {};

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    for (var i = 0; i < args.length; i++) {
      acc = recurse(acc, args[i]);
    }

    return acc;
  }
  module.exports = exports["default"];
});
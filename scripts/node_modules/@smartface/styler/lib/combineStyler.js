(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["module", "exports", "./utils/styleAssign", "./utils/merge"], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require("./utils/styleAssign"), require("./utils/merge"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.styleAssign, global.merge);
    global.combineStyler = mod.exports;
  }
})(this, function (module, exports, _styleAssign, _merge) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = combineStyler;

  var _merge2 = _interopRequireDefault(_merge);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  /**
   * Takes multiple styling functions and returns single styling function as all is combined.
   * Searches given classnames from all given stylers then output like a single Styler.
   *
   * @example
   * ...
   * const styler1 = styler(styles1);
   * const styler2 = styler(styles2);
   * const styler3 = styler(styles3);
   * 
   * const mergedStyler = combineStyler(styler1, styler2, styler3);
   * const styles = combineStyler(".button.small .button.warning");
   * 
   * styles(function(className, key, value){
   *  ...
   *  
   * });
   * 
   * @param {...function} - Styling functions
   * @returns {function} - Styling Composer
   */
  function combineStyler() {
    var stylings = Array.prototype.slice.call(arguments);
    /**
     * Styling composer
     * 
     * @param {string} classNames - Class names of desired styles
     */
    return function combinedStyleComposer(classNames) {
      var results = [];
      stylings.forEach(function (styling) {
        return results.push(styling(classNames)());
      });

      var mergedResults = _merge2.default.apply(null, results);

      /**
       * Styles mapping
       * 
       * @param {function} fn - Style map callback function
       * @returns {Object|null} - return style object
       */
      return function (fn) {
        if (typeof classNames !== "string") {
          return stylings.slice();
        }

        if (typeof fn === "function") {
          var mapResult = {};
          var mapFn = function mapFn(classNames, key, value) {
            fn(classNames, key, value);
          };

          stylings.forEach(function (styling) {
            return styling(classNames)(function (className, key, value) {
              var _mapResult$className$;

              mapResult[className] = mapResult[className] || [];
              mapResult[className].push((_mapResult$className$ = {}, _mapResult$className$[key] = value, _mapResult$className$));
            });
          });

          Object.keys(mapResult).forEach(function (className) {
            mapResult[className] = _merge2.default.apply(null, mapResult[className]);
            Object.keys(mapResult[className]).forEach(function (key) {
              return fn(className, key, mapResult[className][key]);
            });
          });
        }

        return mergedResults;
      };
    };
  }
  module.exports = exports["default"];
});
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["module", "exports", "./utils/cloneStyle", "./utils/findClassNames", "./utils/flatMapStyles", "./buildStyles", "./utils/merge", "./commandsManager"], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require("./utils/cloneStyle"), require("./utils/findClassNames"), require("./utils/flatMapStyles"), require("./buildStyles"), require("./utils/merge"), require("./commandsManager"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.cloneStyle, global.findClassNames, global.flatMapStyles, global.buildStyles, global.merge, global.commandsManager);
    global.styler = mod.exports;
  }
})(this, function (module, exports, _cloneStyle, _findClassNames, _flatMapStyles, _buildStyles, _merge, _commandsManager) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _cloneStyle2 = _interopRequireDefault(_cloneStyle);

  var _findClassNames2 = _interopRequireDefault(_findClassNames);

  var _flatMapStyles2 = _interopRequireDefault(_flatMapStyles);

  var _buildStyles2 = _interopRequireDefault(_buildStyles);

  var _merge2 = _interopRequireDefault(_merge);

  var _commandsManager2 = _interopRequireDefault(_commandsManager);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  /**
   * Styling Wrapper. In order to return desired styles. Makes styles flatted then merge all by classNames then pass merged styles to callback.
   * 
   * @example
   *  const styler = require("@smartface/styler").styler or require("@smartface/styler/lib/styler");
   *  const styles = {
   *      ".button"{
   *        widht: "100px",
   *        height: "30px",
   *        ".blue": {
   *          color: "blue"
   *        },
   *        ".red": {
   *          color: "red"
   *        }
   *    }
   *  }
   *  
   *  const styling = styler(styles);
   *  const blueButtonStyle = {};
   *  const redButtonStyle = {};
   * 
   *  styling(".button.blue")(function(className, key, value){
   *    blueButtonStyle[key] = value;
   *  }); 
   *  // blueButtonStyle equals to {width: "100px", height: "20px", color: "blue"}
   *  
   *  styling(".button.red")(function(className, key, value){
   *    redButtonStyle[key] = value;
   *  });
   *  // redButtonStyle equals to {width: "100px", height: "20px", color: "red"}
   * 
   * @param {...Object.<string, (string | number | function | Object)>} - Style Objects
   * @returns {function} - Styling composer
   */
  /**
   * @copyright (c) 2017 Smartface.io
   * @license MIT
   * @author Cenk Cetinkaya
   */

  function styler() {
    for (var _len = arguments.length, rawStyles = Array(_len), _key = 0; _key < _len; _key++) {
      rawStyles[_key] = arguments[_key];
    }

    var stylesBundle = _buildStyles2.default.apply(null, rawStyles);

    /**
     * Styling composer
     * 
     * @param {...string} classNames - Class names of desired styles
     */
    return function stylingComposer(classNames, error) {
      var parsedClassNames;
      var styles = [];
      var notFound = [];

      if (classNames) {
        var commands = stylesBundle.__runtime_commands__;
        parsedClassNames = (0, _findClassNames2.default)(classNames).map(function (classNm) {
          return classNm ? classNm.join("") : "";
        });
        parsedClassNames.forEach(function (className) {
          if (!stylesBundle[className]) {
            notFound.push(className);
            return;
          }

          var style = stylesBundle[className];
          var factories = commands[className] ? _commandsManager2.default.getRuntimeCommands() : null;
          if (factories) {
            factories.forEach(function (factory) {
              commands[className].forEach(function (command) {
                var fn = factory(command.type);
                fn && (style = (0, _merge2.default)(style, fn(command)));
              });
            });
          }

          styles.push(style);
        });
      } else {
        var _commands = stylesBundle.__runtime_commands__;
        var factories = _commandsManager2.default.getRuntimeCommands();
        styles.push(stylesBundle);

        // if runtime commands and command factories exist
        if (factories.length > 0 && _commands) {
          // run all runtime commands of the styles
          Object.keys(_commands).forEach(function (className) {
            _commands[className].forEach(function (command) {
              factories.forEach(function (factory) {
                var style = {};
                var fn = factory(command.type);
                fn && (style[className] = (0, _merge2.default)(stylesBundle[className], fn(command)));
                styles.push(style);
              });
            });
          });
        }
      }

      var style = _merge2.default.apply(null, styles);

      if (notFound.length > 0 && error) {
        error(notFound.join(", ") + " cannot be found.");
      }

      /**
       * Styles mapper. If passed a function as the argument then return styles to the funtion or null then return style object.
       * 
       * @param {?function=} [null] fn - Mapping callback function
       */
      return function stylesComposer() {
        var fn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;


        //create deepcopy of the style

        if (fn) {
          var result = {};

          // parsedClassNames.forEach((className) => {
          if (style) {
            Object.keys(style).forEach(function (key) {
              var value = style[key] !== null && style[key] instanceof Object ? (0, _merge2.default)(style[key]) : style[key];

              result[key] = fn(classNames, key, value);
            });
          }
          // });

          return result;
        };

        return style;
      };
    };
  }

  exports.default = styler;
  module.exports = exports["default"];
});
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["module", "exports", "./utils/styleDenormalizer", "./utils/commander", "./utils/merge", "./commandsManager"], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require("./utils/styleDenormalizer"), require("./utils/commander"), require("./utils/merge"), require("./commandsManager"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.styleDenormalizer, global.commander, global.merge, global.commandsManager);
    global.buildStyles = mod.exports;
  }
})(this, function (module, exports, _styleDenormalizer, _commander, _merge, _commandsManager) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = buildStyles;

  var _styleDenormalizer2 = _interopRequireDefault(_styleDenormalizer);

  var _commander2 = _interopRequireDefault(_commander);

  var _merge2 = _interopRequireDefault(_merge);

  var _commandsManager2 = _interopRequireDefault(_commandsManager);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  var _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  function buildStyles() {
    var runtimeCommands = { isEmpty: true };

    for (var _len = arguments.length, rawStyles = Array(_len), _key = 0; _key < _len; _key++) {
      rawStyles[_key] = arguments[_key];
    }

    if (rawStyles[0].__styler_bundle__) return rawStyles[0];

    var built = _styleDenormalizer2.default.apply(null, rawStyles).reduce(function (acc, res) {
      acc = (0, _merge2.default)(acc, res.styles);
      (0, _commander2.default)(acc, res.commands, _commandsManager2.default.getCommands(), res.runtimeCommands);
      if (res.runtimeCommands) {
        runtimeCommands.isEmpty && delete runtimeCommands.isEmpty;
        Object.keys(res.runtimeCommands).forEach(function (key) {
          runtimeCommands[key] = runtimeCommands[key] || [];
          // merge command collection with new by key
          res.runtimeCommands[key] && (runtimeCommands[key] = runtimeCommands[key].concat(res.runtimeCommands[key]));
        });
      }

      return acc;
    }, {});

    if (!runtimeCommands.isEmpty) {
      Object.defineProperty(built, '__runtime_commands__', {
        enumerable: false,
        configurable: false,
        writable: false,
        value: _extends({}, runtimeCommands)
      });
    }

    Object.defineProperty(built, '__styler_bundle__', {
      enumerable: false,
      configurable: false,
      writable: false,
      value: true
    });

    return built;
  }
  module.exports = exports["default"];
});
(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["module", "exports", "./util/raiseErrorMaybe"], factory);
  } else if (typeof exports !== "undefined") {
    factory(module, exports, require("./util/raiseErrorMaybe"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod, mod.exports, global.raiseErrorMaybe);
    global.Actor = mod.exports;
  }
})(this, function (module, exports, _raiseErrorMaybe) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _raiseErrorMaybe2 = _interopRequireDefault(_raiseErrorMaybe);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var Actor =
  /**
   * @constructor
   * @param {object} component - Wrapped Component
   */
  function Actor(component, name, id) {
    _classCallCheck(this, Actor);

    _initialiseProps.call(this);

    this._actorInternal_ = {};
    this._actorInternal_.component = component;
    this._actorInternal_.name = name;
    this._actorInternal_.id = id;
    this.isDirty = true;
    this.hooks = null;
  };

  var _initialiseProps = function _initialiseProps() {
    var _this = this;

    this.getName = function () {
      return _this._actorInternal_.name;
    };

    this.setID = function (id) {
      if (!_this._actorInternal_.id) {
        _this._actorInternal_.id = id;
      }
    };

    this.setName = function (name) {
      if (!_this._actorInternal_.name) {
        _this._actorInternal_.name = name;
      }
    };

    this.getID = function () {
      return _this._actorInternal_.id;
    };

    this.getInstanceID = function () {
      return _this.getName() + "@@" + _this.getID();
    };

    this.reset = function () {};

    this.setDirty = function (value) {
      _this.isDirty = value;
    };

    this.getDirty = function (value) {
      return _this.isDirty;
    };

    this.onRemove = function () {
      _this._actorInternal_.component.onRemove && _this._actorInternal_.component.onRemove();
    };

    this.onError = function (err) {
      if (_this._actorInternal_.component.onError) return _this._actorInternal_.component.onError(err);
      return false;
    };

    this.componentDidLeave = function () {
      typeof _this._actorInternal_.component.componentDidLeave === 'function' && _this._actorInternal_.component.componentDidLeave();
    };

    this.componentDidEnter = function (dispatcher) {
      _this._dispatcher = dispatcher;

      try {
        _this._actorInternal_.component.componentDidEnter ? _this._actorInternal_.component.componentDidEnter(function (action) {
          dispatcher(action, _this.getInstanceID());
        }) : _this._actorInternal_.component.dispatch = function (action) {
          dispatcher(action, _this.getInstanceID());
        };
      } catch (e) {
        e.message = "Error. When component " + _this.getName() + " entered the context.";
        (0, _raiseErrorMaybe2.default)(e, !!_this._actorInternal_ && !!_this._actorInternal_.component && _this._actorInternal_.component.onError);
      }
    };
  };

  exports.default = Actor;
  module.exports = exports["default"];
});
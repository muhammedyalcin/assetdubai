(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', '../core/hooks', '../styling/StyleContext', '../styling/Stylable', './action/addChild', './action/removeChild', './action/removeChildren', '@smartface/styler/lib/utils/findClassNames', '../core/util/raiseErrorMaybe'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('../core/hooks'), require('../styling/StyleContext'), require('../styling/Stylable'), require('./action/addChild'), require('./action/removeChild'), require('./action/removeChildren'), require('@smartface/styler/lib/utils/findClassNames'), require('../core/util/raiseErrorMaybe'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.hooks, global.StyleContext, global.Stylable, global.addChild, global.removeChild, global.removeChildren, global.findClassNames, global.raiseErrorMaybe);
    global.fromSFComponent = mod.exports;
  }
})(this, function (exports, _hooks, _StyleContext, _Stylable, _addChild, _removeChild, _removeChildren, _findClassNames, _raiseErrorMaybe) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.extractTreeFromSFComponent = extractTreeFromSFComponent;
  exports.default = fromSFComponent;
  exports.createActorTreeFromSFComponent = createActorTreeFromSFComponent;

  var _hooks2 = _interopRequireDefault(_hooks);

  var StyleContext = _interopRequireWildcard(_StyleContext);

  var _Stylable2 = _interopRequireDefault(_Stylable);

  var _addChild2 = _interopRequireDefault(_addChild);

  var _removeChild2 = _interopRequireDefault(_removeChild);

  var _removeChildren2 = _interopRequireDefault(_removeChildren);

  var _findClassNames2 = _interopRequireDefault(_findClassNames);

  var _raiseErrorMaybe2 = _interopRequireDefault(_raiseErrorMaybe);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function addChild(superAddChild, child, name) {
    var classNames = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
    var userProps = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;

    superAddChild(child);
    name && this.dispatch((0, _addChild2.default)(name, child, classNames, userProps));
  }

  function removeChild(superRemoveChild, child) {
    if (child) {
      superRemoveChild && superRemoveChild(child);
      child.dispatch && child.dispatch((0, _removeChild2.default)());
    } else {
      this.getParent && this.getParent() && this.getParent().removeChild(this);
      this.dispatch && this.dispatch((0, _removeChild2.default)());
    }
  }

  function removeChildren(superRemoveAll) {
    superRemoveAll();
    this.dispatch && this.dispatch((0, _removeChildren2.default)());
  }

  function createOriginals(component) {
    !component.__original_addChild && Object.defineProperty(component, "__original_addChild", {
      value: component.addChild,
      enumerable: false,
      configurable: false
    });

    !component.__original_removeChild && Object.defineProperty(component, "__original_removeChild", {
      value: component.removeChild,
      enumerable: false,
      configurable: false
    });

    !component.__original_removeAll && Object.defineProperty(component, "__original_removeAll", {
      value: component.removeAll,
      enumerable: false,
      configurable: false
    });
  }

  /**
   * Extract components tree from a SF Component
   * 
   * @param {Object} component - A sf-core component
   * @param {string} name - component name
   * @param {function} initialClassNameMap - classNames mapping with specified component and children
   * @param {?function} hookList - callback function to capture context's hooks
   * @param {?Object} acc [={}] - Initial Accumulator value
   * 
   * @return {function} - context helper
   */
  function extractTreeFromSFComponent(root, rootName, initialClassNameMap) {
    var acc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : { '@@isEmpty': true };

    function buildContextTree(component, name) {
      var cNames = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";

      var componentVars = void 0;

      if (name == rootName + "_statusBar") {
        componentVars = root.constructor && root.constructor.$$styleContext.statusBar || {};
      } else if (name == rootName + "_headerBar") {
        componentVars = root.constructor && root.constructor.$$styleContext.headerBar || {};
      } else {
        componentVars = component.constructor && component.constructor.$$styleContext || {};
      }

      try {
        if (component.layout && typeof component.layout.addChild === 'function') {
          createOriginals(component.layout);

          Object.defineProperty(component.layout, "addChild", {
            value: addChild.bind(component, component.layout.__original_addChild.bind(component.layout)),
            enumerable: true,
            configurable: true
          });

          component.layout.removeChild && Object.defineProperty(component.layout, "removeChild", {
            value: removeChild.bind(component, component.layout.__original_removeChild.bind(component.layout)),
            enumerable: true,
            configurable: true
          });

          component.layout.removeAll && Object.defineProperty(component.layout, "removeAll", {
            value: removeChildren.bind(component, component.layout.__original_removeAll.bind(component.layout)),
            enumerable: true,
            configurable: true
          });
        } else if (typeof component.addChild === 'function') {
          createOriginals(component);

          Object.defineProperty(component, "addChild", {
            value: addChild.bind(component, component.__original_addChild.bind(component)),
            enumerable: true,
            configurable: true
          });

          component.removeChild && Object.defineProperty(component, "removeChild", {
            value: removeChild.bind(component, component.__original_removeChild.bind(component)),
            enumerable: true,
            configurable: true
          });

          component.removeAll && Object.defineProperty(component, "removeAll", {
            value: removeChildren.bind(component, component.__original_removeAll.bind(component)),
            enumerable: true,
            configurable: true
          });
        } else {
          !component.removeChild && Object.defineProperty(component, "removeChild", {
            value: removeChild.bind(component),
            enumerable: true,
            configurable: true
          });
        }
      } catch (e) {
        e.message = 'An Error is occurred when component [' + name + '] is patched in the [' + rootName + ']. ' + e.message;

        (0, _raiseErrorMaybe2.default)(e, component.onError);
      }

      var classNames = componentVars.classNames ? componentVars.classNames + " " + cNames + " #" + name : cNames + " #" + name;

      if (acc[name] === undefined) {
        delete acc['@@isEmpty'];

        acc[name] = {
          component: component,
          classNames: classNames,
          userStyle: componentVars.userProps,
          name: name
        };
      }

      component.children && Object.keys(component.children).forEach(function (child) {
        var comp = component.children[child];
        try {
          if (comp.component !== undefined && comp.classNames !== undefined) {
            buildContextTree(comp.component, name + "_" + child, comp.classNames);
          } else {
            buildContextTree(comp, name + "_" + child);
          }
        } catch (e) {
          e.message = "Error when component would be collected: " + child + ". " + e.message;
          (0, _raiseErrorMaybe2.default)(e, component.onError);
        }
      });
    }

    buildContextTree(root, rootName);

    return acc;
  }

  function fromSFComponent(root, rootName) {
    var hooksList = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var collection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    var ctree = extractTreeFromSFComponent(root, rootName, null);

    Object.keys(ctree).forEach(function (name) {
      var item = ctree[name];

      ctree[name] = collection[name] || (0, _Stylable2.default)(item);
    });

    return StyleContext.createStyleContext(ctree, (0, _hooks2.default)(hooksList), function updateContextTree() {
      var contextElements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      return fromSFComponent(root, rootName, null, hooksList, contextElements);
    });
  }

  function createActorTreeFromSFComponent(root, rootName) {
    var collection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    var ctree = extractTreeFromSFComponent(root, rootName, null);

    Object.keys(ctree).forEach(function (name) {
      var item = ctree[name];

      ctree[name] = collection[name] || (0, _Stylable2.default)(item);
    });

    return ctree;
  }
});